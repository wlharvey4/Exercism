# -*- mode:org; fill-column:79; -*-
#+Title:Exercism Exercises
#+Author:Pinecone062
#+Date:Last updated 2019-07-14 09:09
#+Macro: version Version 0.4.25
{{{title}}} {{{version}}} {{{date}}}
* Exercism Home
:PROPERTIES:
:unnumbered: t
:END:
- https://exercism.io
- https://github.com/exercism

** Exercism Readme
#+name:Exercism-Readme
#+BEGIN_SRC txt :tangle README.md
  # Welcome to Exercism

  This is the central point of contact for Exercism.

  ## Where to open issues

  The project is divided across many repositories.

  #### The website or product

  If you have any issues or questions regarding **the website
  (https://exercism.io)** please [open an issue in this
  repository](https://github.com/exercism/exercism/issues). To report
  errors in the website copy or submit fixes for typos or other
  improvements, please see the
  [exercism/website-copy](https://github.com/exercism/website-copy/issues)
  repository.

  #### The Command-Line Client (CLI)

  For problems with the **Command-Line Client (CLI)**, open an issue in
  [exercism/cli](https://github.com/exercism/cli/issues).

  #### Exercises in a particular programming language

  The exercises are all in separate, language-specific
  repositories. These repositories are tagged with the topic
  [`#exercism-track`](https://github.com/search?q=topic%3Aexercism-track+org%3Aexercism&type=Repositories). From
  there, search for the track (programming language) you are
  participating in.

  ,**Unsure? Open your issue here**

  If you aren't sure where to open it, then pick this repository. It's
  as good a starting point as any!

  ## Feeling uncomfortable?

  If you need to report a code of conduct violation, please email us at team@exercism.io.

  ## Where to find the code

  The code for the website lives in [exercism/website](http://github.com/exercism/website).

  The code for the old website is in this repository, in the
  [v1.exercism.io](https://github.com/exercism/exercism/tree/v1.exercism.io)
  branch.

  ## Who's behind Exercism?

  Read about our Team on the site: https://exercism.io/team
#+end_src

** Exercism CLI
- https://github.com/exercism/cli

To install manually, download the appropriate version of exercism based on your
processor architecture at the [[https://github.com/exercism/cli/releases/latest][releases page]], then extract the archive and put
the binary in your path.

Check the installed version with:

#+BEGIN_SRC sh :results output :exports both
exercism version
#+END_SRC

#+RESULTS:
: exercism version 3.0.11

In order to configure the CLI, paste in the following text into your terminal:
: exercism configure --token=b4b5ab41-b448-4762-a5ce-452ccd2eff08

 You should see a notification from the CLI that a configuration file has been
 written.

#+begin_src txt
You have configured the Exercism command-line client:

Config dir:                       ~/.config/exercism
Token:         (-t, --token)      b4b5ab41-b448-4762-a5ce-452ccd2eff08
Workspace:     (-w, --workspace)  <path-to>/Exercism
API Base URL:  (-a, --api)        https://api.exercism.io/v1
#+end_src

** Exercism Tangle
This code extracts all of the Exercism files to disk upon Export.
#+name:exercism-tangle
#+BEGIN_SRC emacs-lisp :results output :exports both
(org-babel-tangle-file "Exercism.org")
#+END_SRC

* JavaScript Exercism Track
- https://exercism.io/my/tracks/javascript

** Installing JavaScript
Install [[https://nodejs.org/en/][Node.js]] from its [[https://nodejs.org/en/download/][Downloads]] page

or

from a [[https://nodejs.org/en/download/package-manager/][package manager]].

** Required Tools for the JavaScript Track
Each assignment needs some tools to run the tests.  *NOTE* that they can be
installed by running the following command from within each assignment
directory:

: npm install

- [[https://facebook.github.io/jest/][Jest]]: a test runner based on Jasmine; to install globally for CLI usage:

  #+begin_example
  yarn global add jest

  success Installed "jest@24.8.0" with binaries:
      - jest
  ✨  Done in 13.66s.
  #+end_example

- [[https://github.com/babel/babel][Babel]] and [[https://babeljs.io][Babel.js]]: to transpile ECMAScript 2015 code to ECMAScript 5

  While you can install Babel CLI globally on your machine, it's much better to
  install it locally project by project, because:

  1. Different projects on the same machine can depend on different versions of
     Babel allowing you to update one at a time.

  2. It means you do not have an implicit dependency on the environment you are
     working in.  Making your project far more portable and easier to setup.

  {{{heading(Install Babel CLI Locally)}}}

  Install Babel CLI locally by running:
  : yarn add --dev @babel/core @babel/cli

  If you do not have a ~package.json~, create one before installing.  This will
  ensure proper interaction with the ~npx~ command.

  After that finishes installing, your ~package.json~ file should include:

  #+begin_example
    {
      "devDependencies": {
  +     "@babel/cli": "^7.0.0",
  +     "@babel/core": "^7.0.0"
      }
    }
  #+end_example

  {{{heading(Setup Babel build Scripts)}}}

  Instead of running Babel directly from the command line we're going to put
  our commands in ~npm~ scripts which will use our local version.  Add a
  =scripts= field to your ~package.json~ and put the ~babel~ command inside
  there as =build=.

  #+begin_example
    {
      "name": "my-project",
      "version": "1.0.0",
  +   "scripts": {
  +     "build": "babel src -d lib"
  +   },
      "devDependencies": {
        "babel-cli": "^6.0.0"
      }
    }
  #+end_example

  From your terminal you can run:
  : yarn run build

  This will run Babel the same way as before and the output will be present in
  ~lib~ directory, only now we are using a local copy.

  Alternatively, you can reference the babel cli inside of node_modules.
  : ./node_modules/.bin/babel src -d lib

  {{{heading(Enable the env Plugin and Create a babelrc File)}}}

  You've configured Babel but you haven't made it actually do anything.  Create
  a ~.babelrc~ config in your project root and enable some plugins.  To start,
  you can use the =env= preset, which enables transforms for ES2015+.
  : yarn add @babel/preset-env --dev

  In order to enable the preset you have to define it in your ~.babelrc~ file,
  like this:

  #+begin_example
  {
    "presets": ["@babel/preset-env"]
  }
  #+end_example

- [[http://eslint.org/][ESLint]] (optional): to perform several static analysis and coding style checks
  to your JavaScript code.

  {{{heading(Installing ESLint Locally)}}}

  If you want to include ESLint as part of your project’s build system, we
  recommend installing it locally.  You can do so using ~yarn~:

  : yarn add eslint --dev

  You should then setup a configuration file:

  : ./node_modules/.bin/eslint --init

  After that, you can run ESLint in your project’s root directory like this:

  : ./node_modules/.bin/eslint yourfile.js

  Instead of navigating to ~./node_modules/.bin/~ you may also use ~npx~ to run
  eslint:

  : npx eslint

  Any plugins or shareable configs that you use must also be installed locally
  to work with a locally-installed ESLint.

  {{{heading(ESLint Configuration)}}}

  After running ~eslint --init~, you’ll have an ~.eslintrc~ file in your
  directory.  In it, you’ll see some rules configured like this:

  #+begin_example
   # .eslintrc
   {
       "rules": {
           "semi": ["error", "always"],
           "quotes": ["error", "double"]
       }
   }
  #+end_example

  The names "semi" and "quotes" are the names of rules in ESLint.  The first
  value is the error level of the rule and can be one of these values:

  - "off" or 0 - turn the rule off

  - "warn" or 1 - turn the rule on as a warning (doesn’t affect exit code)

  - "error" or 2 - turn the rule on as an error (exit code will be 1)

  Your ~.eslintrc~ configuration file will also include the line:

  : "extends": "eslint:recommended"

  Because of this line, all of the rules marked “OK” on the rules page will be
  turned on.  ESLint will not lint your code unless you extend from a shared
  configuration or explicitly turn rules on in your configuration.

** Running the Tests
Execute the tests with:

: yarn run lint-test

You can also run Jest in "watch" mode, which will re-run your tests
automatically when you save changes to the code or test module:

: yarn run watch

{{{heading(Understanding Skip Tests)}}}

The skip method instructs the test suite to not run a test, this function could
be used also under the aliases:

- ~it.skip(name, fn)~
- ~xit(name, fn)~
- ~xtest(name, fn)~


They are skipped so as to enable users to concentrate on one test at a time and
enable one by one as they evolve the solution.

To enable skipping, change ~xtest~ to ~test~.

#+begin_src js
test('title cased phrases', () => {
  expect(Acronyms.parse('Portable Network Graphics')).toEqual('PNG');
});
#+end_src

{{{heading(Making Your First JavaScript 2015 Module)}}}

Usually, tests on this track will load your implementation by importing it as a
JavaScript module:

: import { Bob } from './bob.js';

You just need to export your implementation from the referenced file, bob.js:

#+begin_src js
export class Bob {
  hey(message) {
    //
    // Your solution to the exercise goes here
    //
  }
}
#+end_src

To make it easier to get started, there is a skeleton JavaScript file in the
directory for the first exercise.

#+caption:Skeleton JavaScript File
#+name:javascript-skeleton-file
#+begin_src js
//
// This is only a SKELETON file for the 'Hello World' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const hello = () => {
  //
  // YOUR CODE GOES HERE
  //
};

#+end_src

** JavaScript Hello World
*** JavaScript Hello World Introduction
The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


{{{heading(Download the Exercise)}}}

This step is done only once for initial setup; thereafter, this Org file will
install the project automatically upon an export.

#+name:javascript-hello-world-download
#+begin_src sh :results output :exports code
exercism download --exercise=hello-world --track=javascript
#+end_src

#+RESULTS: javascript-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/hello-world

*** JavaScript Hello World Setup and Tests
1. Go through the setup instructions for Javascript to install the necessary
   dependencies:
   - https://exercism.io/tracks/javascript/installation

2. Install assignment dependencies:
   This step will run automatically upon an export of this Org file.

   #+name:javascript-hello-world-install
   #+begin_src sh :dir javascript/hello-world :results output :exports both
   yarn install
   #+end_src

3. After completing the code challenge, Execute the tests.

   This step will also run automatically upon an export of this Org file.

   #+name:javascript-hello-world-run-lint-test
   #+begin_src sh :dir javascript/hello-world :results output :exports both
   yarn lint-test 2>&1
   #+end_src

   In the test suites all tests but the first have been skipped.  Once you get
   a test passing, you can enable the next one by changing ~xtest~ to ~test~.

4. Submit Passing code to Exercism

  This step should be done manually after this Org file correctly installs the
  project and successfully runs the test.

  #+name:javascript-hello-world-submit
  #+begin_src sh :dir javascript/hello-world :results output
  exercism submit $PWD/hello-world.js
  #+end_src

*** JavaScript Hello World Files
**** JS Hello World README
#+name:javascript-hello-world-readme
#+begin_src markdown :tangle javascript/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

**** JS Hello World package.json
#+name:javascript-hello-world-package.json
#+begin_src js :tangle javascript/hello-world/package.json :mkdirp yes
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}
#+end_src

**** JS Hello World Babel config
#+name:javascript-hello-world-babel.config.js
#+begin_src js :tangle javascript/hello-world/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

**** JS Hello World ESLint config
#+name:javascript-hello-world-eslint-config
#+begin_src js :tangle javascript/hello-world/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

**** JS Hello World Jest Spec
#+name:javascript-hello-world-spec
#+begin_src js :tangle javascript/hello-world/hello-world.spec.js
import { hello } from './hello-world';

describe('Hello World', () => {
  test('says hello', () => {
    expect(hello()).toEqual('Hello, World!');
  });
});
#+end_src

**** JS Hello World Solution
#+name:javascript-hello-world-solution
#+begin_src js :tangle javascript/hello-world/hello-world.js
//
// This is only a SKELETON file for the 'Hello World' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const hello = () => {
    return "Hello, World!";
};
#+end_src

#+name:javascript-hello-world-exercism-metadata
#+begin_src js :tangle javascript/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"javascript",
    "exercise":"hello-world",
    "id":"3e83e95453cb4b2e8d0a68027687fe72",
    "url":"https://exercism.io/my/solutions/3e83e95453cb4b2e8d0a68027687fe72",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+end_src

** JavaScript Two Fer
- https://exercism.io/my/solutions/0d6a508dc6cb4f2282e2cfc2f5274acf

To download the code manually:
#+name:javascript-two-fer-download
#+begin_src sh :results output
exercism download --exercise=two-fer --track=javascript
#+end_src

#+RESULTS: javascript-two-fer-download
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/two-fer

When ready to submit working code:
#+name:javascript-two-fer-submit
#+begin_src sh :dir javascript/two-fer :results output
exercism submit ./two-fer.js
#+end_src

#+RESULTS: javascript-two-fer-submit
:     https://exercism.io/my/solutions/0d6a508dc6cb4f2282e2cfc2f5274acf

*** JavaScript Two Fer Files
**** JS Two Fer README
#+name:javascript-two-fer-readme
#+begin_src markdown :tangle javascript/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    |String to return 
|:-------|:------------------
|Alice   |One for Alice, one for me. 
|Bob     |One for Bob, one for me.
|        |One for you, one for me.
|Zaphod  |One for Zaphod, one for me.

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

**** JS Two Fer Package config
#+name:javascript-two-fer-package-config
#+begin_src js :tangle javascript/two-fer/package.json :mkdirp yes
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}
#+end_src

**** JS Two Fer Babel config
#+name:javascript-two-fer-babel-config
#+begin_src js :tangle javascript/two-fer/babel.config.js :mkdirp yes
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

**** JS Two Fer ESLint config
#+name:javascript-two-fer-eslint-config
#+begin_src js :tangle javascript/two-fer/.eslintrc :mkdirp yes
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

**** JS Two Fer Test Spec
#+name:javascript-two-fer-test-spec
#+begin_src js :tangle javascript/two-fer/two-fer.spec.js :mkdirp yes
import { twoFer } from './two-fer'

describe('twoFer()', () => {
  test('no name given', () => {
    expect(twoFer()).toEqual("One for you, one for me.")
  })

  test('a name given', () => {
    expect(twoFer("Alice")).toEqual("One for Alice, one for me.")
  })

  test('another name given', () => {
    expect(twoFer("Bob")).toEqual("One for Bob, one for me.")
  })
})
#+end_src

**** JS Two Fer Solution
#+name:javascript-two-fer-solution
#+begin_src js :tangle javascript/two-fer/two-fer.js :mkdirp yes
export const twoFer = (name="you") => {
    return (`One for ${name}, one for me.`);
}
#+end_src

#+name:javascript-two-fer-exercism-metadata
#+begin_src js :tangle javascript/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"javascript",
    "exercise":"two-fer",
    "id":"0d6a508dc6cb4f2282e2cfc2f5274acf",
    "url":"https://exercism.io/my/solutions/0d6a508dc6cb4f2282e2cfc2f5274acf",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** JavaScript Two Fer Installation and Testing
#+name:javascript-two-fer-package-installation
#+begin_src sh :dir javascript/two-fer :results output :exports both
yarn
#+end_src

#+name:javascript-two-fer-testing
#+begin_src sh :dir javascript/two-fer :results output :exports both
yarn lint-test 2>&1
#+end_src

#+RESULTS: javascript-two-fer-testing
#+begin_example
yarn run v1.16.0
$ eslint . && jest --no-cache ./* 
PASS ./two-fer.spec.js
  twoFer()
    ✓ no name given (3ms)
    ✓ a name given (1ms)
    ✓ another name given

Test Suites: 1 passed, 1 total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        0.856s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/node_modules|.\/package.json|.\/two-fer.js|.\/two-fer.spec.js|.\/yarn.lock/i.
Done in 1.95s.
#+end_example

** JavaScript Resister Color
- https://exercism.io/my/solutions/5ac4fa71d14f41edb6a16980179d2dbc

Resistors have color coded bands, where each color maps to a number. The first
2 bands of a resistor have a simple encoding scheme: each color maps to a
single number.

These colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

Mnemonics map the colors to the numbers, that, when stored as an array, happen
to map to their index in the array: Better Be Right Or Your Great Big Values Go
Wrong.

To pass this exercise, your code will be given a color, and should return the
correct number.

*** JavaScript Resistor Color Scripts
{{{heading(Download Source Code)}}}

This step does not normally need to be done other during initial setup of the
Org file.

#+name:javascript-resistor-color-download
#+begin_src sh :results output
exercism download --exercise=resistor-color --track=javascript
#+end_src

#+RESULTS: javascript-resistor-color-download
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/resistor-color

{{{heading(Submit)}}}

This step is done only once, after all the tests are passing.

#+name:javascript-resistor-color-submit
#+begin_src sh :dir javascript/resistor-color :results output
exercism submit resistor-color.js
#+end_src

#+RESULTS: javascript-resistor-color-submit

{{{heading(Install Dependencies)}}}

This step is done automatically upon an export of this Org source file.  There
is no reason to run this script manually unless the source file is not being
exported.

#+name:javascript-resistor-color-install
#+begin_src sh :dir javascript/resistor-color :results output :exports both
yarn
#+end_src

{{{heading(Test Solution Code)}}}

This step is done automatically upon an export of this Org source file.  During
coding, it can be done manually to test your code from within this Org source
file.

#+name:javascript/resistor-color-test-solution
#+begin_src sh :dir javascript/resistor-color :results output :exports both
yarn lint-test 2>&1
#+end_src

#+RESULTS: javascript/resistor-color-test-solution
#+begin_example
yarn run v1.16.0
$ eslint . && jest --no-cache ./* 
PASS ./resistor-color.spec.js
  ResistorColor
    ✓ Colors (1ms)
    Color codes
      ✓ Black (2ms)
      ✓ White
      ✓ Orange

Test Suites: 1 passed, 1 total
Tests:       4 passed, 4 total
Snapshots:   0 total
Time:        0.836s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/node_modules|.\/package.json|.\/resistor-color.js|.\/resistor-color.spec.js|.\/yarn.lock/i.
Done in 1.90s.
#+end_example

*** JavaScript Resistor Color Solution
#+name:javascript-resistor-color-solution
#+begin_src js :tangle javascript/resistor-color/resistor-color.js :mkdirp yes
const COLORS = [
    "black",
    "brown",
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "violet",
    "grey",
    "white"
];

const colorCode = color => COLORS.indexOf(color);

export { colorCode, COLORS };
#+end_src
*** JavaScript Resistor Color Readme
#+name:javascript-resistor-color-readme
#+begin_src markdown :tangle javascript/resistor-color/README.md :mkdirp yes
# Resistor Color

Resistors have color coded bands, where each color maps to a
number. The first 2 bands of a resistor have a simple encoding scheme:
each color maps to a single number.

These colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

Mnemonics map the colors to the numbers, that, when stored as an
array, happen to map to their index in the array: Better Be Right Or
Your Great Big Values Go Wrong.

More information on the color encoding of resistors can be found in
the [Electronic color code Wikipedia
article](https://en.wikipedia.org/wiki/Electronic_color_code)

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

Maud de Vries, Erik Schierboom [https://github.com/exercism/problem-specifications/issues/1458](https://github.com/exercism/problem-specifications/issues/1458)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

*** JavaScript Resistor Color Test Spec
#+name:javascript-resistor-color-test-spec
#+begin_src js :tangle javascript/resistor-color/resistor-color.spec.js :mkdirp yes
import { colorCode, COLORS } from './resistor-color'

describe('ResistorColor', () => {
  describe('Color codes', () => {
    test('Black', () => {
      expect(colorCode("black")).toEqual(0)
    })

    test('White', () => {
      expect(colorCode("white")).toEqual(9)
    })

    test('Orange', () => {
      expect(colorCode("orange")).toEqual(3)
    })
  })

  test('Colors', () => {
    expect(COLORS).toEqual(["black","brown","red","orange","yellow","green","blue","violet","grey","white"])
  })
})
#+end_src

*** JavaScript Resister Color Configuration Files
{{{heading(package.json)}}}
#+name:javascript-resistor-color-package-json
#+begin_src js :tangle javascript/resistor-color/package.json :mkdirp yes
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}
#+end_src

{{{heading(Babel Config)}}}
#+name:javascript-resistor-color-babel-config
#+begin_src js :tangle javascript/resistor-color/babel.config.js :mkdirp yes
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

{{{heading(ESLint Config)}}}
#+name:javascript-resistor-color-eslint-config
#+begin_src js :tangle javascript/resistor-color/.eslintrc :mkdirp yes
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

#+name:javascript-resistor-color-exercism-metadata-json
#+begin_src js :tangle javascript/resistor-color/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"javascript",
    "exercise":"resistor-color",
    "id":"5ac4fa71d14f41edb6a16980179d2dbc",
    "url":"https://exercism.io/my/solutions/5ac4fa71d14f41edb6a16980179d2dbc",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

** JavaScript Resister Color Duo
:PROPERTIES:
:level:    easy
:END:
*** JavaScript Resister Color Duo Introduction
If you want to build something using a Raspberry Pi, you'll probably use
resistors.  For this exercise, you need to know two things about them:

- Each resistor has a resistance value.

- Resistors are small---so small in fact that if you printed the resistance
  value on them, it would be hard to read.  To get around this problem,
  manufacturers print color-coded bands onto the resistors to denote their
  resistance values.  Each band acts as a digit of a number.  For example, if
  they printed a brown band (value 1) followed by a green band (value 5), it
  would translate to the number 15.


In this exercise, you are going to create a helpful program so that you don't
have to remember the values of the bands.  The program will take two colors as
input, and output the correct number.

The band colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

*** JavaScript Resistor Color Due Readme
#+name:javascript-resistor-color-duo-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle javascript/resistor-color-duo/README.md
# Resistor Color Duo

If you want to build something using a Raspberry Pi, you'll probably
use _resistors_. For this exercise, you need to know two things about
them:

- Each resistor has a resistance value.

- Resistors are small - so small in fact that if you printed the
  resistance value on them, it would be hard to read.

To get around this problem, manufacturers print color-coded bands onto
the resistors to denote their resistance values. Each band acts as a
digit of a number. For example, if they printed a brown band (value 1)
followed by a green band (value 5), it would translate to the number
15.

In this exercise, you are going to create a helpful program so that
you don't have to remember the values of the bands. The program will
take two colors as input, and output the correct number.

The band colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing
`xtest` to `test`.

## Source

Maud de Vries, Erik Schierboom
[https://github.com/exercism/problem-specifications/issues/1464](https://github.com/exercism/problem-specifications/issues/1464)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how
others have completed the exercise.

#+end_src

*** JavaScript Resistor Color Duo Scripts
**** JavaScript Resistor Color Duo Download Script
#+name:javascript-resistor-color-duo-download-script
#+begin_src sh
exercism download --exercise=resistor-color-duo --track=javascript
#+end_src

#+RESULTS: javascript-resistor-color-duo-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/resistor-color-duo

**** JavaScript Resistor Color Duo Submit Script
#+name:javascript-resistor-color-duo-submit-script
#+begin_src sh
exercism submit javascript/resistor-color-duo/resistor-color-duo.js
#+end_src

**** JavaScript Resistor Color Duo Install Package Script
This script will run automatically upon an export of this Org file.

To install the package from within this Org file, place your cursor inside the
script below and type =C-c C-c=.

To install the package manually, navigate into the
~Exercism/javascript/resistor-color-duo/~ directory and type the command:
: ./install-package.sh

or alternatively, type the command:
: yarn

#+name:javascript-resistor-color-duo-install-package-json
#+header: :shebang "#!/usr/bin/env bash"
#+header: :dir javascript/resistor-color-duo
#+header: :results output :exports results
#+begin_src sh :tangle javascript/resistor-color-duo/install-package.sh
yarn
#+end_src

#+RESULTS: javascript-resistor-color-duo-install-package-json

**** JavaScript Resistor Color Duo Run Tests Script
These tests will run automatically upon an export of this Org file.

To run these tests in this Org file, type =C-c C-c= while your cursor is inside
the script..

To run these these from within a shell, navigate into the
~Exercism/javascript/resistor-color-duo/~ directory and type the command:
: ./run-tests.sh

#+name:javascript-resistor-color-duo-run-tests
#+header: :shebang "#!/usr/bin/env bash"
#+header: :dir javascript/resistor-color-duo
#+header: :results output :exports results
#+begin_src sh :tangle javascript/resistor-color-duo/run-tests.sh
npm run lint-test 2>&1 >test-results
cat test-results
#+end_src

*** JavaScript Resistor Color Duo Solution Code
#+name:javascript-resistor-color-due-solution-code
#+begin_src js :tangle javascript/resistor-color-duo/resistor-color-duo.js
//
// This is only a SKELETON file for the 'Resistor Color Duo' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const value = ([color1, color2]) => {
    const band_colors = {
        black: 0,
        brown: 1,
        red:   2,
        orange:3,
        yellow:4,
        green: 5,
        blue:  6,
        violet:7,
        grey:  8,
        white: 9
    };

    return Number.parseInt(`${band_colors[color1.toLowerCase()]}${band_colors[color2.toLowerCase()]}`);
};

#+end_src

*** JavaScript Resistor Color Duo Test Code
#+name:javascript-resistor-color-duo-test-code
#+begin_src js :tangle javascript/resistor-color-duo/resistor-color-duo.spec.js
import { value } from './resistor-color-duo.js';

describe('Resistor Colors', () => {
  test('Brown and black', () => {
    expect(value(['brown', 'black'])).toEqual(10);
  });

  test('Blue and grey', () => {
    expect(value(['blue', 'grey'])).toEqual(68);
  });

  test('Yellow and violet', () => {
    expect(value(['yellow', 'violet'])).toEqual(47);
  });

  test('Orange and orange', () => {
    expect(value(['orange', 'orange'])).toEqual(33);
  });
});

#+end_src
*** JavaScript Resistor Color Duo Metadata
#+name:javascript-resistor-color-duo-metadata
#+header: :exports none :mkdirp yes
#+begin_src js :tangle javascript/resistor-color-duo/.exercism/metadata.json
{
    "track":"javascript",
    "exercise":"resistor-color-duo",
    "id":"aa637cb2e6a942eb818d90f3b36fa3be",
    "url":"https://exercism.io/my/solutions/aa637cb2e6a942eb818d90f3b36fa3be",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

#+name:javascript-resistor-color-duo-package.json
#+begin_src js :tangle javascript/resistor-color-duo/package.json
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}

#+end_src

{{{heading(JavaScript Resistor Color Duo ESLint Metadata)}}}

#+name:javascript-resistor-color-duo-eslint
#+begin_src js :tangle javascript/resistor-color-duo/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

{{{heading(JavaScript Resistor Color Duo Babel Configuration)}}}

#+name:javascript-resistor-color-due-babel-config
#+begin_src js :tangle javascript/resistor-color-duo/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};

#+end_src
** JavaScript Gigasecond
*** JavaScript Gigasecond Introduction
Given a moment, determine the moment that would be after a gigasecond has
passed.  A gigasecond is 10^9 (1,000,000,000) seconds.

{{{heading(Setup)}}}

Go through the setup instructions for Javascript to install the necessary
dependencies:  [[*Required Tools for the JavaScript Track][JavaScript Tools]]
- https://exercism.io/tracks/javascript/installation


{{{heading(Requirements)}}}

Install assignment dependencies:

#+name:javascript-gigasecond-install-dependencies
#+header: :dir javascript/gigasecond
#+header: :results output :exports both
#+begin_src sh
yarn
#+end_src

#+RESULTS: javascript-gigasecond-install-dependencies
: yarn install v1.16.0
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 7.87s.

{{{heading(Making the Test Suite Pass)}}}

Execute the tests with:

#+name:javascript-gigasecond-execute-tests
#+header: :dir javascript/gigasecond
#+header: :results output :exports both
#+begin_src sh
yarn test
#+end_src

#+RESULTS: javascript-gigasecond-execute-tests
: yarn run v1.16.0
: $ jest --no-cache ./*
: Done in 1.65s.

In the test suites all tests but the first have been skipped.  Once you get a
test passing, you can enable the next one by changing ~xtest~ to ~test~.


{{{heading(Source)}}}

[[http://pine.fm/LearnToProgram/?Chapter=09][Chapter 9]] in Chris Pine's online Learn to Program tutorial.

*** JavaScript Gigasecond Scripts
**** JavaScript Gigasecond Download Script
#+name:javascript-gigasecond-download-script
#+begin_src sh :results output
exercism download --exercise=gigasecond --track=javascript
#+end_src

#+RESULTS: javascript-gigasecond-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/gigasecond

**** JavaScript Gigasecond Submit Script
#+name:javascript-gigasecond-submit-script
#+begin_src sh :results output
exercism submit javascript/gigasecond/gigasecond.js
#+end_src

#+RESULTS: javascript-gigasecond-submit-script
:     https://exercism.io/my/solutions/d8673b7004144bb1a63a0f1e57997cdb
: 

**** JavaScript Gigasecond Run Tests Script
#+name:javascript-gigasecond-run-tests-script
#+header: :dir javascript/gigasecond
#+header: :results output :exports results
#+begin_src sh
yarn run lint-test 2>&1
#+end_src

#+RESULTS: javascript-gigasecond-run-tests-script
#+begin_example
yarn run v1.16.0
$ eslint . && jest --no-cache ./* 
PASS ./gigasecond.spec.js
  Gigasecond
    ✓ tells a gigasecond anniversary since midnight (3ms)
    ✓ tells the anniversary is next day when you are born at night (1ms)
    ✓ even works before 1970 (beginning of Unix epoch)

Test Suites: 1 passed, 1 total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        1.125s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/gigasecond.js|.\/gigasecond.spec.js|.\/node_modules|.\/package.json|.\/yarn.lock/i.
Done in 2.42s.
#+end_example

*** JavaScript Gigasecond Readme
#+name:javascript-gigasecond-readmen
#+header: :mkdirp yes
#+begin_src markdown -n :tangle javascript/gigasecond/README.md
# Gigasecond

Given a moment, determine the moment that would be after a gigasecond
has passed.

A gigasecond is 10^9 (1,000,000,000) seconds.

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

Chapter 9 in Chris Pine's online Learn to Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=09](http://pine.fm/LearnToProgram/?Chapter=09)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** JavaScript Gigasecond Metadata Configuration
**** JavaScript Gigasecond Node Configuration
#+name:javascript-gigasecond-package.json
#+begin_src js -n :tangle javascript/gigasecond/package.json
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}

#+end_src

#+name:javascript-gigasecond-exercism-metadata
#+header: :mkdirp yes
#+begin_src js :tangle javascript/gigasecond/.exercism/metadata.json
{
    "track":"javascript",
    "exercise":"gigasecond",
    "id":"d8673b7004144bb1a63a0f1e57997cdb",
    "url":"https://exercism.io/my/solutions/d8673b7004144bb1a63a0f1e57997cdb",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** JavaScript Gigasecond Babel Configuration
#+name:javascript-gigasecond-babel-configuration
#+begin_src js -n :tangle javascript/gigasecond/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};

#+end_src

**** JavaScript Gigasecond ESLint Configuration
#+name:javascript-gigasecond-eslint-configuration
#+begin_src js -n :tangle javascript/gigasecond/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}

#+end_src

*** JavaScript Gigasecond Tests
#+name:javascript-gigasecond-tests
#+begin_src js -n :tangle javascript/gigasecond/gigasecond.spec.js
import { gigasecond } from './gigasecond';

describe('Gigasecond', () => {
  test('tells a gigasecond anniversary since midnight', () => {
    const gs = gigasecond(new Date(Date.UTC(2015, 8, 14)));
    const expectedDate = new Date(Date.UTC(2047, 4, 23, 1, 46, 40));
    expect(gs).toEqual(expectedDate);
  });

  test('tells the anniversary is next day when you are born at night', () => {
    const gs = gigasecond(new Date(Date.UTC(2015, 8, 14, 23, 59, 59)));
    const expectedDate = new Date(Date.UTC(2047, 4, 24, 1, 46, 39));
    expect(gs).toEqual(expectedDate);
  });

  test('even works before 1970 (beginning of Unix epoch)', () => {
    const gs = gigasecond(new Date(Date.UTC(1959, 6, 19, 5, 13, 45)));
    const expectedDate = new Date(Date.UTC(1991, 2, 27, 7, 0, 25));
    expect(gs).toEqual(expectedDate);
  });
});

#+end_src

*** JavaScript Gigasecond Solution
#+name:javascript-gigasecond-solution
#+begin_src js -n :tangle javascript/gigasecond/gigasecond.js
//
// This is only a SKELETON file for the 'Gigasecond' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const gigasecond = (moment) => {
    return new Date(moment.getTime() + 10**12);
};

#+end_src

** JavaScript RNA Transcription
*** JavaScript RNA Transcription Introduction
Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are:
- adenine (A)
- cytosine (C)
- guanine (G)
- thymine (T)


The four nucleotides found in RNA are
- adenine (A)
- cytosine (C)
- guanine (G)
- uracil (U)


Given a DNA strand, its transcribed RNA strand is formed by replacing each
nucleotide with its complement:

- G -> C
- C -> G
- T -> A
- A -> U


{{{heading(Setup)}}}

Go through the setup instructions for Javascript to install the necessary
dependencies:


{{{heading(Requirements)}}}

Install assignment dependencies:

#+name:javascript-rna-transcription-install-dependencies
#+header: :dir javascript/rna-transcription
#+header: :results output :exports results
#+begin_src sh
yarn
#+end_src

#+RESULTS: javascript-rna-transcription-install-dependencies
: yarn install v1.16.0
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 8.48s.

{{{heading(Making the test suite pass)}}}

Execute the tests with:

#+name:javascript-rna-transcription-run-tests
#+header: :dir javascript/rna-transcription
#+header: :results output :exports results
#+begin_src sh
yarn test 2>&1
#+end_src

#+RESULTS: javascript-rna-transcription-run-tests
#+begin_example
yarn run v1.16.0
$ jest --no-cache ./*
PASS ./rna-transcription.spec.js
  Transcription
    ✓ empty rna sequence (3ms)
    ✓ transcribes cytosine to guanine
    ✓ transcribes guanine to cytosine
    ✓ transcribes thymine to adenine
    ✓ transcribes adenine to uracil
    ✓ transcribes all dna nucleotides to their rna complements (1ms)

Test Suites: 1 passed, 1 total
Tests:       6 passed, 6 total
Snapshots:   0 total
Time:        0.864s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/node_modules|.\/package.json|.\/rna-transcription.js|.\/rna-transcription.spec.js|.\/yarn.lock/i.
Done in 1.44s.
#+end_example

In the test suites all tests but the first have been skipped.  Once you get a
test passing, you can enable the next one by changing ~xtest~ to ~test~.

{{{heading(Source)}}}

[[http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html][Hyperphysics Transcription]]

*** JavaScript RNA Transcription Scripts
**** JavaScript RNA Transcription Download Script
#+name:javascript-rna-transcription-download-script
#+begin_src sh
exercism download --exercise=rna-transcription --track=javascript
#+end_src

#+RESULTS: javascript-rna-transcription-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/rna-transcription

**** JavaScript RNA Transcription Submit Script
#+name:javascript-rna-transcription-submit-script
#+begin_src sh
exercism submit javascript/rna-transcription/rna-transcription.js
#+end_src

#+RESULTS: javascript-rna-transcription-submit-script
: https://exercism.io/my/solutions/e4a461c666f24604878c855a90871b40

*** JavaScript RNA Transcription README
#+name:javascript-rna-transcription-README
#+header: :mkdirp yes
#+begin_src markdown :tangle javascript/rna-transcription/README.md
# RNA Transcription

Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and thymine (**T**).

The four nucleotides found in RNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and uracil (**U**).

Given a DNA strand, its transcribed RNA strand is formed by replacing
each nucleotide with its complement:

,* `G` -> `C`
,* `C` -> `G`
,* `T` -> `A`
,* `A` -> `U`

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

Hyperphysics [http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html](http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src
*** JavaScript RNA Transcription Metadata
**** JavaScript RNA Transcription Node Package
#+name:javascript-rna-transcription-node-package
#+begin_src js :tangle javascript/rna-transcription/package.json
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}

#+end_src

**** JavaScript RNA Transcription Babel Config
#+name:javascript-rna-transcription-babel-config
#+begin_src js :tangle javascript/rna-transcription/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

**** JavaScript RNA Transcription ESLint Config
#+name:javascript-rna-transcription-eslint-config
#+begin_src js :tangle javascript/rna-transcription/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

**** JavaScript RNA Transcription Exercism Config
#+name:javascript-rna-transcription-exercism-config
#+header: :mkdirp yes
#+begin_src js :tangle javascript/rna-transcription/.exercism/metadata.json
{
    "track":"javascript",
    "exercise":"rna-transcription",
    "id":"e4a461c666f24604878c855a90871b40",
    "url":"https://exercism.io/my/solutions/e4a461c666f24604878c855a90871b40",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** JavaScript RNA Transcription Test Specs
#+name:javascript-rna-transcription-test-specs
#+begin_src js :tangle javascript/rna-transcription/rna-transcription.spec.js
import { toRna } from './rna-transcription'

describe('Transcription', () => {
  test('empty rna sequence', () => {
    expect(toRna('')).toEqual('');
  });

  test('transcribes cytosine to guanine', () => {
    expect(toRna('C')).toEqual('G');
  });

  test('transcribes guanine to cytosine', () => {
    expect(toRna('G')).toEqual('C');
  });

  test('transcribes thymine to adenine', () => {
    expect(toRna('T')).toEqual('A');
  });

  test('transcribes adenine to uracil', () => {
    expect(toRna('A')).toEqual('U');
  });

  test('transcribes all dna nucleotides to their rna complements', () => {
    expect(toRna('ACGTGGTCTTAA')).toEqual('UGCACCAGAAUU');
  });
})
#+end_src

*** JavaScript RNA Transcription Code
#+name:javascript-rna-transcription-code
#+begin_src js :tangle javascript/rna-transcription/rna-transcription.js
//
// This is only a SKELETON file for the 'RNA Transcription' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const toRna = (dna) => {
    const complement = {
        G:'C',
        C:'G',
        T:'A',
        A:'U',
    };

    return dna.split('').map(n => complement[n]).join('');
};
#+end_src

* TypeScript Exercism Track
- https://exercism.io/my/tracks/typescript

- 87 Exercises

** About TypeScript

#+begin_quote
TypeScript is a language for writing more maintainable JavaScript.  TypeScript
adds optional types, classes, and modules to JavaScript.
#+end_quote

[[http://www.typescriptlang.org][TypeScript]] (TS) is a superset of JavaScript (JS), created at Microsoft in
response to frustration developing large-scale applictions in JS.  In a large
JS project, knowing what properties your own objects have, what arguments your
functions take (and what type they need to be) can become difficult.
Similarly, since there is no ability to intelligently inspect JS code, when you
include a package (like from ~npm~), you have to keep the documentation up so
you know what methods are available and what arguments they take.  TS solves
these issues.  It is currently an open-source project hosted on Github.  It
supports tools for any browser as well as Node, for any host, on any OS.  TTS
compiles to readable, standards-based JavaScript.

TS adds a flexible type system to JS, in addition to interfaces (custom types)
and modifying the syntax of some ECMAScript features such as classes.  Types
are optional and flexible (for example, you can specify an argument is a string
OR a number).  Types allow tooling available in most code editors that improve
the development experience such as code completion and method detection, both
in your own code and in packages you use.  It supports many upcoming ECMASCript
features (such as ~async/await~).  TS can be written in OO or functional
styles.  It is compatible with all existing JS packages.  TS transpiles to
clean, readable JS.

Try it out at the [[http://www.typescriptlang.org/Playground][playground]], and stay up to date via the [[https://blogs.msdn.microsoft.com/typescript][Typescript blog]] and
Twitter account.

** TypeScript Hello World
*** TypeScript Introduction
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** TypeScript Setup
Go through the setup instructions for TypeScript to install the necessary
dependencies:

- Requirements

  - Install assignment dependencies:
    : $ yarn install

  - Making the test suite pass:

    Execute the tests with:
    : $ yarn test

    In many test suites all but the first test have been skipped.  Once you get
    a test passing, you can unskip the next one by changing ~xit~ to ~it~.

*** TypeScript Tutorial

This section is a step-by-step guide to solving this exercise.

*** TypeScript Hello World Readme

#+name:typescript-hello-world-readme
#+begin_src markdown :tangle typescript/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Setup

Go through the setup instructions for TypeScript to
install the necessary dependencies:

http://exercism.io/languages/typescript

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In many test suites all but the first test have been skipped.

Once you get a test passing, you can unskip the next one by
changing `xit` to `it`.

## Tutorial

This section is a step-by-step guide to solving this exercise.

This exercise has two files:

- hello-world.ts
- hello-world.test.ts

The first file is where you will write your code.
The second is where the tests are defined.

The tests will check whether your code is doing the right thing.
You don't need to be able to write a test suite from scratch,
but it helps to understand what a test looks like, and what
it is doing.

Open up the test file, hello-world.test.ts.
There are three tests inside:

```typescript
  it('says hello world with no name', () => {
    expect(HelloWorld.hello()).toEqual('Hello, World!')
  })

  xit('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  xit('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
```


Run the tests now, with the following command on the command-line:

```bash
$ yarn test
```

The test fails, which makes sense since you've not written any code yet.

The failure looks like this:

```
$ tsc --noEmit -p . && jest --no-cache
hello-world.test.ts(11,12): error TS2554: Expected 0 arguments, but got 1.
hello-world.test.ts(15,12): error TS2554: Expected 0 arguments, but got 1.
```

The failures go after the `$ tsc ...` line where the `tsc` command triggers typescript compiler to compile the code. Following lines
```
hello-world.test.ts(11,12): error TS2554: Expected 0 arguments, but got 1.
hello-world.test.ts(15,12): error TS2554: Expected 0 arguments, but got 1.
```
tell us that the compiler failed to compile the code in the files:
```
hello-world.test.ts
hello-world.test.ts
```
at lines:
```
                   (11,
                   (15,
```
starting from symbols:
```
                      ,12)
                      ,12)
```
with errors:
```
                                          Expected 0 arguments, but got 1.
                                          Expected 0 arguments, but got 1.
```

And these are those code lines with probable defects in the `hello-world.test.ts` file:

the 11th line:
```
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
           ^
           12
```

and the 15th line:
```
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
           ^
           12
```

Hence the problem is with the `HelloWorld.hello(...)` call where we are calling the `hello` static method from the `HelloWorld` class. While calling the method we pass one argument to it – in the 11th line we path `'Bob'` and in the 15th line we pass `'Sally'`.

Recalling the failure messages:
```
                                          Expected 0 arguments, but got 1.
                                          Expected 0 arguments, but got 1.
```

We can guess that while we pass 1 argument to the method, the method expected 0.

So let's check now this method in the `hello-worlds.ts` file:

```typescript
class HelloWorld {
    static hello( /* Parameters go here */ ) {
        // Your code here
    }
}

export default HelloWorld
```

Now we see that the method has no any parameter defined. This is the reason for our failure. Let's fix this by adding a parameter to the method:

```typescript
class HelloWorld {
    static hello(message:string) {
        // Your code here
    }
}

export default HelloWorld
```

Run tests again:
```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
hello-world.test.ts(7,12): error TS2554: Expected 1 arguments, but got 0.
hello-world.ts(2,18): error TS6133: 'name' is declared but never used.
```

Ok, now we have problem with the 7th line of `hello-world.test.ts` – the method expects 1 argument but we pass 0:

```typescript
    expect(HelloWorld.hello()).toEqual('Hello, World!')
           ^
           12
```

Good, let's add a default value for the method parameter, so if we do not pass an argument explicitly the value will be still assigned to the method parameter:

```typescript
class HelloWorld {
    static hello(message:string="") {
        // Your code here
    }
}

export default HelloWorld
```

Next try:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
hello-world.ts(2,18): error TS6133: 'message' is declared but never used.
```

Oh, we have to use the parameter somehow... Let's do the simplest thing possible:

```typescript
class HelloWorld {
    static hello(message:string="") {
        return message;
    }
}

export default HelloWorld
```

And one more try:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 FAIL  ./hello-world.test.ts
  ● Hello World › says hello world with no name

    expect(received).toEqual(expected)

    Expected value to equal:
      "Hello, World!"
    Received:
      ""
```

Now the compilation passed, but the `Hello World › says hello world with no name` test failed:

```typescript
describe('Hello World', () => {

  it('says hello world with no name', () => {
    expect(HelloWorld.hello()).toEqual('Hello, World!')
  })
}
```

Our `hello` method should actually return the `'Hello, World!'` string when received no argument. Let's fix this, again, with the simplest solution:

```typescript
class HelloWorld {
    static hello(message:string="Hello, World!") {
        return message;
    }
}

export default HelloWorld
```

Next try:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 PASS  ./hello-world.test.ts
  Hello World
    ✓ says hello world with no name (13ms)
    ○ skipped 2 tests

Test Suites: 1 passed, 1 total
Tests:       2 skipped, 1 passed, 3 total
Snapshots:   0 total
Time:        3.441s
Ran all test suites.
✨  Done in 8.99s.
```

Finally succeeded:)

But why the other two tests

```typescript
  //...

  xit('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  xit('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
```

... were skipped?

The answer is simple – they were defined with a `xit` "clause" instead of `it`. This was done by intention, so students at the start can focus on solving one problem, and then, step by step improve the solution according to the next tests.

So let's "unskip" the rest tests:

```typescript
  //...

  it('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  it('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
```

and run tests again:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 FAIL  ./hello-world.test.ts
  ● Hello World › says hello to bob

    expect(received).toEqual(expected)

    Expected value to equal:
      "Hello, Bob!"
    Received:
      "Bob"

      ...

  ● Hello World › says hello to sally

    expect(received).toEqual(expected)

    Expected value to equal:
      "Hello, Sally!"
    Received:
      "Sally"

      ...

  Hello World
    ✓ says hello world with no name (4ms)
    ✕ says hello to bob (113ms)
    ✕ says hello to sally (7ms)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        4.381s
Ran all test suites.
```

Oh... So the argument that we pass to the method should be used as a name of the "person" to whom we say hello...
- Easy!

```typescript
class HelloWorld {
    static hello(name:string="World") {
        return `Hello, ${name}!`;
    }
}

export default HelloWorld
```

And finally:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 PASS  ./hello-world.test.ts
  Hello World
    ✓ says hello world with no name (4ms)
    ✓ says hello to bob (1ms)
    ✓ says hello to sally

Test Suites: 1 passed, 1 total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        5.028s
Ran all test suites.
✨  Done in 10.54s.
```


Now when we are done, let's submit our solution to exercism:

```bash
$ exercism submit hello-world.ts
```


## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

*** TypeScript Hello World Scripts

**** TypeScript Hello World Download Script

#+name:typescript-hello-world-download
#+begin_src sh
exercism download --exercise=hello-world --track=typescript
#+end_src

#+RESULTS: typescript-hello-world-download
: /usr/local/dev/programming/Languages/Exercism/typescript/hello-world

#+name:typescript-hello-world-exercism-metadata
#+begin_src js :tangle typescript/hello-world/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"typescript",
      "exercise":"hello-world",
      "id":"239d4122205345729809a15add2752a7",
      "url":"https://exercism.io/my/solutions/239d4122205345729809a15add2752a7",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":true
  }
#+end_src

**** TypeScript Hello World Submit Script

#+name:typescript-hello-world-submit-script
#+begin_src sh
exercism submit typescript/hello-world/hello-world.ts
#+end_src

#+RESULTS: typescript-hello-world-submit-script
: https://exercism.io/my/solutions/239d4122205345729809a15add2752a7

**** TypeScript Hello-World Configuration and Install Script

{{{heading(TypeScript Hello-World Package JSON File)}}}

#+caption:TypeScript Hello-World Package JSON File
#+name:typescript-hello-world-package.json
#+begin_src js :tangle typescript/hello-world/package.json :mkdirp yes
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}
#+end_src

{{{heading(TypeScript Hello-World TSConfig JSON File)}}}

#+caption:TypeScript Hello-World TSConfig JSON File
#+name:typescript-hello-world-tsconfig.json
#+begin_src js :tangle typescript/hello-world/tsconfig.json :mkdirp yes
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}
#+end_src

{{{heading(TypeScript Hello-World TSLint JSON File)}}}

#+caption:TypeScript Hello-World TSLint JSON File
#+name:typescript-hello-world-tslint.json
#+begin_src js :tangle typescript/hello-world/tslint.json :mkdirp yes
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}

#+end_src

#+name:typescript-hello-world-install-script
#+begin_src sh :dir typescript/hello-world :results output :exports both
yarn install
#+end_src

*** TypeScript HelloWorld Solution and Tests
**** TypeScript Hello World Solution

{{{heading(TypeScript Hello-World Solution Code)}}}

#+caption:TypeScript Hello-World Solution Code
#+name:typescript-hello-world-solution
#+begin_src js :tangle typescript/hello-world/hello-world.ts :mkdirp yes
class HelloWorld {
    static hello( subject:string="World" ) {
        return `Hello, ${subject}!`;
    }
}

export default HelloWorld
#+end_src

**** TypeScript Hello World Tests

{{{heading(TypeScript Hello-World Run Tests)}}}

#+caption:TypeScript Hello-World Tests
#+name:typescript-hello-world-tests
#+begin_src js :tangle typescript/hello-world/hello-world.test.ts :mkdirp yes
import HelloWorld from "./hello-world"

describe('Hello World', () => {

  it('says hello world with no name', () => {
    expect(HelloWorld.hello()).toEqual('Hello, World!')
  })

  it('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  it('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
})
#+end_src

{{{subheading(TypeScript Hello-World Test Results)}}}

#+name:typescript-hello-world-tsc
#+begin_src sh :dir typescript/hello-world :results output :exports both
./node_modules/.bin/tsc --noEmit -p . >test_results.txt
./node_modules/.bin/jest --no-cache 2>>test_results.txt
cat test_results.txt
#+end_src

** TypeScript Two Fer
=Two-fe= or =2-fer= is short for "two for one".  One for you and one for me.

Given a name, return a string with the message:

: One for X, one for me.

Where X is the given name.

However, if the name is missing, return the string:

: One for you, one for me.

Here are some examples:

#+begin_example
Name	String to return
Alice	One for Alice, one for me.
Bob	One for Bob, one for me.
One for you, one for me.
Zaphod	One for Zaphod, one for me.
#+end_example

*** TypeScript Two Fer Readme

#+name:typescript-two-fer-readme
#+begin_src markdown :tangle typescript/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    |String to return 
|:-------|:------------------
|Alice   |One for Alice, one for me. 
|Bob     |One for Bob, one for me.
|        |One for you, one for me.
|Zaphod  |One for Zaphod, one for me.

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** TypeScript Two Fer Scripts

**** TypeScript Two Fer Download Script

#+name:typescript-two-fer-download-script
#+begin_src sh
exercism download --exercise=two-fer --track=typescript
#+end_src

#+RESULTS: typescript-two-fer-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/typescript/two-fer

**** TypeScript Two Fer Submit Script

#+name:typescript-two-fer-submit-script
#+begin_src sh
exercism submit typescript/two-fer/two-fer.ts
#+end_src

#+RESULTS: typescript-two-fer-submit-script
: https://exercism.io/my/solutions/167c692f10f04ba78dc2b3e17008da2a

*** TypeScript Two Fer Metadata

{{{heading(TypeScript Two Fer Package JSON)}}}

#+name:typescript-two-fer-package-json
#+begin_src js :tangle typescript/two-fer/package.json :mkdirp yes
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}

#+end_src

{{{heading(TypeScript Two Fer TSConfig JSON)}}}

#+name:typescript-two-fer-tsconfig-json
#+begin_src js :tangle typescript/two-fer/tsconfig.json :mkdirp yes
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}

#+end_src

{{{heading(TypeScript Two Fer TSLint JSON)}}}
#+begin_src js :tangle typescript/two-fer/tslint.json :mkdirp yes
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}

#+end_src

{{{heading(TypeScript Two Fer Installation)}}}

#+name:typescript-two-fer-installation
#+begin_src sh :dir typescript/two-fer :results output :exports both
yarn install
#+end_src

#+name:typescript-two-fer-yarn-lock
#+begin_src js :tangle typescript/two-fer/yarn.lock
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1


"@types/jest@^21.1.5":
  version "21.1.5"
  resolved "https://registry.yarnpkg.com/@types/jest/-/jest-21.1.5.tgz#3db93d069d12602ca115d3604550e15131d8eb7a"

"@types/node@^8.0.47":
  version "8.0.47"
  resolved "https://registry.yarnpkg.com/@types/node/-/node-8.0.47.tgz#968e596f91acd59069054558a00708c445ca30c2"

abab@^1.0.3:
  version "1.0.4"
  resolved "https://registry.yarnpkg.com/abab/-/abab-1.0.4.tgz#5faad9c2c07f60dd76770f71cf025b62a63cfd4e"

abbrev@1:
  version "1.1.1"
  resolved "https://registry.yarnpkg.com/abbrev/-/abbrev-1.1.1.tgz#f8f2c887ad10bf67f634f005b6987fed3179aac8"

acorn-globals@^3.1.0:
  version "3.1.0"
  resolved "https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-3.1.0.tgz#fd8270f71fbb4996b004fa880ee5d46573a731bf"
  dependencies:
    acorn "^4.0.4"

acorn@^4.0.4:
  version "4.0.13"
  resolved "https://registry.yarnpkg.com/acorn/-/acorn-4.0.13.tgz#105495ae5361d697bd195c825192e1ad7f253787"

ajv@^5.1.0:
  version "5.3.0"
  resolved "https://registry.yarnpkg.com/ajv/-/ajv-5.3.0.tgz#4414ff74a50879c208ee5fdc826e32c303549eda"
  dependencies:
    co "^4.6.0"
    fast-deep-equal "^1.0.0"
    fast-json-stable-stringify "^2.0.0"
    json-schema-traverse "^0.3.0"

align-text@^0.1.1, align-text@^0.1.3:
  version "0.1.4"
  resolved "https://registry.yarnpkg.com/align-text/-/align-text-0.1.4.tgz#0cd90a561093f35d0a99256c22b7069433fad117"
  dependencies:
    kind-of "^3.0.2"
    longest "^1.0.1"
    repeat-string "^1.5.2"

amdefine@>=0.0.4:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/amdefine/-/amdefine-1.0.1.tgz#4a5282ac164729e93619bcfd3ad151f817ce91f5"

ansi-escapes@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-3.0.0.tgz#ec3e8b4e9f8064fc02c3ac9b65f1c275bda8ef92"

ansi-regex@^2.0.0:
  version "2.1.1"
  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-2.1.1.tgz#c3b33ab5ee360d86e0e628f0468ae7ef27d654df"

ansi-regex@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-3.0.0.tgz#ed0317c322064f79466c02966bddb605ab37d998"

ansi-styles@^2.2.1:
  version "2.2.1"
  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-2.2.1.tgz#b432dd3358b634cf75e1e4664368240533c1ddbe"

ansi-styles@^3.1.0, ansi-styles@^3.2.0:
  version "3.2.0"
  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.0.tgz#c159b8d5be0f9e5a6f346dab94f16ce022161b88"
  dependencies:
    color-convert "^1.9.0"

anymatch@^1.3.0:
  version "1.3.2"
  resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-1.3.2.tgz#553dcb8f91e3c889845dfdba34c77721b90b9d7a"
  dependencies:
    micromatch "^2.1.5"
    normalize-path "^2.0.0"

append-transform@^0.4.0:
  version "0.4.0"
  resolved "https://registry.yarnpkg.com/append-transform/-/append-transform-0.4.0.tgz#d76ebf8ca94d276e247a36bad44a4b74ab611991"
  dependencies:
    default-require-extensions "^1.0.0"

aproba@^1.0.3:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/aproba/-/aproba-1.2.0.tgz#6802e6264efd18c790a1b0d517f0f2627bf2c94a"

are-we-there-yet@~1.1.2:
  version "1.1.4"
  resolved "https://registry.yarnpkg.com/are-we-there-yet/-/are-we-there-yet-1.1.4.tgz#bb5dca382bb94f05e15194373d16fd3ba1ca110d"
  dependencies:
    delegates "^1.0.0"
    readable-stream "^2.0.6"

argparse@^1.0.7:
  version "1.0.9"
  resolved "https://registry.yarnpkg.com/argparse/-/argparse-1.0.9.tgz#73d83bc263f86e97f8cc4f6bae1b0e90a7d22c86"
  dependencies:
    sprintf-js "~1.0.2"

arr-diff@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/arr-diff/-/arr-diff-2.0.0.tgz#8f3b827f955a8bd669697e4a4256ac3ceae356cf"
  dependencies:
    arr-flatten "^1.0.1"

arr-flatten@^1.0.1:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/arr-flatten/-/arr-flatten-1.1.0.tgz#36048bbff4e7b47e136644316c99669ea5ae91f1"

array-equal@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/array-equal/-/array-equal-1.0.0.tgz#8c2a5ef2472fd9ea742b04c77a75093ba2757c93"

array-unique@^0.2.1:
  version "0.2.1"
  resolved "https://registry.yarnpkg.com/array-unique/-/array-unique-0.2.1.tgz#a1d97ccafcbc2625cc70fadceb36a50c58b01a53"

arrify@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/arrify/-/arrify-1.0.1.tgz#898508da2226f380df904728456849c1501a4b0d"

asn1@~0.2.3:
  version "0.2.3"
  resolved "https://registry.yarnpkg.com/asn1/-/asn1-0.2.3.tgz#dac8787713c9966849fc8180777ebe9c1ddf3b86"

assert-plus@1.0.0, assert-plus@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525"

astral-regex@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/astral-regex/-/astral-regex-1.0.0.tgz#6c8c3fb827dd43ee3918f27b82782ab7658a6fd9"

async@^1.4.0:
  version "1.5.2"
  resolved "https://registry.yarnpkg.com/async/-/async-1.5.2.tgz#ec6a61ae56480c0c3cb241c95618e20892f9672a"

async@^2.1.4:
  version "2.5.0"
  resolved "https://registry.yarnpkg.com/async/-/async-2.5.0.tgz#843190fd6b7357a0b9e1c956edddd5ec8462b54d"
  dependencies:
    lodash "^4.14.0"

asynckit@^0.4.0:
  version "0.4.0"
  resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"

aws-sign2@~0.7.0:
  version "0.7.0"
  resolved "https://registry.yarnpkg.com/aws-sign2/-/aws-sign2-0.7.0.tgz#b46e890934a9591f2d2f6f86d7e6a9f1b3fe76a8"

aws4@^1.6.0:
  version "1.6.0"
  resolved "https://registry.yarnpkg.com/aws4/-/aws4-1.6.0.tgz#83ef5ca860b2b32e4a0deedee8c771b9db57471e"

babel-code-frame@^6.22.0, babel-code-frame@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-code-frame/-/babel-code-frame-6.26.0.tgz#63fd43f7dc1e3bb7ce35947db8fe369a3f58c74b"
  dependencies:
    chalk "^1.1.3"
    esutils "^2.0.2"
    js-tokens "^3.0.2"

babel-core@^6.0.0, babel-core@^6.24.1, babel-core@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-core/-/babel-core-6.26.0.tgz#af32f78b31a6fcef119c87b0fd8d9753f03a0bb8"
  dependencies:
    babel-code-frame "^6.26.0"
    babel-generator "^6.26.0"
    babel-helpers "^6.24.1"
    babel-messages "^6.23.0"
    babel-register "^6.26.0"
    babel-runtime "^6.26.0"
    babel-template "^6.26.0"
    babel-traverse "^6.26.0"
    babel-types "^6.26.0"
    babylon "^6.18.0"
    convert-source-map "^1.5.0"
    debug "^2.6.8"
    json5 "^0.5.1"
    lodash "^4.17.4"
    minimatch "^3.0.4"
    path-is-absolute "^1.0.1"
    private "^0.1.7"
    slash "^1.0.0"
    source-map "^0.5.6"

babel-generator@^6.18.0, babel-generator@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-generator/-/babel-generator-6.26.0.tgz#ac1ae20070b79f6e3ca1d3269613053774f20dc5"
  dependencies:
    babel-messages "^6.23.0"
    babel-runtime "^6.26.0"
    babel-types "^6.26.0"
    detect-indent "^4.0.0"
    jsesc "^1.3.0"
    lodash "^4.17.4"
    source-map "^0.5.6"
    trim-right "^1.0.1"

babel-helpers@^6.24.1:
  version "6.24.1"
  resolved "https://registry.yarnpkg.com/babel-helpers/-/babel-helpers-6.24.1.tgz#3471de9caec388e5c850e597e58a26ddf37602b2"
  dependencies:
    babel-runtime "^6.22.0"
    babel-template "^6.24.1"

babel-jest@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/babel-jest/-/babel-jest-21.2.0.tgz#2ce059519a9374a2c46f2455b6fbef5ad75d863e"
  dependencies:
    babel-plugin-istanbul "^4.0.0"
    babel-preset-jest "^21.2.0"

babel-messages@^6.23.0:
  version "6.23.0"
  resolved "https://registry.yarnpkg.com/babel-messages/-/babel-messages-6.23.0.tgz#f3cdf4703858035b2a2951c6ec5edf6c62f2630e"
  dependencies:
    babel-runtime "^6.22.0"

babel-plugin-istanbul@^4.0.0, babel-plugin-istanbul@^4.1.4:
  version "4.1.5"
  resolved "https://registry.yarnpkg.com/babel-plugin-istanbul/-/babel-plugin-istanbul-4.1.5.tgz#6760cdd977f411d3e175bb064f2bc327d99b2b6e"
  dependencies:
    find-up "^2.1.0"
    istanbul-lib-instrument "^1.7.5"
    test-exclude "^4.1.1"

babel-plugin-jest-hoist@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-21.2.0.tgz#2cef637259bd4b628a6cace039de5fcd14dbb006"

babel-plugin-syntax-object-rest-spread@^6.13.0:
  version "6.13.0"
  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-object-rest-spread/-/babel-plugin-syntax-object-rest-spread-6.13.0.tgz#fd6536f2bce13836ffa3a5458c4903a597bb3bf5"

babel-plugin-transform-es2015-modules-commonjs@^6.24.1:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.26.0.tgz#0d8394029b7dc6abe1a97ef181e00758dd2e5d8a"
  dependencies:
    babel-plugin-transform-strict-mode "^6.24.1"
    babel-runtime "^6.26.0"
    babel-template "^6.26.0"
    babel-types "^6.26.0"

babel-plugin-transform-strict-mode@^6.24.1:
  version "6.24.1"
  resolved "https://registry.yarnpkg.com/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.24.1.tgz#d5faf7aa578a65bbe591cf5edae04a0c67020758"
  dependencies:
    babel-runtime "^6.22.0"
    babel-types "^6.24.1"

babel-preset-jest@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/babel-preset-jest/-/babel-preset-jest-21.2.0.tgz#ff9d2bce08abd98e8a36d9a8a5189b9173b85638"
  dependencies:
    babel-plugin-jest-hoist "^21.2.0"
    babel-plugin-syntax-object-rest-spread "^6.13.0"

babel-register@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-register/-/babel-register-6.26.0.tgz#6ed021173e2fcb486d7acb45c6009a856f647071"
  dependencies:
    babel-core "^6.26.0"
    babel-runtime "^6.26.0"
    core-js "^2.5.0"
    home-or-tmp "^2.0.0"
    lodash "^4.17.4"
    mkdirp "^0.5.1"
    source-map-support "^0.4.15"

babel-runtime@^6.22.0, babel-runtime@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-runtime/-/babel-runtime-6.26.0.tgz#965c7058668e82b55d7bfe04ff2337bc8b5647fe"
  dependencies:
    core-js "^2.4.0"
    regenerator-runtime "^0.11.0"

babel-template@^6.16.0, babel-template@^6.24.1, babel-template@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-template/-/babel-template-6.26.0.tgz#de03e2d16396b069f46dd9fff8521fb1a0e35e02"
  dependencies:
    babel-runtime "^6.26.0"
    babel-traverse "^6.26.0"
    babel-types "^6.26.0"
    babylon "^6.18.0"
    lodash "^4.17.4"

babel-traverse@^6.18.0, babel-traverse@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-traverse/-/babel-traverse-6.26.0.tgz#46a9cbd7edcc62c8e5c064e2d2d8d0f4035766ee"
  dependencies:
    babel-code-frame "^6.26.0"
    babel-messages "^6.23.0"
    babel-runtime "^6.26.0"
    babel-types "^6.26.0"
    babylon "^6.18.0"
    debug "^2.6.8"
    globals "^9.18.0"
    invariant "^2.2.2"
    lodash "^4.17.4"

babel-types@^6.18.0, babel-types@^6.24.1, babel-types@^6.26.0:
  version "6.26.0"
  resolved "https://registry.yarnpkg.com/babel-types/-/babel-types-6.26.0.tgz#a3b073f94ab49eb6fa55cd65227a334380632497"
  dependencies:
    babel-runtime "^6.26.0"
    esutils "^2.0.2"
    lodash "^4.17.4"
    to-fast-properties "^1.0.3"

babylon@^6.18.0:
  version "6.18.0"
  resolved "https://registry.yarnpkg.com/babylon/-/babylon-6.18.0.tgz#af2f3b88fa6f5c1e4c634d1a0f8eac4f55b395e3"

balanced-match@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767"

bcrypt-pbkdf@^1.0.0:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz#63bc5dcb61331b92bc05fd528953c33462a06f8d"
  dependencies:
    tweetnacl "^0.14.3"

boom@4.x.x:
  version "4.3.1"
  resolved "https://registry.yarnpkg.com/boom/-/boom-4.3.1.tgz#4f8a3005cb4a7e3889f749030fd25b96e01d2e31"
  dependencies:
    hoek "4.x.x"

boom@5.x.x:
  version "5.2.0"
  resolved "https://registry.yarnpkg.com/boom/-/boom-5.2.0.tgz#5dd9da6ee3a5f302077436290cb717d3f4a54e02"
  dependencies:
    hoek "4.x.x"

brace-expansion@^1.1.7:
  version "1.1.8"
  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.8.tgz#c07b211c7c952ec1f8efd51a77ef0d1d3990a292"
  dependencies:
    balanced-match "^1.0.0"
    concat-map "0.0.1"

braces@^1.8.2:
  version "1.8.5"
  resolved "https://registry.yarnpkg.com/braces/-/braces-1.8.5.tgz#ba77962e12dff969d6b76711e914b737857bf6a7"
  dependencies:
    expand-range "^1.8.1"
    preserve "^0.2.0"
    repeat-element "^1.1.2"

browser-resolve@^1.11.2:
  version "1.11.2"
  resolved "https://registry.yarnpkg.com/browser-resolve/-/browser-resolve-1.11.2.tgz#8ff09b0a2c421718a1051c260b32e48f442938ce"
  dependencies:
    resolve "1.1.7"

bser@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/bser/-/bser-2.0.0.tgz#9ac78d3ed5d915804fd87acb158bc797147a1719"
  dependencies:
    node-int64 "^0.4.0"

builtin-modules@^1.0.0, builtin-modules@^1.1.1:
  version "1.1.1"
  resolved "https://registry.yarnpkg.com/builtin-modules/-/builtin-modules-1.1.1.tgz#270f076c5a72c02f5b65a47df94c5fe3a278892f"

callsites@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/callsites/-/callsites-2.0.0.tgz#06eb84f00eea413da86affefacbffb36093b3c50"

camelcase@^1.0.2:
  version "1.2.1"
  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-1.2.1.tgz#9bb5304d2e0b56698b2c758b08a3eaa9daa58a39"

camelcase@^4.1.0:
  version "4.1.0"
  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-4.1.0.tgz#d545635be1e33c542649c69173e5de6acfae34dd"

caseless@~0.12.0:
  version "0.12.0"
  resolved "https://registry.yarnpkg.com/caseless/-/caseless-0.12.0.tgz#1b681c21ff84033c826543090689420d187151dc"

center-align@^0.1.1:
  version "0.1.3"
  resolved "https://registry.yarnpkg.com/center-align/-/center-align-0.1.3.tgz#aa0d32629b6ee972200411cbd4461c907bc2b7ad"
  dependencies:
    align-text "^0.1.3"
    lazy-cache "^1.0.3"

chalk@^1.1.3:
  version "1.1.3"
  resolved "https://registry.yarnpkg.com/chalk/-/chalk-1.1.3.tgz#a8115c55e4a702fe4d150abd3872822a7e09fc98"
  dependencies:
    ansi-styles "^2.2.1"
    escape-string-regexp "^1.0.2"
    has-ansi "^2.0.0"
    strip-ansi "^3.0.0"
    supports-color "^2.0.0"

chalk@^2.0.1, chalk@^2.1.0:
  version "2.3.0"
  resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.3.0.tgz#b5ea48efc9c1793dccc9b4767c93914d3f2d52ba"
  dependencies:
    ansi-styles "^3.1.0"
    escape-string-regexp "^1.0.5"
    supports-color "^4.0.0"

chownr@^1.1.1:
  version "1.1.1"
  resolved "https://registry.yarnpkg.com/chownr/-/chownr-1.1.1.tgz#54726b8b8fff4df053c42187e801fb4412df1494"

ci-info@^1.0.0:
  version "1.1.1"
  resolved "https://registry.yarnpkg.com/ci-info/-/ci-info-1.1.1.tgz#47b44df118c48d2597b56d342e7e25791060171a"

cliui@^2.1.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/cliui/-/cliui-2.1.0.tgz#4b475760ff80264c762c3a1719032e91c7fea0d1"
  dependencies:
    center-align "^0.1.1"
    right-align "^0.1.1"
    wordwrap "0.0.2"

cliui@^3.2.0:
  version "3.2.0"
  resolved "https://registry.yarnpkg.com/cliui/-/cliui-3.2.0.tgz#120601537a916d29940f934da3b48d585a39213d"
  dependencies:
    string-width "^1.0.1"
    strip-ansi "^3.0.1"
    wrap-ansi "^2.0.0"

co@^4.6.0:
  version "4.6.0"
  resolved "https://registry.yarnpkg.com/co/-/co-4.6.0.tgz#6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184"

code-point-at@^1.0.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/code-point-at/-/code-point-at-1.1.0.tgz#0d070b4d043a5bea33a2f1a40e2edb3d9a4ccf77"

color-convert@^1.9.0:
  version "1.9.0"
  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.0.tgz#1accf97dd739b983bf994d56fec8f95853641b7a"
  dependencies:
    color-name "^1.1.1"

color-name@^1.1.1:
  version "1.1.3"
  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"

combined-stream@^1.0.5, combined-stream@~1.0.5:
  version "1.0.5"
  resolved "https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.5.tgz#938370a57b4a51dea2c77c15d5c5fdf895164009"
  dependencies:
    delayed-stream "~1.0.0"

commander@^2.9.0:
  version "2.11.0"
  resolved "https://registry.yarnpkg.com/commander/-/commander-2.11.0.tgz#157152fd1e7a6c8d98a5b715cf376df928004563"

concat-map@0.0.1:
  version "0.0.1"
  resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"

console-control-strings@^1.0.0, console-control-strings@~1.1.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/console-control-strings/-/console-control-strings-1.1.0.tgz#3d7cf4464db6446ea644bf4b39507f9851008e8e"

content-type-parser@^1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/content-type-parser/-/content-type-parser-1.0.2.tgz#caabe80623e63638b2502fd4c7f12ff4ce2352e7"

convert-source-map@^1.4.0, convert-source-map@^1.5.0:
  version "1.5.0"
  resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.5.0.tgz#9acd70851c6d5dfdd93d9282e5edf94a03ff46b5"

core-js@^2.4.0, core-js@^2.5.0:
  version "2.5.1"
  resolved "https://registry.yarnpkg.com/core-js/-/core-js-2.5.1.tgz#ae6874dc66937789b80754ff5428df66819ca50b"

core-util-is@1.0.2, core-util-is@~1.0.0:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"

cross-spawn@^5.0.1:
  version "5.1.0"
  resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-5.1.0.tgz#e8bd0efee58fcff6f8f94510a0a554bbfa235449"
  dependencies:
    lru-cache "^4.0.1"
    shebang-command "^1.2.0"
    which "^1.2.9"

cryptiles@3.x.x:
  version "3.1.2"
  resolved "https://registry.yarnpkg.com/cryptiles/-/cryptiles-3.1.2.tgz#a89fbb220f5ce25ec56e8c4aa8a4fd7b5b0d29fe"
  dependencies:
    boom "5.x.x"

cssom@0.3.x, "cssom@>= 0.3.2 < 0.4.0":
  version "0.3.2"
  resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.3.2.tgz#b8036170c79f07a90ff2f16e22284027a243848b"

"cssstyle@>= 0.2.37 < 0.3.0":
  version "0.2.37"
  resolved "https://registry.yarnpkg.com/cssstyle/-/cssstyle-0.2.37.tgz#541097234cb2513c83ceed3acddc27ff27987d54"
  dependencies:
    cssom "0.3.x"

dashdash@^1.12.0:
  version "1.14.1"
  resolved "https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0"
  dependencies:
    assert-plus "^1.0.0"

debug@^2.1.2, debug@^2.6.8:
  version "2.6.9"
  resolved "https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f"
  dependencies:
    ms "2.0.0"

debug@^3.1.0:
  version "3.1.0"
  resolved "https://registry.yarnpkg.com/debug/-/debug-3.1.0.tgz#5bb5a0672628b64149566ba16819e61518c67261"
  dependencies:
    ms "2.0.0"

decamelize@^1.0.0, decamelize@^1.1.1:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290"

deep-extend@^0.6.0:
  version "0.6.0"
  resolved "https://registry.yarnpkg.com/deep-extend/-/deep-extend-0.6.0.tgz#c4fa7c95404a17a9c3e8ca7e1537312b736330ac"

deep-is@~0.1.3:
  version "0.1.3"
  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34"

default-require-extensions@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/default-require-extensions/-/default-require-extensions-1.0.0.tgz#f37ea15d3e13ffd9b437d33e1a75b5fb97874cb8"
  dependencies:
    strip-bom "^2.0.0"

delayed-stream@~1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619"

delegates@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/delegates/-/delegates-1.0.0.tgz#84c6e159b81904fdca59a0ef44cd870d31250f9a"

detect-indent@^4.0.0:
  version "4.0.0"
  resolved "https://registry.yarnpkg.com/detect-indent/-/detect-indent-4.0.0.tgz#f76d064352cdf43a1cb6ce619c4ee3a9475de208"
  dependencies:
    repeating "^2.0.0"

detect-libc@^1.0.2:
  version "1.0.3"
  resolved "https://registry.yarnpkg.com/detect-libc/-/detect-libc-1.0.3.tgz#fa137c4bd698edf55cd5cd02ac559f91a4c4ba9b"

diff@^3.2.0:
  version "3.4.0"
  resolved "https://registry.yarnpkg.com/diff/-/diff-3.4.0.tgz#b1d85507daf3964828de54b37d0d73ba67dda56c"

ecc-jsbn@~0.1.1:
  version "0.1.1"
  resolved "https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz#0fc73a9ed5f0d53c38193398523ef7e543777505"
  dependencies:
    jsbn "~0.1.0"

errno@^0.1.4:
  version "0.1.4"
  resolved "https://registry.yarnpkg.com/errno/-/errno-0.1.4.tgz#b896e23a9e5e8ba33871fc996abd3635fc9a1c7d"
  dependencies:
    prr "~0.0.0"

error-ex@^1.2.0:
  version "1.3.1"
  resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.1.tgz#f855a86ce61adc4e8621c3cda21e7a7612c3a8dc"
  dependencies:
    is-arrayish "^0.2.1"

escape-string-regexp@^1.0.2, escape-string-regexp@^1.0.5:
  version "1.0.5"
  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"

escodegen@^1.6.1:
  version "1.9.0"
  resolved "https://registry.yarnpkg.com/escodegen/-/escodegen-1.9.0.tgz#9811a2f265dc1cd3894420ee3717064b632b8852"
  dependencies:
    esprima "^3.1.3"
    estraverse "^4.2.0"
    esutils "^2.0.2"
    optionator "^0.8.1"
  optionalDependencies:
    source-map "~0.5.6"

esprima@^3.1.3:
  version "3.1.3"
  resolved "https://registry.yarnpkg.com/esprima/-/esprima-3.1.3.tgz#fdca51cee6133895e3c88d535ce49dbff62a4633"

esprima@^4.0.0:
  version "4.0.0"
  resolved "https://registry.yarnpkg.com/esprima/-/esprima-4.0.0.tgz#4499eddcd1110e0b218bacf2fa7f7f59f55ca804"

estraverse@^4.2.0:
  version "4.2.0"
  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.2.0.tgz#0dee3fed31fcd469618ce7342099fc1afa0bdb13"

esutils@^2.0.2:
  version "2.0.2"
  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.2.tgz#0abf4f1caa5bcb1f7a9d8acc6dea4faaa04bac9b"

exec-sh@^0.2.0:
  version "0.2.1"
  resolved "https://registry.yarnpkg.com/exec-sh/-/exec-sh-0.2.1.tgz#163b98a6e89e6b65b47c2a28d215bc1f63989c38"
  dependencies:
    merge "^1.1.3"

execa@^0.7.0:
  version "0.7.0"
  resolved "https://registry.yarnpkg.com/execa/-/execa-0.7.0.tgz#944becd34cc41ee32a63a9faf27ad5a65fc59777"
  dependencies:
    cross-spawn "^5.0.1"
    get-stream "^3.0.0"
    is-stream "^1.1.0"
    npm-run-path "^2.0.0"
    p-finally "^1.0.0"
    signal-exit "^3.0.0"
    strip-eof "^1.0.0"

expand-brackets@^0.1.4:
  version "0.1.5"
  resolved "https://registry.yarnpkg.com/expand-brackets/-/expand-brackets-0.1.5.tgz#df07284e342a807cd733ac5af72411e581d1177b"
  dependencies:
    is-posix-bracket "^0.1.0"

expand-range@^1.8.1:
  version "1.8.2"
  resolved "https://registry.yarnpkg.com/expand-range/-/expand-range-1.8.2.tgz#a299effd335fe2721ebae8e257ec79644fc85337"
  dependencies:
    fill-range "^2.1.0"

expect@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/expect/-/expect-21.2.1.tgz#003ac2ac7005c3c29e73b38a272d4afadd6d1d7b"
  dependencies:
    ansi-styles "^3.2.0"
    jest-diff "^21.2.1"
    jest-get-type "^21.2.0"
    jest-matcher-utils "^21.2.1"
    jest-message-util "^21.2.1"
    jest-regex-util "^21.2.0"

extend@~3.0.1:
  version "3.0.1"
  resolved "https://registry.yarnpkg.com/extend/-/extend-3.0.1.tgz#a755ea7bc1adfcc5a31ce7e762dbaadc5e636444"

extglob@^0.3.1:
  version "0.3.2"
  resolved "https://registry.yarnpkg.com/extglob/-/extglob-0.3.2.tgz#2e18ff3d2f49ab2765cec9023f011daa8d8349a1"
  dependencies:
    is-extglob "^1.0.0"

extsprintf@1.3.0, extsprintf@^1.2.0:
  version "1.3.0"
  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05"

fast-deep-equal@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-1.0.0.tgz#96256a3bc975595eb36d82e9929d060d893439ff"

fast-json-stable-stringify@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz#d5142c0caee6b1189f87d3a76111064f86c8bbf2"

fast-levenshtein@~2.0.4:
  version "2.0.6"
  resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"

fb-watchman@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/fb-watchman/-/fb-watchman-2.0.0.tgz#54e9abf7dfa2f26cd9b1636c588c1afc05de5d58"
  dependencies:
    bser "^2.0.0"

filename-regex@^2.0.0:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/filename-regex/-/filename-regex-2.0.1.tgz#c1c4b9bee3e09725ddb106b75c1e301fe2f18b26"

fileset@^2.0.2:
  version "2.0.3"
  resolved "https://registry.yarnpkg.com/fileset/-/fileset-2.0.3.tgz#8e7548a96d3cc2327ee5e674168723a333bba2a0"
  dependencies:
    glob "^7.0.3"
    minimatch "^3.0.3"

fill-range@^2.1.0:
  version "2.2.3"
  resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-2.2.3.tgz#50b77dfd7e469bc7492470963699fe7a8485a723"
  dependencies:
    is-number "^2.1.0"
    isobject "^2.0.0"
    randomatic "^1.1.3"
    repeat-element "^1.1.2"
    repeat-string "^1.5.2"

find-up@^1.0.0:
  version "1.1.2"
  resolved "https://registry.yarnpkg.com/find-up/-/find-up-1.1.2.tgz#6b2e9822b1a2ce0a60ab64d610eccad53cb24d0f"
  dependencies:
    path-exists "^2.0.0"
    pinkie-promise "^2.0.0"

find-up@^2.0.0, find-up@^2.1.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/find-up/-/find-up-2.1.0.tgz#45d1b7e506c717ddd482775a2b77920a3c0c57a7"
  dependencies:
    locate-path "^2.0.0"

for-in@^1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80"

for-own@^0.1.4:
  version "0.1.5"
  resolved "https://registry.yarnpkg.com/for-own/-/for-own-0.1.5.tgz#5265c681a4f294dabbf17c9509b6763aa84510ce"
  dependencies:
    for-in "^1.0.1"

forever-agent@~0.6.1:
  version "0.6.1"
  resolved "https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91"

form-data@~2.3.1:
  version "2.3.1"
  resolved "https://registry.yarnpkg.com/form-data/-/form-data-2.3.1.tgz#6fb94fbd71885306d73d15cc497fe4cc4ecd44bf"
  dependencies:
    asynckit "^0.4.0"
    combined-stream "^1.0.5"
    mime-types "^2.1.12"

fs-extra@^4.0.0:
  version "4.0.2"
  resolved "https://registry.yarnpkg.com/fs-extra/-/fs-extra-4.0.2.tgz#f91704c53d1b461f893452b0c307d9997647ab6b"
  dependencies:
    graceful-fs "^4.1.2"
    jsonfile "^4.0.0"
    universalify "^0.1.0"

fs-minipass@^1.2.5:
  version "1.2.5"
  resolved "https://registry.yarnpkg.com/fs-minipass/-/fs-minipass-1.2.5.tgz#06c277218454ec288df77ada54a03b8702aacb9d"
  dependencies:
    minipass "^2.2.1"

fs.realpath@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"

fsevents@^1.1.1:
  version "1.2.7"
  resolved "https://registry.yarnpkg.com/fsevents/-/fsevents-1.2.7.tgz#4851b664a3783e52003b3c66eb0eee1074933aa4"
  dependencies:
    nan "^2.9.2"
    node-pre-gyp "^0.10.0"

gauge@~2.7.3:
  version "2.7.4"
  resolved "https://registry.yarnpkg.com/gauge/-/gauge-2.7.4.tgz#2c03405c7538c39d7eb37b317022e325fb018bf7"
  dependencies:
    aproba "^1.0.3"
    console-control-strings "^1.0.0"
    has-unicode "^2.0.0"
    object-assign "^4.1.0"
    signal-exit "^3.0.0"
    string-width "^1.0.1"
    strip-ansi "^3.0.1"
    wide-align "^1.1.0"

get-caller-file@^1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-1.0.2.tgz#f702e63127e7e231c160a80c1554acb70d5047e5"

get-stream@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-3.0.0.tgz#8e943d1358dc37555054ecbe2edb05aa174ede14"

getpass@^0.1.1:
  version "0.1.7"
  resolved "https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa"
  dependencies:
    assert-plus "^1.0.0"

glob-base@^0.3.0:
  version "0.3.0"
  resolved "https://registry.yarnpkg.com/glob-base/-/glob-base-0.3.0.tgz#dbb164f6221b1c0b1ccf82aea328b497df0ea3c4"
  dependencies:
    glob-parent "^2.0.0"
    is-glob "^2.0.0"

glob-parent@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-2.0.0.tgz#81383d72db054fcccf5336daa902f182f6edbb28"
  dependencies:
    is-glob "^2.0.0"

glob@^7.0.3, glob@^7.0.5, glob@^7.1.1, glob@^7.1.2:
  version "7.1.2"
  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.2.tgz#c19c9df9a028702d678612384a6552404c636d15"
  dependencies:
    fs.realpath "^1.0.0"
    inflight "^1.0.4"
    inherits "2"
    minimatch "^3.0.4"
    once "^1.3.0"
    path-is-absolute "^1.0.0"

globals@^9.18.0:
  version "9.18.0"
  resolved "https://registry.yarnpkg.com/globals/-/globals-9.18.0.tgz#aa3896b3e69b487f17e31ed2143d69a8e30c2d8a"

graceful-fs@^4.1.11, graceful-fs@^4.1.2, graceful-fs@^4.1.6:
  version "4.1.11"
  resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.1.11.tgz#0e8bdfe4d1ddb8854d64e04ea7c00e2a026e5658"

growly@^1.3.0:
  version "1.3.0"
  resolved "https://registry.yarnpkg.com/growly/-/growly-1.3.0.tgz#f10748cbe76af964b7c96c93c6bcc28af120c081"

handlebars@^4.0.3:
  version "4.0.11"
  resolved "https://registry.yarnpkg.com/handlebars/-/handlebars-4.0.11.tgz#630a35dfe0294bc281edae6ffc5d329fc7982dcc"
  dependencies:
    async "^1.4.0"
    optimist "^0.6.1"
    source-map "^0.4.4"
  optionalDependencies:
    uglify-js "^2.6"

har-schema@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/har-schema/-/har-schema-2.0.0.tgz#a94c2224ebcac04782a0d9035521f24735b7ec92"

har-validator@~5.0.3:
  version "5.0.3"
  resolved "https://registry.yarnpkg.com/har-validator/-/har-validator-5.0.3.tgz#ba402c266194f15956ef15e0fcf242993f6a7dfd"
  dependencies:
    ajv "^5.1.0"
    har-schema "^2.0.0"

has-ansi@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/has-ansi/-/has-ansi-2.0.0.tgz#34f5049ce1ecdf2b0649af3ef24e45ed35416d91"
  dependencies:
    ansi-regex "^2.0.0"

has-flag@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-1.0.0.tgz#9d9e793165ce017a00f00418c43f942a7b1d11fa"

has-flag@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-2.0.0.tgz#e8207af1cc7b30d446cc70b734b5e8be18f88d51"

has-unicode@^2.0.0:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/has-unicode/-/has-unicode-2.0.1.tgz#e0e6fe6a28cf51138855e086d1691e771de2a8b9"

hawk@~6.0.2:
  version "6.0.2"
  resolved "https://registry.yarnpkg.com/hawk/-/hawk-6.0.2.tgz#af4d914eb065f9b5ce4d9d11c1cb2126eecc3038"
  dependencies:
    boom "4.x.x"
    cryptiles "3.x.x"
    hoek "4.x.x"
    sntp "2.x.x"

hoek@4.x.x:
  version "4.2.0"
  resolved "https://registry.yarnpkg.com/hoek/-/hoek-4.2.0.tgz#72d9d0754f7fe25ca2d01ad8f8f9a9449a89526d"

home-or-tmp@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/home-or-tmp/-/home-or-tmp-2.0.0.tgz#e36c3f2d2cae7d746a857e38d18d5f32a7882db8"
  dependencies:
    os-homedir "^1.0.0"
    os-tmpdir "^1.0.1"

hosted-git-info@^2.1.4:
  version "2.5.0"
  resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-2.5.0.tgz#6d60e34b3abbc8313062c3b798ef8d901a07af3c"

html-encoding-sniffer@^1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-1.0.2.tgz#e70d84b94da53aa375e11fe3a351be6642ca46f8"
  dependencies:
    whatwg-encoding "^1.0.1"

http-signature@~1.2.0:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/http-signature/-/http-signature-1.2.0.tgz#9aecd925114772f3d95b65a60abb8f7c18fbace1"
  dependencies:
    assert-plus "^1.0.0"
    jsprim "^1.2.2"
    sshpk "^1.7.0"

iconv-lite@0.4.13:
  version "0.4.13"
  resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.13.tgz#1f88aba4ab0b1508e8312acc39345f36e992e2f2"

iconv-lite@^0.4.4:
  version "0.4.24"
  resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b"
  dependencies:
    safer-buffer ">= 2.1.2 < 3"

ignore-walk@^3.0.1:
  version "3.0.1"
  resolved "https://registry.yarnpkg.com/ignore-walk/-/ignore-walk-3.0.1.tgz#a83e62e7d272ac0e3b551aaa82831a19b69f82f8"
  dependencies:
    minimatch "^3.0.4"

imurmurhash@^0.1.4:
  version "0.1.4"
  resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"

inflight@^1.0.4:
  version "1.0.6"
  resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
  dependencies:
    once "^1.3.0"
    wrappy "1"

inherits@2, inherits@~2.0.3:
  version "2.0.3"
  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de"

ini@~1.3.0:
  version "1.3.4"
  resolved "https://registry.yarnpkg.com/ini/-/ini-1.3.4.tgz#0537cb79daf59b59a1a517dff706c86ec039162e"

invariant@^2.2.2:
  version "2.2.2"
  resolved "https://registry.yarnpkg.com/invariant/-/invariant-2.2.2.tgz#9e1f56ac0acdb6bf303306f338be3b204ae60360"
  dependencies:
    loose-envify "^1.0.0"

invert-kv@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/invert-kv/-/invert-kv-1.0.0.tgz#104a8e4aaca6d3d8cd157a8ef8bfab2d7a3ffdb6"

is-arrayish@^0.2.1:
  version "0.2.1"
  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"

is-buffer@^1.1.5:
  version "1.1.5"
  resolved "https://registry.yarnpkg.com/is-buffer/-/is-buffer-1.1.5.tgz#1f3b26ef613b214b88cbca23cc6c01d87961eecc"

is-builtin-module@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/is-builtin-module/-/is-builtin-module-1.0.0.tgz#540572d34f7ac3119f8f76c30cbc1b1e037affbe"
  dependencies:
    builtin-modules "^1.0.0"

is-ci@^1.0.10:
  version "1.0.10"
  resolved "https://registry.yarnpkg.com/is-ci/-/is-ci-1.0.10.tgz#f739336b2632365061a9d48270cd56ae3369318e"
  dependencies:
    ci-info "^1.0.0"

is-dotfile@^1.0.0:
  version "1.0.3"
  resolved "https://registry.yarnpkg.com/is-dotfile/-/is-dotfile-1.0.3.tgz#a6a2f32ffd2dfb04f5ca25ecd0f6b83cf798a1e1"

is-equal-shallow@^0.1.3:
  version "0.1.3"
  resolved "https://registry.yarnpkg.com/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz#2238098fc221de0bcfa5d9eac4c45d638aa1c534"
  dependencies:
    is-primitive "^2.0.0"

is-extendable@^0.1.1:
  version "0.1.1"
  resolved "https://registry.yarnpkg.com/is-extendable/-/is-extendable-0.1.1.tgz#62b110e289a471418e3ec36a617d472e301dfc89"

is-extglob@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-1.0.0.tgz#ac468177c4943405a092fc8f29760c6ffc6206c0"

is-finite@^1.0.0:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/is-finite/-/is-finite-1.0.2.tgz#cc6677695602be550ef11e8b4aa6305342b6d0aa"
  dependencies:
    number-is-nan "^1.0.0"

is-fullwidth-code-point@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz#ef9e31386f031a7f0d643af82fde50c457ef00cb"
  dependencies:
    number-is-nan "^1.0.0"

is-fullwidth-code-point@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz#a3b30a5c4f199183167aaab93beefae3ddfb654f"

is-glob@^2.0.0, is-glob@^2.0.1:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-2.0.1.tgz#d096f926a3ded5600f3fdfd91198cb0888c2d863"
  dependencies:
    is-extglob "^1.0.0"

is-number@^2.1.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/is-number/-/is-number-2.1.0.tgz#01fcbbb393463a548f2f466cce16dece49db908f"
  dependencies:
    kind-of "^3.0.2"

is-number@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/is-number/-/is-number-3.0.0.tgz#24fd6201a4782cf50561c810276afc7d12d71195"
  dependencies:
    kind-of "^3.0.2"

is-posix-bracket@^0.1.0:
  version "0.1.1"
  resolved "https://registry.yarnpkg.com/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz#3334dc79774368e92f016e6fbc0a88f5cd6e6bc4"

is-primitive@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/is-primitive/-/is-primitive-2.0.0.tgz#207bab91638499c07b2adf240a41a87210034575"

is-stream@^1.1.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-1.1.0.tgz#12d4a3dd4e68e0b79ceb8dbc84173ae80d91ca44"

is-typedarray@~1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a"

is-utf8@^0.2.0:
  version "0.2.1"
  resolved "https://registry.yarnpkg.com/is-utf8/-/is-utf8-0.2.1.tgz#4b0da1442104d1b336340e80797e865cf39f7d72"

isarray@1.0.0, isarray@~1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"

isexe@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"

isobject@^2.0.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89"
  dependencies:
    isarray "1.0.0"

isstream@~0.1.2:
  version "0.1.2"
  resolved "https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a"

istanbul-api@^1.1.1:
  version "1.2.1"
  resolved "https://registry.yarnpkg.com/istanbul-api/-/istanbul-api-1.2.1.tgz#0c60a0515eb11c7d65c6b50bba2c6e999acd8620"
  dependencies:
    async "^2.1.4"
    fileset "^2.0.2"
    istanbul-lib-coverage "^1.1.1"
    istanbul-lib-hook "^1.1.0"
    istanbul-lib-instrument "^1.9.1"
    istanbul-lib-report "^1.1.2"
    istanbul-lib-source-maps "^1.2.2"
    istanbul-reports "^1.1.3"
    js-yaml "^3.7.0"
    mkdirp "^0.5.1"
    once "^1.4.0"

istanbul-lib-coverage@^1.0.1, istanbul-lib-coverage@^1.1.1:
  version "1.1.1"
  resolved "https://registry.yarnpkg.com/istanbul-lib-coverage/-/istanbul-lib-coverage-1.1.1.tgz#73bfb998885299415c93d38a3e9adf784a77a9da"

istanbul-lib-hook@^1.1.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/istanbul-lib-hook/-/istanbul-lib-hook-1.1.0.tgz#8538d970372cb3716d53e55523dd54b557a8d89b"
  dependencies:
    append-transform "^0.4.0"

istanbul-lib-instrument@^1.4.2, istanbul-lib-instrument@^1.7.5, istanbul-lib-instrument@^1.9.1:
  version "1.9.1"
  resolved "https://registry.yarnpkg.com/istanbul-lib-instrument/-/istanbul-lib-instrument-1.9.1.tgz#250b30b3531e5d3251299fdd64b0b2c9db6b558e"
  dependencies:
    babel-generator "^6.18.0"
    babel-template "^6.16.0"
    babel-traverse "^6.18.0"
    babel-types "^6.18.0"
    babylon "^6.18.0"
    istanbul-lib-coverage "^1.1.1"
    semver "^5.3.0"

istanbul-lib-report@^1.1.2:
  version "1.1.2"
  resolved "https://registry.yarnpkg.com/istanbul-lib-report/-/istanbul-lib-report-1.1.2.tgz#922be27c13b9511b979bd1587359f69798c1d425"
  dependencies:
    istanbul-lib-coverage "^1.1.1"
    mkdirp "^0.5.1"
    path-parse "^1.0.5"
    supports-color "^3.1.2"

istanbul-lib-source-maps@^1.1.0, istanbul-lib-source-maps@^1.2.2:
  version "1.2.2"
  resolved "https://registry.yarnpkg.com/istanbul-lib-source-maps/-/istanbul-lib-source-maps-1.2.2.tgz#750578602435f28a0c04ee6d7d9e0f2960e62c1c"
  dependencies:
    debug "^3.1.0"
    istanbul-lib-coverage "^1.1.1"
    mkdirp "^0.5.1"
    rimraf "^2.6.1"
    source-map "^0.5.3"

istanbul-reports@^1.1.3:
  version "1.1.3"
  resolved "https://registry.yarnpkg.com/istanbul-reports/-/istanbul-reports-1.1.3.tgz#3b9e1e8defb6d18b1d425da8e8b32c5a163f2d10"
  dependencies:
    handlebars "^4.0.3"

jest-changed-files@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-changed-files/-/jest-changed-files-21.2.0.tgz#5dbeecad42f5d88b482334902ce1cba6d9798d29"
  dependencies:
    throat "^4.0.0"

jest-cli@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-cli/-/jest-cli-21.2.1.tgz#9c528b6629d651911138d228bdb033c157ec8c00"
  dependencies:
    ansi-escapes "^3.0.0"
    chalk "^2.0.1"
    glob "^7.1.2"
    graceful-fs "^4.1.11"
    is-ci "^1.0.10"
    istanbul-api "^1.1.1"
    istanbul-lib-coverage "^1.0.1"
    istanbul-lib-instrument "^1.4.2"
    istanbul-lib-source-maps "^1.1.0"
    jest-changed-files "^21.2.0"
    jest-config "^21.2.1"
    jest-environment-jsdom "^21.2.1"
    jest-haste-map "^21.2.0"
    jest-message-util "^21.2.1"
    jest-regex-util "^21.2.0"
    jest-resolve-dependencies "^21.2.0"
    jest-runner "^21.2.1"
    jest-runtime "^21.2.1"
    jest-snapshot "^21.2.1"
    jest-util "^21.2.1"
    micromatch "^2.3.11"
    node-notifier "^5.0.2"
    pify "^3.0.0"
    slash "^1.0.0"
    string-length "^2.0.0"
    strip-ansi "^4.0.0"
    which "^1.2.12"
    worker-farm "^1.3.1"
    yargs "^9.0.0"

jest-config@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-config/-/jest-config-21.2.1.tgz#c7586c79ead0bcc1f38c401e55f964f13bf2a480"
  dependencies:
    chalk "^2.0.1"
    glob "^7.1.1"
    jest-environment-jsdom "^21.2.1"
    jest-environment-node "^21.2.1"
    jest-get-type "^21.2.0"
    jest-jasmine2 "^21.2.1"
    jest-regex-util "^21.2.0"
    jest-resolve "^21.2.0"
    jest-util "^21.2.1"
    jest-validate "^21.2.1"
    pretty-format "^21.2.1"

jest-diff@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-diff/-/jest-diff-21.2.1.tgz#46cccb6cab2d02ce98bc314011764bb95b065b4f"
  dependencies:
    chalk "^2.0.1"
    diff "^3.2.0"
    jest-get-type "^21.2.0"
    pretty-format "^21.2.1"

jest-docblock@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-docblock/-/jest-docblock-21.2.0.tgz#51529c3b30d5fd159da60c27ceedc195faf8d414"

jest-environment-jsdom@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-environment-jsdom/-/jest-environment-jsdom-21.2.1.tgz#38d9980c8259b2a608ec232deee6289a60d9d5b4"
  dependencies:
    jest-mock "^21.2.0"
    jest-util "^21.2.1"
    jsdom "^9.12.0"

jest-environment-node@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-environment-node/-/jest-environment-node-21.2.1.tgz#98c67df5663c7fbe20f6e792ac2272c740d3b8c8"
  dependencies:
    jest-mock "^21.2.0"
    jest-util "^21.2.1"

jest-get-type@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-get-type/-/jest-get-type-21.2.0.tgz#f6376ab9db4b60d81e39f30749c6c466f40d4a23"

jest-haste-map@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-haste-map/-/jest-haste-map-21.2.0.tgz#1363f0a8bb4338f24f001806571eff7a4b2ff3d8"
  dependencies:
    fb-watchman "^2.0.0"
    graceful-fs "^4.1.11"
    jest-docblock "^21.2.0"
    micromatch "^2.3.11"
    sane "^2.0.0"
    worker-farm "^1.3.1"

jest-jasmine2@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-jasmine2/-/jest-jasmine2-21.2.1.tgz#9cc6fc108accfa97efebce10c4308548a4ea7592"
  dependencies:
    chalk "^2.0.1"
    expect "^21.2.1"
    graceful-fs "^4.1.11"
    jest-diff "^21.2.1"
    jest-matcher-utils "^21.2.1"
    jest-message-util "^21.2.1"
    jest-snapshot "^21.2.1"
    p-cancelable "^0.3.0"

jest-matcher-utils@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-21.2.1.tgz#72c826eaba41a093ac2b4565f865eb8475de0f64"
  dependencies:
    chalk "^2.0.1"
    jest-get-type "^21.2.0"
    pretty-format "^21.2.1"

jest-message-util@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-message-util/-/jest-message-util-21.2.1.tgz#bfe5d4692c84c827d1dcf41823795558f0a1acbe"
  dependencies:
    chalk "^2.0.1"
    micromatch "^2.3.11"
    slash "^1.0.0"

jest-mock@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-mock/-/jest-mock-21.2.0.tgz#7eb0770e7317968165f61ea2a7281131534b3c0f"

jest-regex-util@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-regex-util/-/jest-regex-util-21.2.0.tgz#1b1e33e63143babc3e0f2e6c9b5ba1eb34b2d530"

jest-resolve-dependencies@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-resolve-dependencies/-/jest-resolve-dependencies-21.2.0.tgz#9e231e371e1a736a1ad4e4b9a843bc72bfe03d09"
  dependencies:
    jest-regex-util "^21.2.0"

jest-resolve@^21.2.0:
  version "21.2.0"
  resolved "https://registry.yarnpkg.com/jest-resolve/-/jest-resolve-21.2.0.tgz#068913ad2ba6a20218e5fd32471f3874005de3a6"
  dependencies:
    browser-resolve "^1.11.2"
    chalk "^2.0.1"
    is-builtin-module "^1.0.0"

jest-runner@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-runner/-/jest-runner-21.2.1.tgz#194732e3e518bfb3d7cbfc0fd5871246c7e1a467"
  dependencies:
    jest-config "^21.2.1"
    jest-docblock "^21.2.0"
    jest-haste-map "^21.2.0"
    jest-jasmine2 "^21.2.1"
    jest-message-util "^21.2.1"
    jest-runtime "^21.2.1"
    jest-util "^21.2.1"
    pify "^3.0.0"
    throat "^4.0.0"
    worker-farm "^1.3.1"

jest-runtime@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-runtime/-/jest-runtime-21.2.1.tgz#99dce15309c670442eee2ebe1ff53a3cbdbbb73e"
  dependencies:
    babel-core "^6.0.0"
    babel-jest "^21.2.0"
    babel-plugin-istanbul "^4.0.0"
    chalk "^2.0.1"
    convert-source-map "^1.4.0"
    graceful-fs "^4.1.11"
    jest-config "^21.2.1"
    jest-haste-map "^21.2.0"
    jest-regex-util "^21.2.0"
    jest-resolve "^21.2.0"
    jest-util "^21.2.1"
    json-stable-stringify "^1.0.1"
    micromatch "^2.3.11"
    slash "^1.0.0"
    strip-bom "3.0.0"
    write-file-atomic "^2.1.0"
    yargs "^9.0.0"

jest-snapshot@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-snapshot/-/jest-snapshot-21.2.1.tgz#29e49f16202416e47343e757e5eff948c07fd7b0"
  dependencies:
    chalk "^2.0.1"
    jest-diff "^21.2.1"
    jest-matcher-utils "^21.2.1"
    mkdirp "^0.5.1"
    natural-compare "^1.4.0"
    pretty-format "^21.2.1"

jest-util@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-util/-/jest-util-21.2.1.tgz#a274b2f726b0897494d694a6c3d6a61ab819bb78"
  dependencies:
    callsites "^2.0.0"
    chalk "^2.0.1"
    graceful-fs "^4.1.11"
    jest-message-util "^21.2.1"
    jest-mock "^21.2.0"
    jest-validate "^21.2.1"
    mkdirp "^0.5.1"

jest-validate@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest-validate/-/jest-validate-21.2.1.tgz#cc0cbca653cd54937ba4f2a111796774530dd3c7"
  dependencies:
    chalk "^2.0.1"
    jest-get-type "^21.2.0"
    leven "^2.1.0"
    pretty-format "^21.2.1"

jest@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/jest/-/jest-21.2.1.tgz#c964e0b47383768a1438e3ccf3c3d470327604e1"
  dependencies:
    jest-cli "^21.2.1"

js-tokens@^3.0.0, js-tokens@^3.0.2:
  version "3.0.2"
  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-3.0.2.tgz#9866df395102130e38f7f996bceb65443209c25b"

js-yaml@^3.7.0:
  version "3.10.0"
  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.10.0.tgz#2e78441646bd4682e963f22b6e92823c309c62dc"
  dependencies:
    argparse "^1.0.7"
    esprima "^4.0.0"

jsbn@~0.1.0:
  version "0.1.1"
  resolved "https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513"

jsdom@^9.12.0:
  version "9.12.0"
  resolved "https://registry.yarnpkg.com/jsdom/-/jsdom-9.12.0.tgz#e8c546fffcb06c00d4833ca84410fed7f8a097d4"
  dependencies:
    abab "^1.0.3"
    acorn "^4.0.4"
    acorn-globals "^3.1.0"
    array-equal "^1.0.0"
    content-type-parser "^1.0.1"
    cssom ">= 0.3.2 < 0.4.0"
    cssstyle ">= 0.2.37 < 0.3.0"
    escodegen "^1.6.1"
    html-encoding-sniffer "^1.0.1"
    nwmatcher ">= 1.3.9 < 2.0.0"
    parse5 "^1.5.1"
    request "^2.79.0"
    sax "^1.2.1"
    symbol-tree "^3.2.1"
    tough-cookie "^2.3.2"
    webidl-conversions "^4.0.0"
    whatwg-encoding "^1.0.1"
    whatwg-url "^4.3.0"
    xml-name-validator "^2.0.1"

jsesc@^1.3.0:
  version "1.3.0"
  resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-1.3.0.tgz#46c3fec8c1892b12b0833db9bc7622176dbab34b"

json-schema-traverse@^0.3.0:
  version "0.3.1"
  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz#349a6d44c53a51de89b40805c5d5e59b417d3340"

json-schema@0.2.3:
  version "0.2.3"
  resolved "https://registry.yarnpkg.com/json-schema/-/json-schema-0.2.3.tgz#b480c892e59a2f05954ce727bd3f2a4e882f9e13"

json-stable-stringify@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz#9a759d39c5f2ff503fd5300646ed445f88c4f9af"
  dependencies:
    jsonify "~0.0.0"

json-stringify-safe@~5.0.1:
  version "5.0.1"
  resolved "https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb"

json5@^0.5.1:
  version "0.5.1"
  resolved "https://registry.yarnpkg.com/json5/-/json5-0.5.1.tgz#1eade7acc012034ad84e2396767ead9fa5495821"

jsonfile@^4.0.0:
  version "4.0.0"
  resolved "https://registry.yarnpkg.com/jsonfile/-/jsonfile-4.0.0.tgz#8771aae0799b64076b76640fca058f9c10e33ecb"
  optionalDependencies:
    graceful-fs "^4.1.6"

jsonify@~0.0.0:
  version "0.0.0"
  resolved "https://registry.yarnpkg.com/jsonify/-/jsonify-0.0.0.tgz#2c74b6ee41d93ca51b7b5aaee8f503631d252a73"

jsprim@^1.2.2:
  version "1.4.1"
  resolved "https://registry.yarnpkg.com/jsprim/-/jsprim-1.4.1.tgz#313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2"
  dependencies:
    assert-plus "1.0.0"
    extsprintf "1.3.0"
    json-schema "0.2.3"
    verror "1.10.0"

kind-of@^3.0.2:
  version "3.2.2"
  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64"
  dependencies:
    is-buffer "^1.1.5"

kind-of@^4.0.0:
  version "4.0.0"
  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-4.0.0.tgz#20813df3d712928b207378691a45066fae72dd57"
  dependencies:
    is-buffer "^1.1.5"

lazy-cache@^1.0.3:
  version "1.0.4"
  resolved "https://registry.yarnpkg.com/lazy-cache/-/lazy-cache-1.0.4.tgz#a1d78fc3a50474cb80845d3b3b6e1da49a446e8e"

lcid@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/lcid/-/lcid-1.0.0.tgz#308accafa0bc483a3867b4b6f2b9506251d1b835"
  dependencies:
    invert-kv "^1.0.0"

leven@^2.1.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/leven/-/leven-2.1.0.tgz#c2e7a9f772094dee9d34202ae8acce4687875580"

levn@~0.3.0:
  version "0.3.0"
  resolved "https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee"
  dependencies:
    prelude-ls "~1.1.2"
    type-check "~0.3.2"

load-json-file@^1.0.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/load-json-file/-/load-json-file-1.1.0.tgz#956905708d58b4bab4c2261b04f59f31c99374c0"
  dependencies:
    graceful-fs "^4.1.2"
    parse-json "^2.2.0"
    pify "^2.0.0"
    pinkie-promise "^2.0.0"
    strip-bom "^2.0.0"

load-json-file@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/load-json-file/-/load-json-file-2.0.0.tgz#7947e42149af80d696cbf797bcaabcfe1fe29ca8"
  dependencies:
    graceful-fs "^4.1.2"
    parse-json "^2.2.0"
    pify "^2.0.0"
    strip-bom "^3.0.0"

locate-path@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-2.0.0.tgz#2b568b265eec944c6d9c0de9c3dbbbca0354cd8e"
  dependencies:
    p-locate "^2.0.0"
    path-exists "^3.0.0"

lodash@^4.14.0, lodash@^4.17.4:
  version "4.17.4"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.4.tgz#78203a4d1c328ae1d86dca6460e369b57f4055ae"

longest@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/longest/-/longest-1.0.1.tgz#30a0b2da38f73770e8294a0d22e6625ed77d0097"

loose-envify@^1.0.0:
  version "1.3.1"
  resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.3.1.tgz#d1a8ad33fa9ce0e713d65fdd0ac8b748d478c848"
  dependencies:
    js-tokens "^3.0.0"

lru-cache@^4.0.1:
  version "4.1.1"
  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-4.1.1.tgz#622e32e82488b49279114a4f9ecf45e7cd6bba55"
  dependencies:
    pseudomap "^1.0.2"
    yallist "^2.1.2"

makeerror@1.0.x:
  version "1.0.11"
  resolved "https://registry.yarnpkg.com/makeerror/-/makeerror-1.0.11.tgz#e01a5c9109f2af79660e4e8b9587790184f5a96c"
  dependencies:
    tmpl "1.0.x"

mem@^1.1.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/mem/-/mem-1.1.0.tgz#5edd52b485ca1d900fe64895505399a0dfa45f76"
  dependencies:
    mimic-fn "^1.0.0"

merge@^1.1.3:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/merge/-/merge-1.2.0.tgz#7531e39d4949c281a66b8c5a6e0265e8b05894da"

micromatch@^2.1.5, micromatch@^2.3.11:
  version "2.3.11"
  resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-2.3.11.tgz#86677c97d1720b363431d04d0d15293bd38c1565"
  dependencies:
    arr-diff "^2.0.0"
    array-unique "^0.2.1"
    braces "^1.8.2"
    expand-brackets "^0.1.4"
    extglob "^0.3.1"
    filename-regex "^2.0.0"
    is-extglob "^1.0.0"
    is-glob "^2.0.1"
    kind-of "^3.0.2"
    normalize-path "^2.0.1"
    object.omit "^2.0.0"
    parse-glob "^3.0.4"
    regex-cache "^0.4.2"

mime-db@~1.30.0:
  version "1.30.0"
  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.30.0.tgz#74c643da2dd9d6a45399963465b26d5ca7d71f01"

mime-types@^2.1.12, mime-types@~2.1.17:
  version "2.1.17"
  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.17.tgz#09d7a393f03e995a79f8af857b70a9e0ab16557a"
  dependencies:
    mime-db "~1.30.0"

mimic-fn@^1.0.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-1.1.0.tgz#e667783d92e89dbd342818b5230b9d62a672ad18"

minimatch@^3.0.2, minimatch@^3.0.3, minimatch@^3.0.4:
  version "3.0.4"
  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083"
  dependencies:
    brace-expansion "^1.1.7"

minimist@0.0.8, minimist@~0.0.1:
  version "0.0.8"
  resolved "https://registry.yarnpkg.com/minimist/-/minimist-0.0.8.tgz#857fcabfc3397d2625b8228262e86aa7a011b05d"

minimist@^1.1.1, minimist@^1.2.0:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.0.tgz#a35008b20f41383eec1fb914f4cd5df79a264284"

minipass@^2.2.1, minipass@^2.3.4:
  version "2.3.5"
  resolved "https://registry.yarnpkg.com/minipass/-/minipass-2.3.5.tgz#cacebe492022497f656b0f0f51e2682a9ed2d848"
  dependencies:
    safe-buffer "^5.1.2"
    yallist "^3.0.0"

minizlib@^1.1.1:
  version "1.2.1"
  resolved "https://registry.yarnpkg.com/minizlib/-/minizlib-1.2.1.tgz#dd27ea6136243c7c880684e8672bb3a45fd9b614"
  dependencies:
    minipass "^2.2.1"

mkdirp@^0.5.0, mkdirp@^0.5.1:
  version "0.5.1"
  resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.1.tgz#30057438eac6cf7f8c4767f38648d6697d75c903"
  dependencies:
    minimist "0.0.8"

ms@2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/ms/-/ms-2.0.0.tgz#5608aeadfc00be6c2901df5f9861788de0d597c8"

nan@^2.9.2:
  version "2.12.1"
  resolved "https://registry.yarnpkg.com/nan/-/nan-2.12.1.tgz#7b1aa193e9aa86057e3c7bbd0ac448e770925552"

natural-compare@^1.4.0:
  version "1.4.0"
  resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"

needle@^2.2.1:
  version "2.2.4"
  resolved "https://registry.yarnpkg.com/needle/-/needle-2.2.4.tgz#51931bff82533b1928b7d1d69e01f1b00ffd2a4e"
  dependencies:
    debug "^2.1.2"
    iconv-lite "^0.4.4"
    sax "^1.2.4"

node-int64@^0.4.0:
  version "0.4.0"
  resolved "https://registry.yarnpkg.com/node-int64/-/node-int64-0.4.0.tgz#87a9065cdb355d3182d8f94ce11188b825c68a3b"

node-notifier@^5.0.2:
  version "5.1.2"
  resolved "https://registry.yarnpkg.com/node-notifier/-/node-notifier-5.1.2.tgz#2fa9e12605fa10009d44549d6fcd8a63dde0e4ff"
  dependencies:
    growly "^1.3.0"
    semver "^5.3.0"
    shellwords "^0.1.0"
    which "^1.2.12"

node-pre-gyp@^0.10.0:
  version "0.10.3"
  resolved "https://registry.yarnpkg.com/node-pre-gyp/-/node-pre-gyp-0.10.3.tgz#3070040716afdc778747b61b6887bf78880b80fc"
  dependencies:
    detect-libc "^1.0.2"
    mkdirp "^0.5.1"
    needle "^2.2.1"
    nopt "^4.0.1"
    npm-packlist "^1.1.6"
    npmlog "^4.0.2"
    rc "^1.2.7"
    rimraf "^2.6.1"
    semver "^5.3.0"
    tar "^4"

nopt@^4.0.1:
  version "4.0.1"
  resolved "https://registry.yarnpkg.com/nopt/-/nopt-4.0.1.tgz#d0d4685afd5415193c8c7505602d0d17cd64474d"
  dependencies:
    abbrev "1"
    osenv "^0.1.4"

normalize-package-data@^2.3.2:
  version "2.4.0"
  resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.4.0.tgz#12f95a307d58352075a04907b84ac8be98ac012f"
  dependencies:
    hosted-git-info "^2.1.4"
    is-builtin-module "^1.0.0"
    semver "2 || 3 || 4 || 5"
    validate-npm-package-license "^3.0.1"

normalize-path@^2.0.0, normalize-path@^2.0.1:
  version "2.1.1"
  resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-2.1.1.tgz#1ab28b556e198363a8c1a6f7e6fa20137fe6aed9"
  dependencies:
    remove-trailing-separator "^1.0.1"

npm-bundled@^1.0.1:
  version "1.0.5"
  resolved "https://registry.yarnpkg.com/npm-bundled/-/npm-bundled-1.0.5.tgz#3c1732b7ba936b3a10325aef616467c0ccbcc979"

npm-packlist@^1.1.6:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/npm-packlist/-/npm-packlist-1.2.0.tgz#55a60e793e272f00862c7089274439a4cc31fc7f"
  dependencies:
    ignore-walk "^3.0.1"
    npm-bundled "^1.0.1"

npm-run-path@^2.0.0:
  version "2.0.2"
  resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-2.0.2.tgz#35a9232dfa35d7067b4cb2ddf2357b1871536c5f"
  dependencies:
    path-key "^2.0.0"

npmlog@^4.0.2:
  version "4.1.2"
  resolved "https://registry.yarnpkg.com/npmlog/-/npmlog-4.1.2.tgz#08a7f2a8bf734604779a9efa4ad5cc717abb954b"
  dependencies:
    are-we-there-yet "~1.1.2"
    console-control-strings "~1.1.0"
    gauge "~2.7.3"
    set-blocking "~2.0.0"

number-is-nan@^1.0.0:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/number-is-nan/-/number-is-nan-1.0.1.tgz#097b602b53422a522c1afb8790318336941a011d"

"nwmatcher@>= 1.3.9 < 2.0.0":
  version "1.4.3"
  resolved "https://registry.yarnpkg.com/nwmatcher/-/nwmatcher-1.4.3.tgz#64348e3b3d80f035b40ac11563d278f8b72db89c"

oauth-sign@~0.8.2:
  version "0.8.2"
  resolved "https://registry.yarnpkg.com/oauth-sign/-/oauth-sign-0.8.2.tgz#46a6ab7f0aead8deae9ec0565780b7d4efeb9d43"

object-assign@^4.1.0:
  version "4.1.1"
  resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"

object.omit@^2.0.0:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/object.omit/-/object.omit-2.0.1.tgz#1a9c744829f39dbb858c76ca3579ae2a54ebd1fa"
  dependencies:
    for-own "^0.1.4"
    is-extendable "^0.1.1"

once@^1.3.0, once@^1.4.0:
  version "1.4.0"
  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
  dependencies:
    wrappy "1"

optimist@^0.6.1:
  version "0.6.1"
  resolved "https://registry.yarnpkg.com/optimist/-/optimist-0.6.1.tgz#da3ea74686fa21a19a111c326e90eb15a0196686"
  dependencies:
    minimist "~0.0.1"
    wordwrap "~0.0.2"

optionator@^0.8.1:
  version "0.8.2"
  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.8.2.tgz#364c5e409d3f4d6301d6c0b4c05bba50180aeb64"
  dependencies:
    deep-is "~0.1.3"
    fast-levenshtein "~2.0.4"
    levn "~0.3.0"
    prelude-ls "~1.1.2"
    type-check "~0.3.2"
    wordwrap "~1.0.0"

os-homedir@^1.0.0:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/os-homedir/-/os-homedir-1.0.2.tgz#ffbc4988336e0e833de0c168c7ef152121aa7fb3"

os-locale@^2.0.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/os-locale/-/os-locale-2.1.0.tgz#42bc2900a6b5b8bd17376c8e882b65afccf24bf2"
  dependencies:
    execa "^0.7.0"
    lcid "^1.0.0"
    mem "^1.1.0"

os-tmpdir@^1.0.0, os-tmpdir@^1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274"

osenv@^0.1.4:
  version "0.1.4"
  resolved "https://registry.yarnpkg.com/osenv/-/osenv-0.1.4.tgz#42fe6d5953df06c8064be6f176c3d05aaaa34644"
  dependencies:
    os-homedir "^1.0.0"
    os-tmpdir "^1.0.0"

p-cancelable@^0.3.0:
  version "0.3.0"
  resolved "https://registry.yarnpkg.com/p-cancelable/-/p-cancelable-0.3.0.tgz#b9e123800bcebb7ac13a479be195b507b98d30fa"

p-finally@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/p-finally/-/p-finally-1.0.0.tgz#3fbcfb15b899a44123b34b6dcc18b724336a2cae"

p-limit@^1.1.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-1.1.0.tgz#b07ff2d9a5d88bec806035895a2bab66a27988bc"

p-locate@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-2.0.0.tgz#20a0103b222a70c8fd39cc2e580680f3dde5ec43"
  dependencies:
    p-limit "^1.1.0"

parse-glob@^3.0.4:
  version "3.0.4"
  resolved "https://registry.yarnpkg.com/parse-glob/-/parse-glob-3.0.4.tgz#b2c376cfb11f35513badd173ef0bb6e3a388391c"
  dependencies:
    glob-base "^0.3.0"
    is-dotfile "^1.0.0"
    is-extglob "^1.0.0"
    is-glob "^2.0.0"

parse-json@^2.2.0:
  version "2.2.0"
  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-2.2.0.tgz#f480f40434ef80741f8469099f8dea18f55a4dc9"
  dependencies:
    error-ex "^1.2.0"

parse5@^1.5.1:
  version "1.5.1"
  resolved "https://registry.yarnpkg.com/parse5/-/parse5-1.5.1.tgz#9b7f3b0de32be78dc2401b17573ccaf0f6f59d94"

path-exists@^2.0.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-2.1.0.tgz#0feb6c64f0fc518d9a754dd5efb62c7022761f4b"
  dependencies:
    pinkie-promise "^2.0.0"

path-exists@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-3.0.0.tgz#ce0ebeaa5f78cb18925ea7d810d7b59b010fd515"

path-is-absolute@^1.0.0, path-is-absolute@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"

path-key@^2.0.0:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/path-key/-/path-key-2.0.1.tgz#411cadb574c5a140d3a4b1910d40d80cc9f40b40"

path-parse@^1.0.5:
  version "1.0.5"
  resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.5.tgz#3c1adf871ea9cd6c9431b6ea2bd74a0ff055c4c1"

path-type@^1.0.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/path-type/-/path-type-1.1.0.tgz#59c44f7ee491da704da415da5a4070ba4f8fe441"
  dependencies:
    graceful-fs "^4.1.2"
    pify "^2.0.0"
    pinkie-promise "^2.0.0"

path-type@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/path-type/-/path-type-2.0.0.tgz#f012ccb8415b7096fc2daa1054c3d72389594c73"
  dependencies:
    pify "^2.0.0"

performance-now@^2.1.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/performance-now/-/performance-now-2.1.0.tgz#6309f4e0e5fa913ec1c69307ae364b4b377c9e7b"

pify@^2.0.0:
  version "2.3.0"
  resolved "https://registry.yarnpkg.com/pify/-/pify-2.3.0.tgz#ed141a6ac043a849ea588498e7dca8b15330e90c"

pify@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/pify/-/pify-3.0.0.tgz#e5a4acd2c101fdf3d9a4d07f0dbc4db49dd28176"

pinkie-promise@^2.0.0:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/pinkie-promise/-/pinkie-promise-2.0.1.tgz#2135d6dfa7a358c069ac9b178776288228450ffa"
  dependencies:
    pinkie "^2.0.0"

pinkie@^2.0.0:
  version "2.0.4"
  resolved "https://registry.yarnpkg.com/pinkie/-/pinkie-2.0.4.tgz#72556b80cfa0d48a974e80e77248e80ed4f7f870"

pkg-dir@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/pkg-dir/-/pkg-dir-2.0.0.tgz#f6d5d1109e19d63edf428e0bd57e12777615334b"
  dependencies:
    find-up "^2.1.0"

prelude-ls@~1.1.2:
  version "1.1.2"
  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54"

preserve@^0.2.0:
  version "0.2.0"
  resolved "https://registry.yarnpkg.com/preserve/-/preserve-0.2.0.tgz#815ed1f6ebc65926f865b310c0713bcb3315ce4b"

pretty-format@^21.2.1:
  version "21.2.1"
  resolved "https://registry.yarnpkg.com/pretty-format/-/pretty-format-21.2.1.tgz#ae5407f3cf21066cd011aa1ba5fce7b6a2eddb36"
  dependencies:
    ansi-regex "^3.0.0"
    ansi-styles "^3.2.0"

private@^0.1.7:
  version "0.1.8"
  resolved "https://registry.yarnpkg.com/private/-/private-0.1.8.tgz#2381edb3689f7a53d653190060fcf822d2f368ff"

process-nextick-args@~1.0.6:
  version "1.0.7"
  resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-1.0.7.tgz#150e20b756590ad3f91093f25a4f2ad8bff30ba3"

prr@~0.0.0:
  version "0.0.0"
  resolved "https://registry.yarnpkg.com/prr/-/prr-0.0.0.tgz#1a84b85908325501411853d0081ee3fa86e2926a"

pseudomap@^1.0.2:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/pseudomap/-/pseudomap-1.0.2.tgz#f052a28da70e618917ef0a8ac34c1ae5a68286b3"

punycode@^1.4.1:
  version "1.4.1"
  resolved "https://registry.yarnpkg.com/punycode/-/punycode-1.4.1.tgz#c0d5a63b2718800ad8e1eb0fa5269c84dd41845e"

qs@~6.5.1:
  version "6.5.1"
  resolved "https://registry.yarnpkg.com/qs/-/qs-6.5.1.tgz#349cdf6eef89ec45c12d7d5eb3fc0c870343a6d8"

randomatic@^1.1.3:
  version "1.1.7"
  resolved "https://registry.yarnpkg.com/randomatic/-/randomatic-1.1.7.tgz#c7abe9cc8b87c0baa876b19fde83fd464797e38c"
  dependencies:
    is-number "^3.0.0"
    kind-of "^4.0.0"

rc@^1.2.7:
  version "1.2.8"
  resolved "https://registry.yarnpkg.com/rc/-/rc-1.2.8.tgz#cd924bf5200a075b83c188cd6b9e211b7fc0d3ed"
  dependencies:
    deep-extend "^0.6.0"
    ini "~1.3.0"
    minimist "^1.2.0"
    strip-json-comments "~2.0.1"

read-pkg-up@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-1.0.1.tgz#9d63c13276c065918d57f002a57f40a1b643fb02"
  dependencies:
    find-up "^1.0.0"
    read-pkg "^1.0.0"

read-pkg-up@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/read-pkg-up/-/read-pkg-up-2.0.0.tgz#6b72a8048984e0c41e79510fd5e9fa99b3b549be"
  dependencies:
    find-up "^2.0.0"
    read-pkg "^2.0.0"

read-pkg@^1.0.0:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-1.1.0.tgz#f5ffaa5ecd29cb31c0474bca7d756b6bb29e3f28"
  dependencies:
    load-json-file "^1.0.0"
    normalize-package-data "^2.3.2"
    path-type "^1.0.0"

read-pkg@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-2.0.0.tgz#8ef1c0623c6a6db0dc6713c4bfac46332b2368f8"
  dependencies:
    load-json-file "^2.0.0"
    normalize-package-data "^2.3.2"
    path-type "^2.0.0"

readable-stream@^2.0.6:
  version "2.3.3"
  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.3.tgz#368f2512d79f9d46fdfc71349ae7878bbc1eb95c"
  dependencies:
    core-util-is "~1.0.0"
    inherits "~2.0.3"
    isarray "~1.0.0"
    process-nextick-args "~1.0.6"
    safe-buffer "~5.1.1"
    string_decoder "~1.0.3"
    util-deprecate "~1.0.1"

regenerator-runtime@^0.11.0:
  version "0.11.0"
  resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.11.0.tgz#7e54fe5b5ccd5d6624ea6255c3473be090b802e1"

regex-cache@^0.4.2:
  version "0.4.4"
  resolved "https://registry.yarnpkg.com/regex-cache/-/regex-cache-0.4.4.tgz#75bdc58a2a1496cec48a12835bc54c8d562336dd"
  dependencies:
    is-equal-shallow "^0.1.3"

remove-trailing-separator@^1.0.1:
  version "1.1.0"
  resolved "https://registry.yarnpkg.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz#c24bce2a283adad5bc3f58e0d48249b92379d8ef"

repeat-element@^1.1.2:
  version "1.1.2"
  resolved "https://registry.yarnpkg.com/repeat-element/-/repeat-element-1.1.2.tgz#ef089a178d1483baae4d93eb98b4f9e4e11d990a"

repeat-string@^1.5.2:
  version "1.6.1"
  resolved "https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637"

repeating@^2.0.0:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/repeating/-/repeating-2.0.1.tgz#5214c53a926d3552707527fbab415dbc08d06dda"
  dependencies:
    is-finite "^1.0.0"

request@^2.79.0:
  version "2.83.0"
  resolved "https://registry.yarnpkg.com/request/-/request-2.83.0.tgz#ca0b65da02ed62935887808e6f510381034e3356"
  dependencies:
    aws-sign2 "~0.7.0"
    aws4 "^1.6.0"
    caseless "~0.12.0"
    combined-stream "~1.0.5"
    extend "~3.0.1"
    forever-agent "~0.6.1"
    form-data "~2.3.1"
    har-validator "~5.0.3"
    hawk "~6.0.2"
    http-signature "~1.2.0"
    is-typedarray "~1.0.0"
    isstream "~0.1.2"
    json-stringify-safe "~5.0.1"
    mime-types "~2.1.17"
    oauth-sign "~0.8.2"
    performance-now "^2.1.0"
    qs "~6.5.1"
    safe-buffer "^5.1.1"
    stringstream "~0.0.5"
    tough-cookie "~2.3.3"
    tunnel-agent "^0.6.0"
    uuid "^3.1.0"

require-directory@^2.1.1:
  version "2.1.1"
  resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"

require-main-filename@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-1.0.1.tgz#97f717b69d48784f5f526a6c5aa8ffdda055a4d1"

resolve@1.1.7:
  version "1.1.7"
  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.1.7.tgz#203114d82ad2c5ed9e8e0411b3932875e889e97b"

resolve@^1.3.2:
  version "1.5.0"
  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.5.0.tgz#1f09acce796c9a762579f31b2c1cc4c3cddf9f36"
  dependencies:
    path-parse "^1.0.5"

right-align@^0.1.1:
  version "0.1.3"
  resolved "https://registry.yarnpkg.com/right-align/-/right-align-0.1.3.tgz#61339b722fe6a3515689210d24e14c96148613ef"
  dependencies:
    align-text "^0.1.1"

rimraf@^2.6.1:
  version "2.6.2"
  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-2.6.2.tgz#2ed8150d24a16ea8651e6d6ef0f47c4158ce7a36"
  dependencies:
    glob "^7.0.5"

safe-buffer@^5.0.1, safe-buffer@^5.1.1, safe-buffer@~5.1.0, safe-buffer@~5.1.1:
  version "5.1.1"
  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.1.tgz#893312af69b2123def71f57889001671eeb2c853"

safe-buffer@^5.1.2:
  version "5.1.2"
  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d"

"safer-buffer@>= 2.1.2 < 3":
  version "2.1.2"
  resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"

sane@^2.0.0:
  version "2.2.0"
  resolved "https://registry.yarnpkg.com/sane/-/sane-2.2.0.tgz#d6d2e2fcab00e3d283c93b912b7c3a20846f1d56"
  dependencies:
    anymatch "^1.3.0"
    exec-sh "^0.2.0"
    fb-watchman "^2.0.0"
    minimatch "^3.0.2"
    minimist "^1.1.1"
    walker "~1.0.5"
    watch "~0.18.0"
  optionalDependencies:
    fsevents "^1.1.1"

sax@^1.2.1, sax@^1.2.4:
  version "1.2.4"
  resolved "https://registry.yarnpkg.com/sax/-/sax-1.2.4.tgz#2816234e2378bddc4e5354fab5caa895df7100d9"

"semver@2 || 3 || 4 || 5", semver@^5.3.0:
  version "5.4.1"
  resolved "https://registry.yarnpkg.com/semver/-/semver-5.4.1.tgz#e059c09d8571f0540823733433505d3a2f00b18e"

set-blocking@^2.0.0, set-blocking@~2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7"

shebang-command@^1.2.0:
  version "1.2.0"
  resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-1.2.0.tgz#44aac65b695b03398968c39f363fee5deafdf1ea"
  dependencies:
    shebang-regex "^1.0.0"

shebang-regex@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-1.0.0.tgz#da42f49740c0b42db2ca9728571cb190c98efea3"

shellwords@^0.1.0:
  version "0.1.1"
  resolved "https://registry.yarnpkg.com/shellwords/-/shellwords-0.1.1.tgz#d6b9181c1a48d397324c84871efbcfc73fc0654b"

signal-exit@^3.0.0, signal-exit@^3.0.2:
  version "3.0.2"
  resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.2.tgz#b5fdc08f1287ea1178628e415e25132b73646c6d"

slash@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/slash/-/slash-1.0.0.tgz#c41f2f6c39fc16d1cd17ad4b5d896114ae470d55"

sntp@2.x.x:
  version "2.0.2"
  resolved "https://registry.yarnpkg.com/sntp/-/sntp-2.0.2.tgz#5064110f0af85f7cfdb7d6b67a40028ce52b4b2b"
  dependencies:
    hoek "4.x.x"

source-map-support@^0.4.15:
  version "0.4.18"
  resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.4.18.tgz#0286a6de8be42641338594e97ccea75f0a2c585f"
  dependencies:
    source-map "^0.5.6"

source-map-support@^0.5.0:
  version "0.5.0"
  resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.0.tgz#2018a7ad2bdf8faf2691e5fddab26bed5a2bacab"
  dependencies:
    source-map "^0.6.0"

source-map@^0.4.4:
  version "0.4.4"
  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.4.4.tgz#eba4f5da9c0dc999de68032d8b4f76173652036b"
  dependencies:
    amdefine ">=0.0.4"

source-map@^0.5.3, source-map@^0.5.6, source-map@~0.5.1, source-map@~0.5.6:
  version "0.5.7"
  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc"

source-map@^0.6.0:
  version "0.6.1"
  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263"

spdx-correct@~1.0.0:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-1.0.2.tgz#4b3073d933ff51f3912f03ac5519498a4150db40"
  dependencies:
    spdx-license-ids "^1.0.2"

spdx-expression-parse@~1.0.0:
  version "1.0.4"
  resolved "https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-1.0.4.tgz#9bdf2f20e1f40ed447fbe273266191fced51626c"

spdx-license-ids@^1.0.2:
  version "1.2.2"
  resolved "https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-1.2.2.tgz#c9df7a3424594ade6bd11900d596696dc06bac57"

sprintf-js@~1.0.2:
  version "1.0.3"
  resolved "https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c"

sshpk@^1.7.0:
  version "1.13.1"
  resolved "https://registry.yarnpkg.com/sshpk/-/sshpk-1.13.1.tgz#512df6da6287144316dc4c18fe1cf1d940739be3"
  dependencies:
    asn1 "~0.2.3"
    assert-plus "^1.0.0"
    dashdash "^1.12.0"
    getpass "^0.1.1"
  optionalDependencies:
    bcrypt-pbkdf "^1.0.0"
    ecc-jsbn "~0.1.1"
    jsbn "~0.1.0"
    tweetnacl "~0.14.0"

string-length@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/string-length/-/string-length-2.0.0.tgz#d40dbb686a3ace960c1cffca562bf2c45f8363ed"
  dependencies:
    astral-regex "^1.0.0"
    strip-ansi "^4.0.0"

string-width@^1.0.1, string-width@^1.0.2:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/string-width/-/string-width-1.0.2.tgz#118bdf5b8cdc51a2a7e70d211e07e2b0b9b107d3"
  dependencies:
    code-point-at "^1.0.0"
    is-fullwidth-code-point "^1.0.0"
    strip-ansi "^3.0.0"

string-width@^2.0.0:
  version "2.1.1"
  resolved "https://registry.yarnpkg.com/string-width/-/string-width-2.1.1.tgz#ab93f27a8dc13d28cac815c462143a6d9012ae9e"
  dependencies:
    is-fullwidth-code-point "^2.0.0"
    strip-ansi "^4.0.0"

string_decoder@~1.0.3:
  version "1.0.3"
  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.0.3.tgz#0fc67d7c141825de94282dd536bec6b9bce860ab"
  dependencies:
    safe-buffer "~5.1.0"

stringstream@~0.0.5:
  version "0.0.5"
  resolved "https://registry.yarnpkg.com/stringstream/-/stringstream-0.0.5.tgz#4e484cd4de5a0bbbee18e46307710a8a81621878"

strip-ansi@^3.0.0, strip-ansi@^3.0.1:
  version "3.0.1"
  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-3.0.1.tgz#6a385fb8853d952d5ff05d0e8aaf94278dc63dcf"
  dependencies:
    ansi-regex "^2.0.0"

strip-ansi@^4.0.0:
  version "4.0.0"
  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-4.0.0.tgz#a8479022eb1ac368a871389b635262c505ee368f"
  dependencies:
    ansi-regex "^3.0.0"

strip-bom@3.0.0, strip-bom@^3.0.0:
  version "3.0.0"
  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3"

strip-bom@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-2.0.0.tgz#6219a85616520491f35788bdbf1447a99c7e6b0e"
  dependencies:
    is-utf8 "^0.2.0"

strip-eof@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/strip-eof/-/strip-eof-1.0.0.tgz#bb43ff5598a6eb05d89b59fcd129c983313606bf"

strip-json-comments@~2.0.1:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-2.0.1.tgz#3c531942e908c2697c0ec344858c286c7ca0a60a"

supports-color@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-2.0.0.tgz#535d045ce6b6363fa40117084629995e9df324c7"

supports-color@^3.1.2:
  version "3.2.3"
  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-3.2.3.tgz#65ac0504b3954171d8a64946b2ae3cbb8a5f54f6"
  dependencies:
    has-flag "^1.0.0"

supports-color@^4.0.0:
  version "4.5.0"
  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-4.5.0.tgz#be7a0de484dec5c5cddf8b3d59125044912f635b"
  dependencies:
    has-flag "^2.0.0"

symbol-tree@^3.2.1:
  version "3.2.2"
  resolved "https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.2.tgz#ae27db38f660a7ae2e1c3b7d1bc290819b8519e6"

tar@^4:
  version "4.4.8"
  resolved "https://registry.yarnpkg.com/tar/-/tar-4.4.8.tgz#b19eec3fde2a96e64666df9fdb40c5ca1bc3747d"
  dependencies:
    chownr "^1.1.1"
    fs-minipass "^1.2.5"
    minipass "^2.3.4"
    minizlib "^1.1.1"
    mkdirp "^0.5.0"
    safe-buffer "^5.1.2"
    yallist "^3.0.2"

test-exclude@^4.1.1:
  version "4.1.1"
  resolved "https://registry.yarnpkg.com/test-exclude/-/test-exclude-4.1.1.tgz#4d84964b0966b0087ecc334a2ce002d3d9341e26"
  dependencies:
    arrify "^1.0.1"
    micromatch "^2.3.11"
    object-assign "^4.1.0"
    read-pkg-up "^1.0.1"
    require-main-filename "^1.0.1"

throat@^4.0.0:
  version "4.1.0"
  resolved "https://registry.yarnpkg.com/throat/-/throat-4.1.0.tgz#89037cbc92c56ab18926e6ba4cbb200e15672a6a"

tmpl@1.0.x:
  version "1.0.4"
  resolved "https://registry.yarnpkg.com/tmpl/-/tmpl-1.0.4.tgz#23640dd7b42d00433911140820e5cf440e521dd1"

to-fast-properties@^1.0.3:
  version "1.0.3"
  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-1.0.3.tgz#b83571fa4d8c25b82e231b06e3a3055de4ca1a47"

tough-cookie@^2.3.2, tough-cookie@~2.3.3:
  version "2.3.3"
  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.3.3.tgz#0b618a5565b6dea90bf3425d04d55edc475a7561"
  dependencies:
    punycode "^1.4.1"

tr46@~0.0.3:
  version "0.0.3"
  resolved "https://registry.yarnpkg.com/tr46/-/tr46-0.0.3.tgz#8184fd347dac9cdc185992f3a6622e14b9d9ab6a"

trim-right@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/trim-right/-/trim-right-1.0.1.tgz#cb2e1203067e0c8de1f614094b9fe45704ea6003"

ts-jest@^21.1.3:
  version "21.1.3"
  resolved "https://registry.yarnpkg.com/ts-jest/-/ts-jest-21.1.3.tgz#cc3c552e7e8a67db9ededc28c00ae98223614ddc"
  dependencies:
    babel-core "^6.24.1"
    babel-plugin-istanbul "^4.1.4"
    babel-plugin-transform-es2015-modules-commonjs "^6.24.1"
    babel-preset-jest "^21.2.0"
    fs-extra "^4.0.0"
    jest-config "^21.2.1"
    jest-util "^21.2.1"
    pkg-dir "^2.0.0"
    source-map-support "^0.5.0"
    yargs "^9.0.1"

tslib@^1.7.1:
  version "1.8.0"
  resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.8.0.tgz#dc604ebad64bcbf696d613da6c954aa0e7ea1eb6"

tslint@^5.8.0:
  version "5.8.0"
  resolved "https://registry.yarnpkg.com/tslint/-/tslint-5.8.0.tgz#1f49ad5b2e77c76c3af4ddcae552ae4e3612eb13"
  dependencies:
    babel-code-frame "^6.22.0"
    builtin-modules "^1.1.1"
    chalk "^2.1.0"
    commander "^2.9.0"
    diff "^3.2.0"
    glob "^7.1.1"
    minimatch "^3.0.4"
    resolve "^1.3.2"
    semver "^5.3.0"
    tslib "^1.7.1"
    tsutils "^2.12.1"

tsutils@^2.12.1:
  version "2.12.1"
  resolved "https://registry.yarnpkg.com/tsutils/-/tsutils-2.12.1.tgz#f4d95ce3391c8971e46e54c4cf0edb0a21dd5b24"
  dependencies:
    tslib "^1.7.1"

tunnel-agent@^0.6.0:
  version "0.6.0"
  resolved "https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd"
  dependencies:
    safe-buffer "^5.0.1"

tweetnacl@^0.14.3, tweetnacl@~0.14.0:
  version "0.14.5"
  resolved "https://registry.yarnpkg.com/tweetnacl/-/tweetnacl-0.14.5.tgz#5ae68177f192d4456269d108afa93ff8743f4f64"

type-check@~0.3.2:
  version "0.3.2"
  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72"
  dependencies:
    prelude-ls "~1.1.2"

typescript@^2.5.3:
  version "2.5.3"
  resolved "https://registry.yarnpkg.com/typescript/-/typescript-2.5.3.tgz#df3dcdc38f3beb800d4bc322646b04a3f6ca7f0d"

uglify-js@^2.6:
  version "2.8.29"
  resolved "https://registry.yarnpkg.com/uglify-js/-/uglify-js-2.8.29.tgz#29c5733148057bb4e1f75df35b7a9cb72e6a59dd"
  dependencies:
    source-map "~0.5.1"
    yargs "~3.10.0"
  optionalDependencies:
    uglify-to-browserify "~1.0.0"

uglify-to-browserify@~1.0.0:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/uglify-to-browserify/-/uglify-to-browserify-1.0.2.tgz#6e0924d6bda6b5afe349e39a6d632850a0f882b7"

universalify@^0.1.0:
  version "0.1.1"
  resolved "https://registry.yarnpkg.com/universalify/-/universalify-0.1.1.tgz#fa71badd4437af4c148841e3b3b165f9e9e590b7"

util-deprecate@~1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"

uuid@^3.1.0:
  version "3.1.0"
  resolved "https://registry.yarnpkg.com/uuid/-/uuid-3.1.0.tgz#3dd3d3e790abc24d7b0d3a034ffababe28ebbc04"

validate-npm-package-license@^3.0.1:
  version "3.0.1"
  resolved "https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.1.tgz#2804babe712ad3379459acfbe24746ab2c303fbc"
  dependencies:
    spdx-correct "~1.0.0"
    spdx-expression-parse "~1.0.0"

verror@1.10.0:
  version "1.10.0"
  resolved "https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400"
  dependencies:
    assert-plus "^1.0.0"
    core-util-is "1.0.2"
    extsprintf "^1.2.0"

walker@~1.0.5:
  version "1.0.7"
  resolved "https://registry.yarnpkg.com/walker/-/walker-1.0.7.tgz#2f7f9b8fd10d677262b18a884e28d19618e028fb"
  dependencies:
    makeerror "1.0.x"

watch@~0.18.0:
  version "0.18.0"
  resolved "https://registry.yarnpkg.com/watch/-/watch-0.18.0.tgz#28095476c6df7c90c963138990c0a5423eb4b986"
  dependencies:
    exec-sh "^0.2.0"
    minimist "^1.2.0"

webidl-conversions@^3.0.0:
  version "3.0.1"
  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-3.0.1.tgz#24534275e2a7bc6be7bc86611cc16ae0a5654871"

webidl-conversions@^4.0.0:
  version "4.0.2"
  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-4.0.2.tgz#a855980b1f0b6b359ba1d5d9fb39ae941faa63ad"

whatwg-encoding@^1.0.1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.2.tgz#bd68ad169c3cf55080562257714bf012e668a165"
  dependencies:
    iconv-lite "0.4.13"

whatwg-url@^4.3.0:
  version "4.8.0"
  resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-4.8.0.tgz#d2981aa9148c1e00a41c5a6131166ab4683bbcc0"
  dependencies:
    tr46 "~0.0.3"
    webidl-conversions "^3.0.0"

which-module@^2.0.0:
  version "2.0.0"
  resolved "https://registry.yarnpkg.com/which-module/-/which-module-2.0.0.tgz#d9ef07dce77b9902b8a3a8fa4b31c3e3f7e6e87a"

which@^1.2.12, which@^1.2.9:
  version "1.3.0"
  resolved "https://registry.yarnpkg.com/which/-/which-1.3.0.tgz#ff04bdfc010ee547d780bec38e1ac1c2777d253a"
  dependencies:
    isexe "^2.0.0"

wide-align@^1.1.0:
  version "1.1.2"
  resolved "https://registry.yarnpkg.com/wide-align/-/wide-align-1.1.2.tgz#571e0f1b0604636ebc0dfc21b0339bbe31341710"
  dependencies:
    string-width "^1.0.2"

window-size@0.1.0:
  version "0.1.0"
  resolved "https://registry.yarnpkg.com/window-size/-/window-size-0.1.0.tgz#5438cd2ea93b202efa3a19fe8887aee7c94f9c9d"

wordwrap@0.0.2:
  version "0.0.2"
  resolved "https://registry.yarnpkg.com/wordwrap/-/wordwrap-0.0.2.tgz#b79669bb42ecb409f83d583cad52ca17eaa1643f"

wordwrap@~0.0.2:
  version "0.0.3"
  resolved "https://registry.yarnpkg.com/wordwrap/-/wordwrap-0.0.3.tgz#a3d5da6cd5c0bc0008d37234bbaf1bed63059107"

wordwrap@~1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/wordwrap/-/wordwrap-1.0.0.tgz#27584810891456a4171c8d0226441ade90cbcaeb"

worker-farm@^1.3.1:
  version "1.5.0"
  resolved "https://registry.yarnpkg.com/worker-farm/-/worker-farm-1.5.0.tgz#adfdf0cd40581465ed0a1f648f9735722afd5c8d"
  dependencies:
    errno "^0.1.4"
    xtend "^4.0.1"

wrap-ansi@^2.0.0:
  version "2.1.0"
  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-2.1.0.tgz#d8fc3d284dd05794fe84973caecdd1cf824fdd85"
  dependencies:
    string-width "^1.0.1"
    strip-ansi "^3.0.1"

wrappy@1:
  version "1.0.2"
  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"

write-file-atomic@^2.1.0:
  version "2.3.0"
  resolved "https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-2.3.0.tgz#1ff61575c2e2a4e8e510d6fa4e243cce183999ab"
  dependencies:
    graceful-fs "^4.1.11"
    imurmurhash "^0.1.4"
    signal-exit "^3.0.2"

xml-name-validator@^2.0.1:
  version "2.0.1"
  resolved "https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-2.0.1.tgz#4d8b8f1eccd3419aa362061becef515e1e559635"

xtend@^4.0.1:
  version "4.0.1"
  resolved "https://registry.yarnpkg.com/xtend/-/xtend-4.0.1.tgz#a5c6d532be656e23db820efb943a1f04998d63af"

y18n@^3.2.1:
  version "3.2.1"
  resolved "https://registry.yarnpkg.com/y18n/-/y18n-3.2.1.tgz#6d15fba884c08679c0d77e88e7759e811e07fa41"

yallist@^2.1.2:
  version "2.1.2"
  resolved "https://registry.yarnpkg.com/yallist/-/yallist-2.1.2.tgz#1c11f9218f076089a47dd512f93c6699a6a81d52"

yallist@^3.0.0, yallist@^3.0.2:
  version "3.0.3"
  resolved "https://registry.yarnpkg.com/yallist/-/yallist-3.0.3.tgz#b4b049e314be545e3ce802236d6cd22cd91c3de9"

yargs-parser@^7.0.0:
  version "7.0.0"
  resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-7.0.0.tgz#8d0ac42f16ea55debd332caf4c4038b3e3f5dfd9"
  dependencies:
    camelcase "^4.1.0"

yargs@^9.0.0, yargs@^9.0.1:
  version "9.0.1"
  resolved "https://registry.yarnpkg.com/yargs/-/yargs-9.0.1.tgz#52acc23feecac34042078ee78c0c007f5085db4c"
  dependencies:
    camelcase "^4.1.0"
    cliui "^3.2.0"
    decamelize "^1.1.1"
    get-caller-file "^1.0.1"
    os-locale "^2.0.0"
    read-pkg-up "^2.0.0"
    require-directory "^2.1.1"
    require-main-filename "^1.0.1"
    set-blocking "^2.0.0"
    string-width "^2.0.0"
    which-module "^2.0.0"
    y18n "^3.2.1"
    yargs-parser "^7.0.0"

yargs@~3.10.0:
  version "3.10.0"
  resolved "https://registry.yarnpkg.com/yargs/-/yargs-3.10.0.tgz#f7ee7bd857dd7c1d2d38c0e74efbd681d1431fd1"
  dependencies:
    camelcase "^1.0.2"
    cliui "^2.1.0"
    decamelize "^1.0.0"
    window-size "0.1.0"

#+end_src

#+name:typescript-two-fer-exercism-metadata
#+begin_src js :tangle typescript/two-fer/.exercism/metadata.json :mkdirp yes
{
    "track":"typescript",
    "exercise":"two-fer",
    "id":"167c692f10f04ba78dc2b3e17008da2a",
    "url":"https://exercism.io/my/solutions/167c692f10f04ba78dc2b3e17008da2a",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript Two Fer Code Solution and Test

**** TypeScript Two Fer Code Solution

#+name:typescript-two-fer-code-solution
#+begin_src js :tangle typescript/two-fer/two-fer.ts
class TwoFer {
  static twoFer( name:string="you" ) {
    return(`One for ${name}, one for me.`);
  }
}

export default TwoFer

#+end_src

{{{heading(TypeScript Two Fer Test Results)}}}

#+name:typescript-two-fer-test-results
#+begin_src sh :dir typescript/two-fer :results output :exports results
yarn test
#+end_src

#+RESULTS: typescript-two-fer-test-results
: yarn run v1.16.0
: $ tsc --noEmit -p . && jest --no-cache
: Done in 2.27s.

**** TypeScript Two Fer Test

#+name:typescript-two-fer-tests
#+begin_src js :tangle typescript/two-fer/two-fer.test.ts :mkdirp yes
import TwoFer from './two-fer'

describe('TwoFer', () => {
  it('no name given', () => {
    const expected = 'One for you, one for me.'
    expect(TwoFer.twoFer()).toEqual(expected)
  })

  it('a name given', () => {
    const expected = 'One for Alice, one for me.'
    expect(TwoFer.twoFer('Alice')).toEqual(expected)
  })

  it('another name given', () => {
    const expected = 'One for Bob, one for me.'
    expect(TwoFer.twoFer('Bob')).toEqual(expected)
  })
})

#+end_src
** TypeScript Leap
:PROPERTIES:
:source:   JavaRanch Cattle Drive, exercise 3 http://www.javaranch.com/leap.jsp
:END:
Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

- on every year that is evenly divisible by 4
- except every year that is evenly divisible by 100
- unless the year is also evenly divisible by 400


For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but
2000 is.

*** TypeScript Leap Readme
#+name:typescript-leap-readme
#+begin_src sh :tangle typescript/leap/README.md :mkdirp yes
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src
*** TypeScript Leap Scripts
**** TypeScriipt Leap Download Script
#+name:typescript-leap-download-script
#+begin_src sh :results output
exercism download --exercise=leap --track=typescript
#+end_src

#+RESULTS: typescript-leap-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/typescript/leap

**** TypeScript Leap Submit Script
#+name:typescript-leap-submit-script
#+begin_src sh :results output
exercism submit typescript/leap/leap.ts
#+end_src

#+RESULTS: typescript-leap-submit-script
:     https://exercism.io/my/solutions/1fe455d365f946e69ed99df4984febf8
: 

*** TypeScript Leap Metadata
#+name:typescript-leap-metadata-package.json
#+begin_src js :tangle typescript/leap/package.json :mkdirp yes
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}

#+end_src

#+name:typescript-leap-install
#+begin_src sh :dir typescript/leap :results output :exports results
yarn install
#+end_src

#+name:typescript-leap-metadata-tsconfig.js
#+begin_src js :tangle typescript/leap/tsconfig.json :mkdirp yes
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}
#+end_src

#+name:typescript-leap-metadata-tslint.json
#+begin_src js :tangle typescript/leap/tslint.json :mkdirp yes
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}
#+end_src

#+name:typescript-leap-metadata-exercism
#+begin_src js :tangle typescript/leap/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"typescript",
    "exercise":"leap",
    "id":"1fe455d365f946e69ed99df4984febf8",
    "url":"https://exercism.io/my/solutions/1fe455d365f946e69ed99df4984febf8",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript Leap Solution and Tests
**** TypeScript Leap Solution Code
#+name:typescript-leap-solution
#+begin_src js :tangle typescript/leap/leap.ts :mkdirp yes
function isLeapYear(year : number) : boolean {

    let div_4   = (year:number) => !(year % 4);
    let div_100 = (year:number) => !(year % 100);
    let div_400 = (year:number) => !(year % 400);

    return div_4(year) && !(div_100(year) && !div_400(year));
}

export default isLeapYear
#+end_src

#+name:typescript-leap-run-tests
#+begin_src sh :dir typescript/leap :results output :exports results
yarn test 2> results.txt
cat results.txt
#+end_src
***** Mentor Commentary
:PROPERTIES:
:mentor:   snowfrogdev
:date:     2019-06-25
:END:
Congratulations on solving this problem and passing all the tests.  I like how
you made individual variables to wrap the divisible by X checks.

One of the main teaching goals for this exercise is to help the student get a
better grasp of logical operators and short-circuiting.  With that in mind can
you try to refactor your code a little bit to keep the following in mind:

{{{heading(order of operation matters:)}}}

- 75% of all years cannot be leap years because they are not multiples of 4;
  test ~year % 4 === 0~ first
- 98.97% of all years that are multiples of 4 are not multiples of 100; test
  ~year % 100 !== 0~ second
- 1.03% of all years that are multiples of 4 are also multiples of 100 and 400;
  test ~year % 400 === 0~ third


Although your solution is correct in output, the check ~year % 400~ is executed
for all years that don't match ~year % 4 == 0~, and for these (75% of all
years), always returns false, because if something is not divisible by 4 it can
not be divisible by 400.  This is making a redundant check.

Essentially, I'd like you to rewrite your solution in a way that avoids making
unnecessary checks.  That's where short-circuiting comes in.  Let me know if
you need more guidance.

**** TypsScript Leap Tests
#+name:typescript-leap-tests
#+begin_src js :tangle typescript/leap/leap.test.ts
import isLeapYear from './leap'

describe('A leap year', () => {

  it('is not very common', () => {
    expect(isLeapYear(2015)).toBeFalsy()
  })

  it('is introduced every 4 years to adjust about a day', () => {
    expect(isLeapYear(2016)).toBeTruthy()
  })

  it('is skipped every 100 years to remove an extra day', () => {
    expect(isLeapYear(1900)).toBeFalsy()
  })

  it('is reintroduced every 400 years to adjust another day', () => {
    expect(isLeapYear(2000)).toBeTruthy()
  })

  describe('Additional example of a leap year that', () => {

    it('is not a leap year', () => {
      expect(isLeapYear(1978)).toBeFalsy()
    })

    it('is a common leap year', () => {
      expect(isLeapYear(1992)).toBeTruthy()
    })

    it('is skipped every 100 years', () => {
      expect(isLeapYear(2100)).toBeFalsy()
    })

    it('is reintroduced every 400 years', () => {
      expect(isLeapYear(2400)).toBeTruthy()
    })
  })
})

#+end_src
* Python Exercism Track
- http://exercism.io/languages/python
- https://github.com/exercism/python

The Python code in this repo is meant to follow the [[https://www.python.org/dev/peps/pep-0008/][PEP8 style guide]] (a
stylized version http://pep8.org).

This repo uses [[http://flake8.readthedocs.org/en/latest/][flake8]] with default settings to enforce the coding standard.

** Python Exercism README
#+name:Readme-Python-track
#+begin_src txt :tangle python/README.md :mkdirp yes
# Exercism Python Track

[![Build Status](https://travis-ci.org/exercism/python.svg?branch=master)](https://travis-ci.org/exercism/python) [![Requirements Status](https://pyup.io/repos/github/exercism/python/shield.svg)](https://pyup.io/repos/github/exercism/python/)
[![Join the chat at https://gitter.im/exercism/python](https://badges.gitter.im/exercism/python.svg)](https://gitter.im/exercism/python?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Exercism exercises in Python


## Contributing Guide

Please see the [contributing guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md)


## Working on the Exercises

We welcome both improvements to the existing exercises and new exercises.
A list of missing exercise can be found here: https://github.com/exercism/python/issues/417#issuecomment-366040062


### Conventions

- We use minimalistic stub files for all exercises ([#272](https://github.com/exercism/python/issues/272)).
- We use `unittest` (Python Standard Library) and no 3rd-party-framework.
- We use the parameter order `self.assertEqual(actual, expected)` ([#440](https://github.com/exercism/python/issues/440)).
- We use context managers (`with self.assertRaises(\<exception type\>):`) for testing for exceptions ([#477](https://github.com/exercism/python/issues/477)).
- We use an established utility method to confirm that expected exceptions contain a non-empty message. This method must be included for any test class with an exception-based test case ([#1080](https://github.com/exercism/python/issues/1080#issuecomment-442068539)).
- We use `assertIs(actual, True)` and `assertIs(actual, False)` rather than `assertTrue(actual)` or `assertFalse(actual)` ([#419](https://github.com/exercism/python/pull/419)).
- We use a comment string in the test file to reference the version of the exercise's `canonical-data.json` that tests were adapted from (wording can be found in: [#784](https://github.com/exercism/python/issues/784)).


### Testing

All exercises must be compatible with Python versions 2.7 and 3.4 upwards.

To test a single exercise (e.g., with Python 2.7):
```
python2.7 test/check-exercises.py [exercise-name]
```

To test all exercises (e.g., with Python 3):
```
python3 test/check-exercises.py
```


### Code Style

The Python code in this repo is meant to follow the [PEP8 style guide](https://www.python.org/dev/peps/pep-0008/) (a stylized version http://pep8.org).

This repo uses [flake8](http://flake8.readthedocs.org/en/latest/) with default settings to enforce the coding standard.


### CI build

This repo uses `travis-ci` in the following configuration: [travis.yml](https://github.com/exercism/python/blob/master/.travis.yml)

It will automatically check the code style, the problem configuration, and run the unittests with all supported Python versions.


## Pull Requests

We :heart: pull requests!
We even :sparkling_heart: them if they contain well written commit messages!

Please write the first line of your commit message in the following style:

```exercise-name: Change some things```

Please try to follow the [The seven rules of a great Git commit message](https://chris.beams.io/posts/git-commit/#seven-rules) like to capitalize the subject line and use the imperative mood. If there are more details to add, put those into the body of the commit message.

If you're interested, Tim Pope even has an [entire blog post](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) on good commit messages.

If you're new to Git, take a look at [this short guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md#git-basics).

## License
This repository uses the [MIT License](/LICENSE).
#+end_src

** Python Hello World
Write a function that returns the string "Hello, World!"

You can tell Python to run the ~pytest~ module (allowing the same command to be
used regardless of Python version):

: python -m pytest hello_world_test.py

Changed computer or want to re-download the exercise after updating to the
latest version? Use this command:

: exercism download --exercise=hello-world --track=python

: Downloaded to
: /usr/local/dev/programming/Exercism/python/hello-world

*** Python Hello World Solution

#+name:hello_world.py
#+begin_src python -n :tangle python/hello-world/hello_world.py :mkdirp yes
def hello():
    return "Hello, World!"
#+end_src

#+name:python-hello-world-metadata
#+BEGIN_SRC js :tangle python/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"hello-world",
    "id":"86a587c4d6e34a078741d6be1edce608",
    "url":"https://exercism.io/my/solutions/86a587c4d6e34a078741d6be1edce608",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** Python Hello World Test

#+name:Python-Hello-World-Test
#+begin_src python :tangle python/hello-world/hello_world_test.py :mkdirp yes
import unittest

import hello_world

# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0

class HelloWorldTest(unittest.TestCase):
    def test_hello(self):
        self.assertEqual(hello_world.hello(), 'Hello, World!')


if __name__ == '__main__':
    unittest.main()
#+end_src

#+name:python-hello-world-test
#+begin_src sh :dir python/hello-world :results output :exports both
python3 -m pytest hello_world_test.py
#+end_src

#+RESULTS: python-hello-world-test
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/hello-world
: collected 1 item
: 
: hello_world_test.py .                                                    [100%]
: 
: =========================== 1 passed in 0.10 seconds ===========================

** Python Two Fer
Two-fer or 2-fer is short for two for one. One for you and one for me.

: "One for X, one for me."

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

To run the tests:
: python3 -m pytest two_fer_test.py

*** Python Two Fer Solution
#+name:Two-Fer-Solution
#+begin_src python -n :tangle python/two-fer/two_fer.py :mkdirp yes
def two_fer(name="you"):
    return f"One for {name}, one for me."
#+end_src

#+begin_src sh :dir python/two-fer :results output
python3 -m pytest two_fer_test.py
#+end_src

#+RESULTS:
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/two-fer
: collected 3 items
: 
: two_fer_test.py ...                                                      [100%]
: 
: =========================== 3 passed in 0.02 seconds ===========================

#+name:python-two-fer-metadata
#+BEGIN_SRC js :tangle python/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"two-fer",
    "id":"80dbb050e4f041efa796149983871746",
    "url":"https://exercism.io/my/solutions/80dbb050e4f041efa796149983871746",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

*** Python Two Fer Test
#+name:Python-Two-Fer-Test
#+begin_src python :tangle python/two-fer/two_fer_test.py :mkdirp yes
import unittest

from two_fer import two_fer


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0

class TwoFerTest(unittest.TestCase):
    def test_no_name_given(self):
        self.assertEqual(two_fer(), 'One for you, one for me.')

    def test_a_name_given(self):
        self.assertEqual(two_fer("Alice"), "One for Alice, one for me.")

    def test_another_name_given(self):
        self.assertEqual(two_fer("Bob"), "One for Bob, one for me.")


if __name__ == '__main__':
    unittest.main()
#+end_src

#+begin_src sh :dir python/two-fer :results output :exports both
python3 -m pytest two_fer_test.py
#+end_src

#+RESULTS:
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/two-fer
: collected 3 items
: 
: two_fer_test.py ...                                                      [100%]
: 
: =========================== 3 passed in 0.06 seconds ===========================

** Python High Scores
:PROPERTIES:
:level:    easy
:END:

*** Python High Scores Task
Manage a game player's High Score list.

Your task is to build a high-score component of the classic Frogger game, one
of the highest selling and addictive games of all time, and a classic of the
arcade era.  Your task is to write methods that return the highest score from
the list, the last added score, the three highest scores, and a report on the
difference between the last and the highest scores.

*** Python High Scores Readme

#+name:High_Scores_Python_Readme
#+begin_src txt :tangle python/high-scores/README.md :mkdirp yes
  # High Scores

  Manage a game player's High Score list.

  Your task is to build a high-score component of the classic Frogger
  game, one of the highest selling and addictive games of all time, and
  a classic of the arcade era. Your task is to write methods that return
  the highest score from the list, the last added score, the three
  highest scores, and a report on the difference between the last and
  the highest scores.

  ## Submitting Exercises

  Note that, when trying to submit an exercise, make sure the solution
  is in the `exercism/python/<exerciseName>` directory.

  For example, if you're submitting `bob.py` for the Bob exercise, the
  submit command would be something like `exercism submit
  <path_to_exercism_dir>/python/bob/bob.py`.


  For more detailed information about running tests, code style and linting,
  please see the [help page](http://exercism.io/languages/python).

  ## Source

  Tribute to the eighties' arcade game Frogger

  ## Submitting Incomplete Solutions
  It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python High Scores Scripts
**** Python High Scores Download Script
#+name:python-high-scores-download
#+begin_src sh
exercism download --exercise=high-scores --track=python
#+end_src

#+RESULTS: python-high-scores-download
: /Users/pine/Dev/Programming/Languages/Exercism/python/high-scores

**** Python High Scores Submit Script
#+name:python-high-scores-submit
#+begin_src sh
exercism submit python/high-scores/high_scores.py
#+end_src

#+RESULTS: python-high-scores-submit
: https://exercism.io/my/solutions/485c09d00b054d51b421c3d06a7cec30

*** Python High Scores Code
#+name:High_Scores_Python
#+begin_src python -n :tangle python/high-scores/high_scores.py :mkdirp yes
class HighScores(object):
    def __init__(self, scores):
        self.scores = scores

    def latest(self):
        return self.scores[-1]

    def personal_best(self):
        best = 0
        for score in self.scores:
            if score > best:
                best = score

        return best

    def personal_top(self):
        pt = self.scores[:]
        pt.sort(reverse=True)
        return pt[:3]

    def report(self):
        latest = self.scores[-1]
        best = self.personal_best()
        report = f"Your latest score was {latest}. "
        if latest == best:
            report += f"That's your personal best!"
        else:
            report += f"That's {best - latest} short of your personal best!"

        return report
#+end_src

#+name:python-high-scores-metadata
#+BEGIN_SRC js :tangle python/high-scores/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"high-scores",
    "id":"485c09d00b054d51b421c3d06a7cec30",
    "url":"https://exercism.io/my/solutions/485c09d00b054d51b421c3d06a7cec30",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
  }
#+END_SRC

*** Python High Scores Test
#+name:High_Scores_Python_Test
#+begin_src python :tangle python/high-scores/high_scores_test.py :mkdirp yes
import unittest

from high_scores import HighScores


# Tests adapted from `problem-specifications//canonical-data.json` @ v2.0.0


class HighScoreTest(unittest.TestCase):
    def test_list_of_scores(self):
        scores = [30, 50, 20, 70]
        expected = [30, 50, 20, 70]
        self.assertEqual(HighScores(scores).scores, expected)

    def test_latest_score(self):
        scores = [100, 0, 90, 30]
        expected = 30
        self.assertEqual(HighScores(scores).latest(), expected)

    def test_personal_best(self):
        scores = [40, 100, 70]
        expected = 100
        self.assertEqual(HighScores(scores).personal_best(), expected)

    def test_personal_top(self):
        scores = [50, 30, 10]
        expected = [50, 30, 10]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_highest_to_lowest(self):
        scores = [20, 10, 30]
        expected = [30, 20, 10]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_when_there_is_a_tie(self):
        scores = [40, 20, 40, 30]
        expected = [40, 40, 30]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_when_there_are_less_than_3(self):
        scores = [30, 70]
        expected = [70, 30]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_when_there_is_only_one(self):
        scores = [40]
        expected = [40]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_from_a_long_list(self):
        scores = [10, 30, 90, 30, 100, 20, 10, 0, 30, 40, 40, 70, 70]
        expected = [100, 90, 70]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_message_for_new_personal_best(self):
        scores = [20, 40, 0, 30, 70]
        expected = "Your latest score was 70. That's your personal best!"
        self.assertEqual(HighScores(scores).report(), expected)

    def test_message_when_latest_score_is_not_the_highest_score(self):
        scores = [20, 100, 0, 30, 70]
        expected = (
            "Your latest score was 70. That's 30 short of your personal best!"
        )
        self.assertEqual(HighScores(scores).report(), expected)

    def test_message_for_repeated_personal_best(self):
        scores = [20, 70, 50, 70, 30]
        expected = (
            "Your latest score was 30. That's 40 short of your personal best!"
        )
        self.assertEqual(HighScores(scores).report(), expected)


if __name__ == "__main__":
    unittest.main()
#+end_src

#+name:Test_High_Score_Python
#+begin_src sh :dir python/high-scores :results output :exports both
python3 -m pytest high_scores_test.py
#+end_src

#+RESULTS: Test_High_Score_Python
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/high-scores
: collected 12 items
: 
: high_scores_test.py ............                                         [100%]
: 
: ========================== 12 passed in 0.08 seconds ===========================

** Python Matrix
Given a string representing a matrix of numbers, return the rows and columns of
that matrix.  So given a string with embedded newlines like:
#+begin_src python
9 8 7
5 3 2
6 6 7
#+end_src
representing this matrix:
#+begin_src python
    1  2  3
  |---------
1 | 9  8  7
2 | 5  3  2
3 | 6  6  7
#+end_src

your code should be able to spit out:
- A list of the rows, reading each row left-to-right while moving top-to-bottom
  across the rows,
- A list of the columns, reading each column top-to-bottom while moving from
  left-to-right.


The rows for our example matrix:
- 9, 8, 7
- 5, 3, 2
- 6, 6, 7


And its columns:
- 9, 5, 6
- 8, 3, 6
- 7, 2, 7


In this exercise you're going to create a class.
- [[https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes][A First Look at Classes]] from the Python 3 documentation.
- [[https://realpython.com/python3-object-oriented-programming/#how-to-define-a-class-in-python][How to Define a Class in Python]] from the Real Python website.
- [[https://docs.python.org/3/tutorial/datastructures.html][Data Structures in Python]] from the Python 3 documentation.

*** Python Matrix Readme

#+name:python-matrix-readme
#+begin_src markdown :tangle python/matrix/README.md :mkdirp yes
# Matrix

Given a string representing a matrix of numbers, return the rows and columns of
that matrix.

So given a string with embedded newlines like:

```text
9 8 7
5 3 2
6 6 7
```

representing this matrix:

```text
    1  2  3
  |---------
1 | 9  8  7
2 | 5  3  2
3 | 6  6  7
```

your code should be able to spit out:

- A list of the rows, reading each row left-to-right while moving
  top-to-bottom across the rows,
- A list of the columns, reading each column top-to-bottom while moving
  from left-to-right.

The rows for our example matrix:

- 9, 8, 7
- 5, 3, 2
- 6, 6, 7

And its columns:

- 9, 5, 6
- 8, 3, 6
- 7, 2, 7

In this exercise you're going to create a **class**.  _Don't worry, it's not as complicated as you think!_ 

-   [**A First Look at Classes**](https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes) from the Python 3 documentation. 
-   [**How to Define a Class in Python**](https://realpython.com/python3-object-oriented-programming/#how-to-define-a-class-in-python) from the Real Python website.  
-   [**Data Structures in Python**](https://docs.python.org/3/tutorial/datastructures.html) from the Python 3 documentation.



## Exception messages

Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to
indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not
every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include
a message.

To raise a message with an exception, just write it as an argument to the exception type. For example, instead of
`raise Exception`, you should write:

```python
raise Exception("Meaningful message indicating the source of the error")
```

## Running the tests

To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):

- Python 2.7: `py.test matrix_test.py`
- Python 3.4+: `pytest matrix_test.py`

Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):
`python -m pytest matrix_test.py`

### Common `pytest` options

- `-v` : enable verbose output
- `-x` : stop running tests on first failure
- `--ff` : run failures from previous test before running other test cases

For other options, see `python -m pytest -h`

## Submitting Exercises

Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/matrix` directory.

You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.

For more detailed information about running tests, code style and linting,
please see [Running the Tests](http://exercism.io/tracks/python/tests).

## Source

Warmup to the `saddle-points` warmup. [http://jumpstartlab.com](http://jumpstartlab.com)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python Matrix Scripts
**** Python Matrix Download Script

#+name:python-matrix-download-script
#+begin_src sh
exercism download --exercise=matrix --track=python
#+end_src

#+RESULTS: python-matrix-download-script
: /usr/local/dev/programming/Languages/Exercism/python/matrix

**** Python Matrix Submit Script

#+name:python-matrix-submit-script
#+begin_src sh
exercism submit python/matrix/matrix.py
#+end_src

#+RESULTS: python-matrix-submit-script
: https://exercism.io/my/solutions/69068a572d974bb0899fdffe5249077f

*** Python Matrix Metadata

#+name:python-matrix-exercism-metadata
#+begin_src js :tangle python/matrix/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"python",
      "exercise":"matrix",
      "id":"69068a572d974bb0899fdffe5249077f",
      "url":"https://exercism.io/my/solutions/69068a572d974bb0899fdffe5249077f",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** Python Matrix Solution Code and Tests
**** Python Matrix Solution Code

This solution uses a list comprehension to create rows of integer numbers from
string numbers.

#+name:python-matrix-solution
#+begin_src python :tangle python/matrix/matrix.py :mkdirp yes
class Matrix(object):
    def __init__(self, matrix_string):
        self.matrix = [
            [int(num) for num in row.split(' ')]
            for row in matrix_string.splitlines()
        ]

    def row(self, index):
        return self.matrix[index - 1]

    def column(self, index):
        return [row[index-1] for row in self.matrix]
#+end_src

{{{heading(Python Matrix Test Results)}}}

#+name:python-matrix-test-results
#+begin_src sh :dir python/matrix :results output :exports results
python3 -m pytest matrix_test.py 2>test.results
cat test.results
#+end_src

**** Mentor Comments
***** yawpitch July 8, 2018
This works quite well, so I'll approve, but consider the following:

1. When it involves newlines from unknown sources it's generally a good idea to
   use ~str.splitlines~ rather than split on the Unix-specific newline
   character.

2. You could do for ~row in matrix_string.splitlines()~ and skip assigning
   rows.

   #+cindex:list comprehension
3. Consider how you could accomplish lines 7-12 with a /list comprehension/
   instead of an explicit for loop.  Lines 18-22 could also be done with a list
   comprehension.


One interesting subtlety of this problem: if you assign to the return value of
~Matrix.row (ie m.row(1)[0] = 5~) you mutate the underlying ~self.matrix~;
however doing the same with the ~Matrix.column~ return value won't mutate the
underlying data.  Perhaps return a copy of the row?

***** yawpitch July 8, 2018
Much better. This does still display that somewhat odd behaviour I mentioned
though:

#+name:odd-behavior-example
#+begin_src python
from matrix import Matrix
m = Matrix("1 2 3\n4 5 6\n7 8 9")
m.column(1)[0] = "X"
m.print_matrix()   # "1 2 3 \n 4 5 6 \n 7 8 9"
m.row(1)[0] = "X"
m.print_matrix()    # "X 2 3 \n 4 5 6 \n 7 8 9"
#+end_src

**** Python Matrix Tests

#+name:python-matrix-tests
#+begin_src python :tangle python/matrix/matrix_test.py :mkdirp yes
import unittest

from matrix import Matrix


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0

class MatrixTest(unittest.TestCase):
    def test_extract_row_from_one_number_matrix(self):
        matrix = Matrix("1")
        self.assertEqual(matrix.row(1), [1])

    def test_can_extract_row(self):
        matrix = Matrix("1 2\n3 4")
        self.assertEqual(matrix.row(2), [3, 4])

    def test_extract_row_where_numbers_have_different_widths(self):
        matrix = Matrix("1 2\n10 20")
        self.assertEqual(matrix.row(2), [10, 20])

    def test_can_extract_row_from_non_square_matrix(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9\n8 7 6")
        self.assertEqual(matrix.row(3), [7, 8, 9])

    def test_extract_column_from_one_number_matrix(self):
        matrix = Matrix("1")
        self.assertEqual(matrix.column(1), [1])

    def test_can_extract_column(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9")
        self.assertEqual(matrix.column(3), [3, 6, 9])

    def test_can_extract_column_from_non_square_matrix(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9\n8 7 6")
        self.assertEqual(matrix.column(3), [3, 6, 9, 6])

    def test_extract_column_where_numbers_have_different_widths(self):
        matrix = Matrix("89 1903 3\n18 3 1\n9 4 800")
        self.assertEqual(matrix.column(2), [1903, 3, 4])


if __name__ == '__main__':
    unittest.main()

#+end_src
** Python Pangram
:PROPERTIES:
:exercise: side
:END:

*** Python Pangram Introduction
Determine if a sentence is a pangram.  A pangram (Greek: παν γράμμα, pan
gramma, "every letter") is a sentence using every letter of the alphabet at
least once.  The best known English pangram is:

: The quick brown fox jumps over the lazy dog.

The alphabet used consists of ASCII letters a to z, inclusive, and is case
insensitive.  Input will not contain non-ASCII symbols.

{{{heading(Exception Messages)}}}

Sometimes it is necessary to raise an exception.  When you do this, you should
include a meaningful error message to indicate what the source of the error is.
This makes your code more readable and helps significantly with debugging.  Not
every exercise will require you to raise an exception, but for those that do,
the tests will only pass if you include a message.

To raise a message with an exception, just write it as an argument to the
exception type. For example, instead of ~raise Exception~, you should write:

: raise Exception("Meaningful message indicating the source of the error")

{{{heading(Running the tests)}}}

- Python 3.4+: ~pytest pangram_test.py~


Alternatively, you can tell Python to run the =pytest= module (allowing the same
command to be used regardless of Python version):

: python -m pytest pangram_test.py

{{{heading(Submitting Exercises)}}}

Note that, when trying to submit an exercise, make sure the solution is in the
~$EXERCISM_WORKSPACE/python/pangram~ directory.

You can find your Exercism workspace by running ~exercism debug~ and looking
for the line that starts with ~Workspace~.

{{{heading(Source)}}}

[[https://en.wikipedia.org/wiki/Pangram][Pangram on Wikipedia]]

*** Python Pangram Readme
#+name:python-pangram-readme
#+begin_src markdown :tangle python/pangram/README.md :mkdirp yes
# Pangram

Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma,
"every letter") is a sentence using every letter of the alphabet at least once.
The best known English pangram is:
> The quick brown fox jumps over the lazy dog.

The alphabet used consists of ASCII letters `a` to `z`, inclusive, and is case
insensitive. Input will not contain non-ASCII symbols.

## Exception messages

Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to
indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not
every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include
a message.

To raise a message with an exception, just write it as an argument to the exception type. For example, instead of
`raise Exception`, you should write:

```python
raise Exception("Meaningful message indicating the source of the error")
```

## Running the tests

To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):

- Python 2.7: `py.test pangram_test.py`
- Python 3.4+: `pytest pangram_test.py`

Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):
`python -m pytest pangram_test.py`

### Common `pytest` options

- `-v` : enable verbose output
- `-x` : stop running tests on first failure
- `--ff` : run failures from previous test before running other test cases

For other options, see `python -m pytest -h`

## Submitting Exercises

Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/pangram` directory.

You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.

For more detailed information about running tests, code style and linting,
please see [Running the Tests](http://exercism.io/tracks/python/tests).

## Source

Wikipedia [https://en.wikipedia.org/wiki/Pangram](https://en.wikipedia.org/wiki/Pangram)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python Pangram Scripts

**** Python Pangram Download Script
#+name:python-pangram-download-script
#+begin_src sh
exercism download --exercise=pangram --track=python
#+end_src

#+RESULTS: python-pangram-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/python/pangram

**** Python Pangram Submit Script
#+name:python-pangram-submit-script
#+begin_src sh
exercism submit python/pangram/pangram.py
#+end_src

#+RESULTS: python-pangram-submit-script
: https://exercism.io/my/solutions/6ee88bf5b1f54cbe9fe490f58a2526d8

*** Python Pangram Solution Code
#+caption:Solution Code pangram.py
#+name:python-pangram-solution
#+begin_src python -n :tangle python/pangram/pangram.py
def is_pangram(sentence):
    return len(set(list(filter(lambda e : e.isalpha(), list(''.join(sentence.lower().split())))))) == 26
#+end_src

{{{heading(Tests of Python Pangram Solution Code)}}}

#+name:python-pangram-run-tests
#+header: :dir python/pangram
#+header: :results output :exports results
#+begin_src sh
pytest pangram_test.py 2>&1 > results_pangram
cat results_pangram
#+end_src

#+RESULTS: python-pangram-run-tests
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.0.2, py-1.7.0, pluggy-0.8.0
: rootdir: /Users/pine/Dev/Programming/Languages/Exercism/python/pangram, inifile:
: collected 10 items
: 
: pangram_test.py ..........                                               [100%]
: 
: ========================== 10 passed in 0.01 seconds ===========================

#+name:python-pangram-metadata
#+begin_src js :tangle python/pangram/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"pangram",
    "id":"6ee88bf5b1f54cbe9fe490f58a2526d8",
    "url":"https://exercism.io/my/solutions/6ee88bf5b1f54cbe9fe490f58a2526d8",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Python Pangram Test Code
#+name:python-pangram-test-code
#+begin_src py -n :tangle python/pangram/pangram_test.py
import unittest

from pangram import is_pangram


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.4.1

class PangramTest(unittest.TestCase):

    def test_sentence_empty(self):
        self.assertIs(is_pangram(''), False)

    def test_recognizes_a_perfect_lower_case_pangram(self):
        self.assertIs(is_pangram('abcdefghijklmnopqrstuvwxyz'), True)

    def test_pangram_with_only_lower_case(self):
        self.assertIs(
            is_pangram('the quick brown fox jumps over the lazy dog'),
            True)

    def test_missing_character_x(self):
        self.assertIs(
            is_pangram('a quick movement of the enemy will '
                       'jeopardize five gunboats'),
            False)

    def test_another_missing_character(self):
        self.assertIs(is_pangram('five boxing wizards jump quickly at it'),
                      False)

    def test_pangram_with_underscores(self):
        self.assertIs(
            is_pangram('the_quick_brown_fox_jumps_over_the_lazy_dog'),
            True)

    def test_pangram_with_numbers(self):
        self.assertIs(
            is_pangram('the 1 quick brown fox jumps over the 2 lazy dogs'),
            True)

    def test_missing_letters_replaced_by_numbers(self):
        self.assertIs(
            is_pangram('7h3 qu1ck brown fox jumps ov3r 7h3 lazy dog'),
            False)

    def test_pangram_with_mixedcase_and_punctuation(self):
        self.assertIs(
            is_pangram('"Five quacking Zephyrs jolt my wax bed."'),
            True)

    def test_upper_and_lower_case_versions_of_the_same_character(self):
        self.assertIs(
            is_pangram('the quick brown fox jumped over the lazy FX'),
            False)


if __name__ == '__main__':
    unittest.main()

#+end_src

* Perl5 Exercism Track
** Perl5 Hello World
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" (https://en.wikipedia.org/wiki/%22Hello%2c_World!%22_program)
is the traditional first program for beginning programming in a new language or
environment.

{{{heading(Objectives)}}}

The objectives are simple:
- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** Perl5 Hello World Readme
#+name:perl5-hello-world-readme
#+BEGIN_SRC txt :tangle perl5/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.
## Source

This is an exercise to introduce users to using Exercism
[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+END_SRC

*** Perl5 Hello World Solution
#+name:perl5-hello-world-code
#+BEGIN_SRC perl -n :tangle perl5/hello-world/lib/HelloWorld.pm :mkdirp yes
# Declare package 'HelloWorld'
package HelloWorld;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(hello);

sub hello {
  return "Hello, World!";
}

1;
#+END_SRC

#+name:perl5-hello-world-metadata
#+header: :exports none
#+BEGIN_SRC js :tangle perl5/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"perl5",
    "exercise":"hello-world",
    "id":"55fe9523b94f4e1b9a0b7f8a438d0e45",
    "url":"https://exercism.io/my/solutions/55fe9523b94f4e1b9a0b7f8a438d0e45",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** Perl5 Hello World Test
#+name:perl5-hello-world-test
#+BEGIN_SRC perl -n :tangle perl5/hello-world/t/hello-world.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 2; # This is how many tests we expect to run.
use lib './lib';
use HelloWorld qw(hello);

can_ok 'HelloWorld', 'import' or BAIL_OUT 'Cannot import subroutines from module';

# Run the 'is' subroutine from the 'Test::More' module, with three arguments.
is(
  hello,           # Run the 'hello' subroutine, which is imported from your module.
  'Hello, World!', # The expected result to compare with 'hello'.
  'Say Hi!'        # The test description.
);
#+END_SRC

#+name:perl5-hello-world-run-test
#+BEGIN_SRC sh :dir perl5/hello-world :results output :exports both
prove ./t
#+END_SRC

#+RESULTS: perl5-hello-world-run-test
: t/hello-world.t .. ok
: All tests successful.
: Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.03 cusr  0.00 csys =  0.05 CPU)
: Result: PASS
** Perl5 Two Fer
"Two-fer" or "2-fer" is short for "two for one.  One for you and one for me."

{{{heading(Objective)}}}

Given a name, return a string with the message:
: One for X, one for me.
Where 'X' is the given name.

However, if the name is missing, return the string:
: One for you, one for me.

*** Perl5 Two Fer Readme
#+name:perl5-two-fer-readme
#+BEGIN_SRC txt :tangle perl5/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    | String to return 
|:------:|:-----------------: 
|Alice   | One for Alice, one for me. 
|Bob     | One for Bob, one for me.
|        | One for you, one for me.
|Zaphod  | One for Zaphod, one for me.
## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+END_SRC
*** Perl5 Two Fer Solution

#+CINDEX:defined-or operator (@code{//})
#+CINDEX:@code{//}, defined-or operator
The defined-or operator, =//=, tests the definedness of its operand.  Unlike
=||=, which tests the truth of its operand, =//= evaluates to a =true= value
even if its operand evaluates to a numeric zero or the empty string.  This is
especially useful for setting default parameter values.

#+name:perl5-two-fer-solution
#+BEGIN_SRC perl -n :tangle perl5/two-fer/lib/TwoFer.pm :mkdirp yes
package TwoFer;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(two_fer);

sub two_fer {
  return "One for ". eval {pop // "you"}. ", one for me.";
}

1;
#+END_SRC

#+name:perl5-two-fer-metadata
#+header: :exports none
#+BEGIN_SRC js :tangle perl5/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"perl5",
    "exercise":"two-fer",
    "id":"4acecc77f2324da5aa5c59e52c0c0a6a",
    "url":"https://exercism.io/my/solutions/4acecc77f2324da5aa5c59e52c0c0a6a",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

*** Perl5 Two Fer Test
#+perl5-two-fer-test
#+BEGIN_SRC perl -n :tangle perl5/two-fer/t/two-fer.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 4;
use JSON::PP;
use lib './lib';
use TwoFer qw(two_fer);

can_ok 'TwoFer', 'import' or BAIL_OUT 'Cannot import subroutines from module';

my $C_DATA = do { local $/; decode_json(<DATA>); };
foreach my $case (@{$C_DATA->{cases}}) {
  is two_fer($case->{input}{name}), $case->{expected}, $case->{description};
}

__DATA__
{
  "exercise": "two-fer",
  "version": "1.2.0",
  "cases": [
    {
      "description": "no name given",
      "property": "twoFer",
      "input": {
        "name": null
      },
      "expected": "One for you, one for me."
    },
    {
      "description": "a name given",
      "property": "twoFer",
      "input": {
        "name": "Alice"
      },
      "expected": "One for Alice, one for me."
    },
    {
      "description": "another name given",
      "property": "twoFer",
      "input": {
        "name": "Bob"
      },
      "expected": "One for Bob, one for me."
    }
  ]
}
#+END_SRC

#+name:perl5-two-fer-run-test
#+BEGIN_SRC sh :dir perl5/two-fer :results output :exports both
prove ./t
#+END_SRC

#+RESULTS: perl5-two-fer-run-test
: t/two-fer.t .. ok
: All tests successful.
: Files=1, Tests=4,  0 wallclock secs ( 0.01 usr  0.01 sys +  0.05 cusr  0.00 csys =  0.07 CPU)
: Result: PASS

** Perl5 Bob
*** Perl5 Bob Introduction
Bob is a lackadaisical teenager. In conversation, his responses are very
limited.

Bob answers 'Sure.' if you ask him a question.

He answers 'Whoa, chill out!' if you yell at him.

He answers 'Calm down, I know what I'm doing!' if you yell a question at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Bob's conversational partner is a purist when it comes to written communication
and always follows normal rules regarding sentence punctuation in English.

*** Perl5 Bob Inspirational Source
Inspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to Program
tutorial:
- http://pine.fm/LearnToProgram/?Chapter=06

*** Perl5 Bob How to Download
#+name:Perl5-Bob-Download
#+begin_src sh :dir perl5
exercism download --exercise=bob --track=perl5
#+end_src

#+RESULTS: Perl5-Bob-Download
: /usr/local/dev/programming/Languages/Exercism/perl5/bob

*** Perl5 Bob Solution
#+name:Perl5-Bob-Solution
#+begin_src perl -n :tangle perl5/bob/lib/Bob.pm :mkdirp yes
  # Declare package 'Bob'
  package Bob;
  use strict;
  use warnings;
  use Exporter 'import';
  our @EXPORT_OK = qw(hey);

  sub hey {
    my ($msg) = @_;

    if ($msg =~ /^[\p{Space}]{0,}$/) {
        return "Fine. Be that way!";
    }

    if ($msg =~ /^[\p{UPPERCASE_LETTER}]+[\p{UPPERCASE}\p{NUMBER}\s,%^*@#$(^!]*!?$/) {
        return "Whoa, chill out!";
    }

    if ($msg =~ /[\p{UPPERCASE_LETTER}\p{NUMBER}\s,%^*@#$(^!]*[\p{UPPERCASE_LETTER}]+!?$/) {
        return "Whoa, chill out!";
    }

    if ($msg =~ /^[\p{UPPERCASE_LETTER}\s]*[?]$/) {
        return "Calm down, I know what I'm doing!";
    }

    if ($msg =~ /^[\p{LETTER}\p{NUMBER},\s]*$/) {
        return "Whatever.";
    }

    if ($msg =~ /[\p{LETTER}\p{NUMBER}?]\s{0,}$/) {
        return "Sure.";
    }

    if ($msg !~ /\p{LETTER}/) {
        return "Whatever.";
    }

    return "Whatever.";
  }

  1;
#+end_src

#+name:Perl5-Bob-Metadata
#+begin_src js :tangle perl5/bob/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"perl5",
      "exercise":"bob",
      "id":"08f0b7ecdadd47f8a9baa2910b6558fc",
      "url":"https://exercism.io/my/solutions/08f0b7ecdadd47f8a9baa2910b6558fc",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** Perl5 Bob Test
#+name:Perl5-Bob-Tests
#+begin_src perl :tangle perl5/bob/t/bob.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 26; # This is how many tests we expect to run.
use JSON::PP;
use lib './lib';
use Bob qw(hey);

can_ok 'Bob', 'import' or BAIL_OUT 'Cannot import subroutines from module';

my $C_DATA = do { local $/; decode_json(<DATA>); };
is hey($_->{input}{heyBob}), $_->{expected}, $_->{description} foreach @{$C_DATA->{cases}};

__DATA__
{
  "exercise": "bob",
  "version": "1.4.0",
  "cases": [
    {
      "description": "stating something",
      "property": "response",
      "input": {
        "heyBob": "Tom-ay-to, tom-aaaah-to."
      },
      "expected": "Whatever."
    },
    {
      "description": "shouting",
      "property": "response",
      "input": {
        "heyBob": "WATCH OUT!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "shouting gibberish",
      "property": "response",
      "input": {
        "heyBob": "FCECDFCAAB"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "asking a question",
      "property": "response",
      "input": {
        "heyBob": "Does this cryogenic chamber make me look fat?"
      },
      "expected": "Sure."
    },
    {
      "description": "asking a numeric question",
      "property": "response",
      "input": {
        "heyBob": "You are, what, like 15?"
      },
      "expected": "Sure."
    },
    {
      "description": "asking gibberish",
      "property": "response",
      "input": {
        "heyBob": "fffbbcbeab?"
      },
      "expected": "Sure."
    },
    {
      "description": "talking forcefully",
      "property": "response",
      "input": {
        "heyBob": "Let's go make out behind the gym!"
      },
      "expected": "Whatever."
    },
    {
      "description": "using acronyms in regular speech",
      "property": "response",
      "input": {
        "heyBob": "It's OK if you don't want to go to the DMV."
      },
      "expected": "Whatever."
    },
    {
      "description": "forceful question",
      "property": "response",
      "input": {
        "heyBob": "WHAT THE HELL WERE YOU THINKING?"
      },
      "expected": "Calm down, I know what I'm doing!"
    },
    {
      "description": "shouting numbers",
      "property": "response",
      "input": {
        "heyBob": "1, 2, 3 GO!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "no letters",
      "property": "response",
      "input": {
        "heyBob": "1, 2, 3"
      },
      "expected": "Whatever."
    },
    {
      "description": "question with no letters",
      "property": "response",
      "input": {
        "heyBob": "4?"
      },
      "expected": "Sure."
    },
    {
      "description": "shouting with special characters",
      "property": "response",
      "input": {
        "heyBob": "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "shouting with no exclamation mark",
      "property": "response",
      "input": {
        "heyBob": "I HATE THE DMV"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "statement containing question mark",
      "property": "response",
      "input": {
        "heyBob": "Ending with ? means a question."
      },
      "expected": "Whatever."
    },
    {
      "description": "non-letters with question",
      "property": "response",
      "input": {
        "heyBob": ":) ?"
      },
      "expected": "Sure."
    },
    {
      "description": "prattling on",
      "property": "response",
      "input": {
        "heyBob": "Wait! Hang on. Are you going to be OK?"
      },
      "expected": "Sure."
    },
    {
      "description": "silence",
      "property": "response",
      "input": {
        "heyBob": ""
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "prolonged silence",
      "property": "response",
      "input": {
        "heyBob": "          "
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "alternate silence",
      "property": "response",
      "input": {
        "heyBob": "\t\t\t\t\t\t\t\t\t\t"
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "multiple line question",
      "property": "response",
      "input": {
        "heyBob": "\nDoes this cryogenic chamber make me look fat?\nNo."
      },
      "expected": "Whatever."
    },
    {
      "description": "starting with whitespace",
      "property": "response",
      "input": {
        "heyBob": "         hmmmmmmm..."
      },
      "expected": "Whatever."
    },
    {
      "description": "ending with whitespace",
      "property": "response",
      "input": {
        "heyBob": "Okay if like my  spacebar  quite a bit?   "
      },
      "expected": "Sure."
    },
    {
      "description": "other whitespace",
      "property": "response",
      "input": {
        "heyBob": "\n\r \t"
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "non-question ending with whitespace",
      "property": "response",
      "input": {
        "heyBob": "This is a statement ending with whitespace      "
      },
      "expected": "Whatever."
    }
  ]
}

#+end_src

#+name:Perl5-Bob-Run-Tests
#+begin_src sh :dir perl5/bob :results output :exports both
prove ./t
#+end_src

#+RESULTS: Perl5-Bob-Run-Tests
: t/bob.t .. ok
: All tests successful.
: Files=1, Tests=26,  0 wallclock secs ( 0.01 usr  0.01 sys +  0.06 cusr  0.00 csys =  0.08 CPU)
: Result: PASS
** Perl5 Leap
*** Perl5 Leap Scripts
**** Perl5 Leap Download Script
#+name:perl5-leap-download-script
#+begin_src sh
exercism download --exercise=leap --track=perl5
#+end_src

#+RESULTS: perl5-leap-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/perl5/leap

**** Perl5 Leap Submit Script
#+name:perl5-leap-submit-script
#+begin_src sh
exercism submit perl5/leap/leap.pm
#+end_src

#+RESULTS: perl5-leap-submit-script
: https://exercism.io/my/solutions/bc5ea753ab4440f8a8a9b57231b38402

**** Perl5 Leap Run Tests Script
#+name:perl5-leap-run-tests-script
#+header: :dir perl5/leap
#+header: :results output :exports results
#+begin_src sh
prove . -v
#+end_src

#+RESULTS: perl5-leap-run-tests-script
#+begin_example
./leap.t .. 
# Seeded srand with seed '20190714' from local date.
1..7
ok 1 - Imported symbol: is_leap_year
ok 2 - year not divisible by 4 in common year
ok 3 - year divisible by 2, not divisible by 4 in common year
ok 4 - year divisible by 4, not divisible by 100 in leap year
ok 5 - year divisible by 100, not divisible by 400 in common year
ok 6 - year divisible by 400 in leap year
ok 7 - year divisible by 200, not divisible by 400 in common year
ok
All tests successful.
Files=1, Tests=7,  0 wallclock secs ( 0.01 usr  0.00 sys +  0.06 cusr  0.00 csys =  0.07 CPU)
Result: PASS
#+end_example

*** Perl5 Leap README
#+name:perl5-leap-readme
#+begin_src markdown :tangle perl5/leap/README.md :mkdirp yes
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE
## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Perl5 Leap Tests
#+name:perl5-leap-tests
#+begin_src perl :tangle perl5/leap/leap.t
#!/usr/bin/env perl
use Test2::V0;
use JSON::PP;

use FindBin qw($Bin);
use lib $Bin, "$Bin/local/lib/perl5"; # Find modules in the same dir as this file.

use Leap qw(is_leap_year);

my $C_DATA = do { local $/; decode_json(<DATA>); };
plan 7;    # This is how many tests we expect to run.

imported_ok qw(is_leap_year) or bail_out;

for ( @{ $C_DATA->{cases} } ) {
  is(
    is_leap_year( $_->{input}{year} ),
    $_->{expected} ? T : DF,    # Check if True, or Defined but False
    $_->{description}
  );
}

__DATA__
{
  "exercise": "leap",
  "version": "1.5.1",
  "cases": [
    {
      "description": "year not divisible by 4 in common year",
      "property": "leapYear",
      "input": {
        "year": 2015
      },
      "expected": false
    },
    {
      "description": "year divisible by 2, not divisible by 4 in common year",
      "property": "leapYear",
      "input": {
        "year": 1970
      },
      "expected": false
    },
    {
      "description": "year divisible by 4, not divisible by 100 in leap year",
      "property": "leapYear",
      "input": {
        "year": 1996
      },
      "expected": true
    },
    {
      "description": "year divisible by 100, not divisible by 400 in common year",
      "property": "leapYear",
      "input": {
        "year": 2100
      },
      "expected": false
    },
    {
      "description": "year divisible by 400 in leap year",
      "property": "leapYear",
      "input": {
        "year": 2000
      },
      "expected": true
    },
    {
      "description": "year divisible by 200, not divisible by 400 in common year",
      "property": "leapYear",
      "input": {
        "year": 1800
      },
      "expected": false
    }
  ]
}

#+end_src

*** Perl5 Leap Code
#+name:perl5-leap-code
#+begin_src perl :tangle perl5/leap/leap.pm
# Declare package 'Leap'
package Leap;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(is_leap_year);

sub is_leap_year {
  my ($year) = @_;
  sub div { !($_[0] % $_[1]) }
  div($year, 4) && !(div($year, 100) && !div($year, 400));
}
1;
#+end_src

#+name:perl5-leap-exercism-metadata
#+header: :exports no
#+begin_src js :tangle perl5/leap/.exercism/metadata.json :mkdirp yes
{
    "track":"perl5",
    "exercise":"leap",
    "id":"bc5ea753ab4440f8a8a9b57231b38402",
    "url":"https://exercism.io/my/solutions/bc5ea753ab4440f8a8a9b57231b38402",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src
* OCaml Exercism Track
- https://exercism.io/my/tracks/ocaml

** OCaml Getting Started
To work on the exercises, you will need [[https://opam.ocaml.org][Opam]] and [[https://opensource.janestreet.com/base/][Base]].  Consult [[https://opam.ocaml.org/doc/Install.html][opam]] website
for instructions on how to install =opam= for your OS.

#+name:ocaml-version-info
#+BEGIN_SRC sh :results output :exports both
opam --version
opam switch
ocaml --version
#+END_SRC

#+RESULTS: ocaml-version-info
: 2.0.4
: #  switch               compiler                    description
:    default              ocaml-base-compiler.4.07.0  default
: →  ocaml-base-compiler  ocaml-base-compiler.4.07.1  ocaml-base-compiler
: The OCaml toplevel, version 4.07.1

Once =opam= is installed open a terminal window and run the following command
to install =base= and =core_kernel=:

: opam install base core_kernel

To run the tests you will need =OUnit=.  Install it using =opam=:

: opam install ounit

*** OCaml Installation
- https://exercism.io/tracks/ocaml/installation


1. Install the OCaml compiler (ocaml) and package manager (opam).

   The excellent [[https://realworldocaml.org/][Real World OCaml]] book has [[https://github.com/realworldocaml/book/wiki/Installation-Instructions][installation instructions]] for a
   variety of operating systems.

2. If you followed the instructions from Real World OCaml, it is likely that
   your system's OCaml compiler is not the latest version.  To see a list of
   available versions and the one you have currently installed, run:

   : opam switch

   Note which version is the latest and install it by running:

   : opam switch <version-number>

   For example, if the latest version is 4.07.0, you will run:

   : opam switch 4.07.0

3. Install the =Core_kernel=, =Base= and =OUnit= packages, which are necessary in
   order to run the exercise tests:

   : opam install base core_kernel ounit

*** OCaml Running Tests
Because OCaml is a compiled language you need to compile your submission and
the test code before you can run the tests.  We use =jbuilder= to build.  Each
folder has a =jbuild= file specifying how to build and also a Makefile which
delegates to =jbuild=.

A Makefile is provided with a default target to compile your solution and run
the tests.  At the command line, type:

: make

*** OCaml Interactive Shell
=utop= is a command line program which allows you to run OCaml code
interactively.  The easiest way to install it is via =opam=:

: opam install utop

Consult utop for more detail.

*** OCaml Learning Resources

- [[http://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html][Documentation for the OCaml Standard Library]]

- [[https://ocaml.janestreet.com/][OCaml at JaneStreet]] and [[https://opensource.janestreet.com][Open Source Jane Street]]

- [[https://opensource.janestreet.com/base/][Documentation for the Jane Street Base Library]]

- [[https://opensource.janestreet.com/core/][Documentation for the Jane Street Core Library]]

- [[http://caml.inria.fr/resources/doc/guides/guidelines.en.html][Caml programming guidelines]]


OCaml's documentation is spread over multiple projects and can be hard to find
because there is what is sometimes called the "standard" library (the rather
minimal library that comes with the compiler) and a "Core" library (a separate
project by Jane Street that aims to provide a more complete and consistent
standard library).

Confusingly the standard library is sometimes referred to as the "core" library
(though rarely as the Core library).

The Core library from Jane Street is required for a few exercises, but can be
useful for all.  It's divided into three
- Base
- Core_kernel
- Core


each extending the previous.  Base is all you'll need for most exercises, but
for a few (using dates for instance, Core_kernel is needed).  To use Core, put
~open Base~ or ~open Core_kernel~ at the top of your code.

There are some subtle and not so subtle differences between the standard
library =List= module and Core's =List=.  A piece of advice: focus on the Core
library and ignore the standard library unless you really can't find what you
need in Core.

** OCaml Hello World
*** OCaml Hello World Download
#+name:ocaml-hello-world-download
#+BEGIN_SRC sh :results output :exports code
exercism download --exercise=hello-world --track=ocaml
#+END_SRC

#+RESULTS: ocaml-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/hello-world

*** OCaml Hello World Instruction
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".

- Run the test suite and make sure that it succeeds.

- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** OCaml Hello World README
#+name:ocaml-hello-world-README
#+BEGIN_SRC markdown :tangle ocaml/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`. Consult
[opam](https://opam.ocaml.org) website for instructions on how to
install `opam` for your OS. Once `opam` is installed open a terminal
window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution
and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run OCaml code
interactively. The easiest way to install it is via opam:

```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the OCaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

This is an exercise to introduce users to using Exercism
[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how
others have completed the exercise.
#+END_SRC

*** OCaml Hello World Solution
#+name:ocaml-hello-world-solution
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/hello_world.ml :mkdirp yes
let hello = "Hello, World!"
#+END_SRC

#+name:ocaml-hello-world-solution-interface
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/hello_world.mli :mkdirp yes
(*
   Returns "Hello, World!"
*)
val hello: string
#+END_SRC

#+name:ocaml-hello-world-metadata
#+BEGIN_SRC js :tangle ocaml/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"hello-world",
    "id":"87d3187606a5489eb60b63cbf0ec9af4",
    "url":"https://exercism.io/my/solutions/87d3187606a5489eb60b63cbf0ec9af4",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** OCaml Hello World Tests
#+name:ocaml-hello-world-tests
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/test.ml :mkdirp yes
open OUnit2
open Hello_world

let ae exp got _test_ctxt = assert_equal ~printer:(fun x -> x) exp got

let tests = [
     "Say Hi!" >:: ae "Hello, World!" hello;
]

let () =
  run_test_tt_main ("Hello World tests" >::: tests)
#+END_SRC

{{{heading(Testing OCaml Hello World)}}}

#+name:ocaml-hello-world-run-tests
#+BEGIN_SRC sh :dir ocaml/hello-world :results output :exports results
echo Running OCaml tests now...
make 2>&1
#+END_SRC

#+RESULTS: ocaml-hello-world-run-tests
: Running OCaml tests now...
: make clean...
: dune clean
: make test...
: dune runtest
:         test alias runtest
: .
: Ran: 1 tests in: 0.11 seconds.
: OK

*** OCaml Hello World Dune Project
#+name:ocaml-hello-world-dune
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+END_SRC

#+name:ocaml-hello-world-dune-project
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/dune-project :mkdirp yes
(lang dune 1.1)
#+END_SRC

*** OCaml Hello World Makefile
#+name:ocaml-hello-world-makefile
#+BEGIN_SRC make :tangle ocaml/hello-world/Makefile :mkdirp yes
default: clean test

test:
	@echo make test...
	dune runtest

clean:
	@echo make clean...
	dune clean

.PHONY: clean
#+END_SRC

** OCaml Leap
*** OCaml Leap Download
#+name:ocaml-leap-download
#+BEGIN_SRC sh :results output
exercism download --exercise=leap --track=ocaml
#+END_SRC

#+RESULTS: ocaml-leap-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/leap

*** OCaml Leap README
#+name:ocaml-leap-readme
#+BEGIN_SRC markdown
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

If your language provides a method in the standard library that does
this look-up, pretend it doesn't exist and implement it yourself.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`.  Consult
[opam](https://opam.ocaml.org) website for instructions on how to
install `opam` for your OS.  Once `opam` is installed open a terminal
window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run Ocaml code interactively. The easiest way to install it is via opam:
```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+END_SRC

*** OCaml Leap Solution
#+name:ocaml-leap-solution
#+BEGIN_SRC ocaml :tangle ocaml/leap/leap.ml :mkdirp yes
open Base

let leap_year year =
  let div4   = year %   4 = 0 in
  let div100 = year % 100 = 0 in
  let div400 = year % 400 = 0 in
  div4 && not (div100 && not div400);;
#+END_SRC

#+name:ocaml-leap-solution-interface
#+BEGIN_SRC ocaml :tangle ocaml/leap/leap.mli :mkdirp yes
val leap_year: int -> bool
#+END_SRC

#+name:ocaml-leap-metadata
#+BEGIN_SRC js :tangle ocaml/leap/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"leap",
    "id":"e02b0d61e88c451897a35598f9023b70",
    "url":"https://exercism.io/my/solutions/e02b0d61e88c451897a35598f9023b70",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

#+name:ocaml-leap-solution-submit
#+BEGIN_SRC sh
exercism submit ocaml/leap/leap.ml
#+END_SRC

#+RESULTS: ocaml-leap-solution-submit
: https://exercism.io/my/solutions/e02b0d61e88c451897a35598f9023b70

*** OCaml Leap Tests
#+name:ocaml-leap-tests
#+BEGIN_SRC ocaml :tangle ocaml/leap/test.ml :mkdirp yes
open OUnit2
open Leap

let ae exp got _test_ctxt = assert_equal exp got ~printer:string_of_bool

let tests = [
  "year not divisible by 4: common year" >::
    ae false (leap_year 2015);
  "year divisible by 4, not divisible by 100: leap year" >::
    ae true (leap_year 1996);
  "year divisible by 100, not divisible by 400: common year" >::
    ae false (leap_year 2100);
  "year divisible by 400: leap year" >::
    ae true (leap_year 2000);
  "year divisible by 200, not divisible by 400: common year" >::
    ae false (leap_year 1800);
]

let () =
  run_test_tt_main ("leap tests" >::: tests)
#+END_SRC

#+name:ocaml-leap-makefile
#+BEGIN_SRC make :tangle ocaml/leap/Makefile :mkdirp yes
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean
#+END_SRC

#+name:ocaml-leap-make
#+BEGIN_SRC sh :dir ocaml/leap :results output :exports results
make 2>&1
#+END_SRC

#+RESULTS: ocaml-leap-make
: dune clean
: dune runtest
:         test alias runtest
: .....
: Ran: 5 tests in: 0.10 seconds.
: OK

*** Ocaml Leap Dune Project
#+name:ocaml-leap-dune
#+BEGIN_SRC ocaml :tangle ocaml/leap/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+END_SRC

#+name:ocaml-leap-dune-project
#+BEGIN_SRC ocaml :tangle ocaml/leap/dune-project :mkdirp yes
(lang dune 1.1)
(version 1.4.0)
#+END_SRC
** OCaml Hamming
- https://exercism.io/my/solutions/0cdcb15b087c451a8e0e71ba614b6ca9

Calculate the Hamming difference between two DNA strands.

Inspired by "The Calculating Point Mutations problem at Rosalind
http://rosalind.info/problems/hamm/"

A mutation is simply a mistake that occurs during the creation or copying of a
nucleic acid, in particular DNA.  Because nucleic acids are vital to cellular
functions, mutations tend to cause a ripple effect throughout the cell.
Although mutations are technically mistakes, a very rare mutation may equip the
cell with a beneficial attribute.  In fact, the macro effects of evolution are
attributable by the accumulated result of beneficial microscopic mutations over
many generations.

The simplest and most common type of nucleic acid mutation is a point mutation,
which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands taken
from different genomes with a common ancestor, we get a measure of the minimum
number of point mutations that could have occurred on the evolutionary path
between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

#+begin_example
GAGCCTACTAACGGGAT
CATCGTAATGACGGCCT
^ ^ ^  ^ ^    ^^
#+end_example

The Hamming distance between these two DNA strands is 7.

The Hamming distance is only defined for sequences of equal length.  This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

*** OCaml Hamming Scripts

**** OCaml Hamming Download
#+name:ocaml-hamming-download
#+begin_src sh :results output
exercism download --exercise=hamming --track=ocaml
#+end_src

#+RESULTS: ocaml-hamming-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/hamming

**** OCaml Hamming Submit
#+name:ocaml-hamming-submit
#+begin_src sh :results output :dir ocaml/hamming
exercism submit hamming.ml
#+end_src

#+RESULTS: ocaml-hamming-submit
:     https://exercism.io/my/solutions/0cdcb15b087c451a8e0e71ba614b6ca9

**** OCaml Hamming Run Tests
#+name:ocaml-hamming-run-tests
#+begin_src sh :results output :exports both :dir ocaml/hamming
make 2>&1
#+end_src

#+RESULTS: ocaml-hamming-run-tests
: dune clean
: dune runtest
:         test alias runtest
: ...............
: Ran: 15 tests in: 0.11 seconds.
: OK

*** OCaml Hamming Source Files
**** OCaml Hamming Solution
#+name:ocaml-hamming-solution
#+begin_src ocaml :tangle ocaml/hamming/hamming.ml :mkdirp yes
open Base;;

type nucleotide = A | C | G | T;;

let hamming_distance nl1 nl2 =
  let ham = fun acc n1 n2 -> if phys_equal n1 n2 then acc else acc + 1 in
  try (Some (List.fold2_exn nl1 nl2 ~init:0 ~f:ham))
  with
  | _ -> None;;
#+end_src

**** OCaml Hamming Solution Interface
#+name:ocaml-hamming-solution-interface
#+begin_src ocaml :tangle ocaml/hamming/hamming.mli :mkdirp yes
type nucleotide = A | C | G | T

(** Compute the hamming distance between the two lists. *)
val hamming_distance : nucleotide list -> nucleotide list -> int option
#+end_src

**** OCaml Hamming Tests
#+name:ocaml-hamming-tests
#+begin_src ocaml :tangle ocaml/hamming/test.ml :mkdirp yes
open Base
open OUnit2
open Hamming

let printer = function
| None -> "None"
| Some x -> Int.to_string x

let ae exp got _test_ctxt = assert_equal ~printer exp got

let dna_of_string s =
  let f = function
    | 'A' -> A
    | 'C' -> C
    | 'G' -> G
    | 'T' -> T
    | _   -> failwith "Big news! New nucleotide discovered" in
  String.to_list s |> List.map ~f

let hamdist a b = hamming_distance (dna_of_string a) (dna_of_string b)

let tests = [
   "empty strands" >::
      ae (Some 0) (hamdist "" "");
   "identical strands" >::
      ae (Some 0) (hamdist "A" "A");
   "long identical strands" >::
      ae (Some 0) (hamdist "GGACTGA" "GGACTGA");
   "complete distance in single nucleotide strands" >::
      ae (Some 1) (hamdist "A" "G");
   "complete distance in small strands" >::
      ae (Some 2) (hamdist "AG" "CT");
   "small distance in small strands" >::
      ae (Some 1) (hamdist "AT" "CT");
   "small distance" >::
      ae (Some 1) (hamdist "GGACG" "GGTCG");
   "small distance in long strands" >::
      ae (Some 2) (hamdist "ACCAGGG" "ACTATGG");
   "non-unique character in first strand" >::
      ae (Some 1) (hamdist "AAG" "AAA");
   "non-unique character in second strand" >::
      ae (Some 1) (hamdist "AAA" "AAG");
   "same nucleotides in different positions" >::
      ae (Some 2) (hamdist "TAG" "GAT");
   "large distance" >::
      ae (Some 4) (hamdist "GATACA" "GCATAA");
   "large distance in off-by-one strand" >::
      ae (Some 9) (hamdist "GGACGGATTCTG" "AGGACGGATTCT");
   "disallow first strand longer" >::
      ae None (hamdist "AATG" "AAA");
   "disallow second strand longer" >::
      ae None (hamdist "ATA" "AGTG");
]

let () =
  run_test_tt_main ("hamming tests" >::: tests)
#+end_src

**** OCaml Hamming Build
{{{heading(Makefile)}}}

#+name:ocaml-hamming-makefile
#+begin_src make :tangle ocaml/hamming/Makefile :mkdirp yesn
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean
#+end_src

{{{heading(Dune)}}}

#+name:ocaml-hamming-dune
#+begin_src ocaml :tangle ocaml/hamming/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+end_src

{{{heading(Dune Project)}}}

#+name:ocaml-hamming-dune-project
#+begin_src ocaml :tangle ocaml/hamming/dune-project :mkdirp yes
(lang dune 1.1)
#+end_src

**** OCaml Hamming Readme
#+name:ocaml-hamming-readme
#+begin_src markdown :tangle ocaml/hamming/README.md :mkdirp yes
# Hamming

Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

# Implementation notes

The Hamming distance is only defined for sequences of equal length. This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`. Consult [opam](https://opam.ocaml.org) website for instructions on how to install `opam` for your OS. Once `opam` is installed open a terminal window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run Ocaml code interactively. The easiest way to install it is via opam:
```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

The Calculating Point Mutations problem at Rosalind [http://rosalind.info/problems/hamm/](http://rosalind.info/problems/hamm/)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

**** OCaml Hamming Metadata
#+name:ocaml-hamming-metadata
#+begin_src js :tangle ocaml/hamming/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"hamming",
    "id":"0cdcb15b087c451a8e0e71ba614b6ca9",
    "url":"https://exercism.io/my/solutions/0cdcb15b087c451a8e0e71ba614b6ca9",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

* Bash Exercism Track
** Running the Tests
Run the tests with
: bats whatever_test.sh
or
: ./whatever_test.sh.

** Bash Resources
- [[http://mywiki.wooledge.org/BashGuide][Bash Guide]]
- [[http://mywiki.wooledge.org/BashFAQ][Bash FAQ]]
- [[https://mywiki.wooledge.org/BashPitfalls][Bash Pitfalls]]
- [[http://gnu.org/s/bash/manual][GNU Bash Manual]]
- [[http://wiki.bash-hackers.org/][Bash-Hackers Wiki]]
- [[http://www.shellcheck.net/][Shellcheck provides shell script guidelines and help]]

** Bash Hello World
*** Bash Hello World Readme
#+name:bash-hello-world-readme
#+begin_src markdown :tangle bash/hello-world/README.md :mkdirp yes
  # Hello World

  The classical introductory exercise. Just say "Hello, World!".

  ["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
  the traditional first program for beginning programming in a new language
  or environment.

  The objectives are simple:

  - Write a function that returns the string "Hello, World!".
  - Run the test suite and make sure that it succeeds.
  - Submit your solution and check it at the website.

  If everything goes well, you will be ready to fetch your first real exercise.

  # Welcome to Bash!

  Unlike many other languages here, bash is a bit of a special snowflake.
  If you are on a Mac or other unix-y platform, you almost definitely
  already have bash. In fact, anything you type into the terminal is
  likely going through bash.

  The downside to this is that there isn't much of a development
  ecosystem around bash like there is for other languages, and there are
  multiple versions of bash that can be frustratingly incompatible. Luckily
  we shouldn't hit those differences for these basic examples, and if you
  can get the tests to pass on your machine, we are doing great.

  ## Installation

  As mentioned above, if you are on a unix-like OS (Mac OS X, Linux, Solaris,
  etc), you probably already have bash.

  ## Testing

  As there isn't much of a bash ecosystem, there also isn't really a de
  facto leader in the bash testing area. For these examples we are using
  [bats](https://github.com/sstephenson/bats). You should be able to
  install it from your favorite package manager, on OS X with homebrew
  this would look something like this:

  ```
  $ brew install bats
  ==> Downloading
  https://github.com/sstephenson/bats/archive/v0.4.0.tar.gz
  ==> Downloading from
  https://codeload.github.com/sstephenson/bats/tar.gz/v0.4.0
  ########################################################################
  100.0%
  ==> ./install.sh /opt/boxen/homebrew/Cellar/bats/0.4.0
  🍺  /opt/boxen/homebrew/Cellar/bats/0.4.0: 10 files, 60K, built in 2
  seconds
  ```



  Run the tests with:

  ```bash
  bats hello_world_test.sh
  ```

  After the first test(s) pass, continue by commenting out or removing
  the `skip` annotations prepending other tests.

  ## Source

  This is an exercise to introduce users to using Exercism
  [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)


  ## External utilities
  `Bash` is a language to write scripts that works closely with various
  system utilities, like [`sed`](https://www.gnu.org/software/sed/),
  [`awk`](https://www.gnu.org/software/gawk/),
  [`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html)
  and even other programming languages, like
  [`Python`](https://www.python.org/).  This track does not restrict the
  usage of these utilities, and as long as your solution is portable
  between systems and does not require installing third party
  applications, feel free to use them to solve the exercise.

  For an extra challenge, if you would like to have a better
  understanding of the language, try to re-implement the solution in
  pure `Bash`, without using any external tools.

  ## Submitting Incomplete Solutions
  It's possible to submit an incomplete solution so you can see how
  others have completed the exercise.
#+end_src

*** Bash Hello World Scripts
{{{heading(Download)}}}
#+name:bash-hello-world-download
#+begin_src sh :results output
exercism download --exercise=hello-world --track=bash
#+end_src

#+RESULTS: bash-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/bash/hello-world

{{{heading(Submit)}}}
#+name:bash-hello-world-submit
#+begin_src sh :results output
exercism submit bash/hello-world/hello_world.sh
#+end_src

#+RESULTS: bash-hello-world-submit
:     https://exercism.io/my/solutions/dd8bfeb136eb49cc97042313a2ee2477

*** Bash Hello World Solution
#+name:bash-hello-world-solution
#+begin_src sh :tangle bash/hello-world/hello_world.sh :mkdirp yes
#!/usr/bin/env bash

# This is a bash script template in order to help you quick start any script.
# It contains some sensible defaults, you can learn more by visiting:
# https://google.github.io/styleguide/shell.xml
#
# /!\ Please remove all the comments when you use this on other exercises

# This option will make the script exit when there is an error
set -o errexit
# This option will make the script exit when it tries to use an unset variable
set -o nounset

main() {
  # A string variable containing only the FIRST argument passed to the script,
  # you can use input="$@" to get a string with ALL arguments
  # input=$1

  # Add your code here
  echo "Hello, World!"
}

# Calls the main function passing all the arguments to it via '$@'
# The argument is in quotes to prevent whitespace issues
main "$@"
#+end_src

{{{heading(Run Tests)}}}
#+name:bash-hello-world-run-tests
#+begin_src sh :dir bash/hello-world :results output :exports both
bats hello_world_test.sh
#+end_src

#+RESULTS: bash-hello-world-run-tests
: 1..1
: ok 1 Say Hi!

#+name:bash-hello-world-exercism-metadata
#+begin_src js :tangle bash/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"bash",
    "exercise":"hello-world",
    "id":"dd8bfeb136eb49cc97042313a2ee2477",
    "url":"https://exercism.io/my/solutions/dd8bfeb136eb49cc97042313a2ee2477",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+end_src

*** Bash Hello World Test
#+name:bash-hello-world-test
#+begin_src sh :tangle bash/hello-world/hello_world_test.sh
#!/usr/bin/env bash

@test "Say Hi!" {
  run bash hello_world.sh

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, World!" ]
}

#+end_src
** Bash Two Fer
*** Bash Two Fer Readme
#+name:bash-two-fer-readme
#+begin_src markdown :tangle bash/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

```text
"One for X, one for me."
```

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."



Run the tests with:

```bash
bats two_fer_test.sh
```

After the first test(s) pass, continue by commenting out or removing the `skip` annotations prepending other tests.

## Source

[https://en.wikipedia.org/wiki/Two-fer](https://en.wikipedia.org/wiki/Two-fer)


## External utilities
`Bash` is a language to write scripts that works closely with various system utilities,
like [`sed`](https://www.gnu.org/software/sed/), [`awk`](https://www.gnu.org/software/gawk/), [`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html) and even other programming languages, like [`Python`](https://www.python.org/).
This track does not restrict the usage of these utilities, and as long as your solution is portable
between systems and does not require installing third party applications, feel free to use them to solve the exercise.

For an extra challenge, if you would like to have a better understanding of the language,
try to re-implement the solution in pure `Bash`, without using any external tools.

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Bash Two Fer Scripts
**** Bash Two Fer Download and Submit
#+name:bash-two-fer-download
#+begin_src sh :results output
exercism download --exercise=two-fer --track=bash
#+end_src

#+RESULTS: bash-two-fer-download
: /Users/pine/Dev/Programming/Languages/Exercism/bash/two-fer

#+name:bash-two-fer-submit
#+begin_src sh :results output
exercism submit bash/two-fer/two_fer.sh
#+end_src

#+RESULTS: bash-two-fer-submit
:     https://exercism.io/my/solutions/e55799ac20db44a4a2d544a1073c1ab6

*** Bash Two Fer Code
**** Bash Two Fer Solution
#+name:bash-two-fer-solution
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle bash/two-fer/two_fer.sh :mkdirp yes
two_fer() {
    input=${1:-you}
    echo "One for $input, one for me."
}

two_fer "$@"
#+end_src

{{{heading(Run Tests)}}}
#+name:bash-two-fer-run-tests
#+begin_src sh :dir bash/two-fer :results output :exports both
bats ./two_fer_test.sh
#+end_src

#+RESULTS: bash-two-fer-run-tests
: 1..3
: ok 1 no name given
: ok 2 a name given
: ok 3 another name given

#+name:bash-two-fer-exercism-metadata
#+begin_src js :tangle bash/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"bash",
    "exercise":"two-fer",
    "id":"e55799ac20db44a4a2d544a1073c1ab6",
    "url":"https://exercism.io/my/solutions/e55799ac20db44a4a2d544a1073c1ab6",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Bash Two Fer Test
#+name:bash-two-fer-test
#+header: :mkdirp yes :shebang "#!/usr/bin/env bats"
#+begin_src sh :tangle bash/two-fer/two_fer_test.sh

@test "no name given" {
  #skip
  run bash two_fer.sh
  [ "$status" -eq 0 ]
  [ "$output" == "One for you, one for me." ]
}

@test "a name given" {
  #skip
  run bash two_fer.sh Alice
  [ "$status" -eq 0 ]
  [ "$output" == "One for Alice, one for me." ]
}

@test "another name given" {
  #skip
  run bash two_fer.sh Bob
  [ "$status" -eq 0 ]
  [ "$output" == "One for Bob, one for me." ]
}
#+end_src

#+BEGIN_SRC sh :dir bash/two-fer :results output
./two_fer_test.sh
#+END_SRC

#+RESULTS:
: 1..3
: ok 1 no name given
: ok 2 a name given
: ok 3 another name given
** Bash Error Handling
{{{heading(Introduction)}}}

Implement various kinds of error handling and resource management.

An important point of programming is how to handle errors and close resources
even if errors occur.

This exercise requires you to handle various errors.  Because error handling is
rather programming language specific you'll have to refer to the tests for your
track to see what's exactly required.

Run the tests with:

: bats error_handling_test.sh

After the first test(s) pass, continue by commenting out or removing the skip
annotations prepending other tests.

{{{heading(External Utilities)}}}

Bash is a language to write scripts that works closely with various system
utilities, like ~sed~, ~awk~, ~date~ and even other programming languages, like
Python.  This track does not restrict the usage of these utilities, and as long
as your solution is portable between systems and does not require installing
third party applications, feel free to use them to solve the exercise.

For an extra challenge, if you would like to have a better understanding of the
language, try to re-implement the solution in pure Bash, without using any
external tools.
*** Bash Error Handling Readme
#+namd:bash-error-handling-readme
#+begin_src markdown :tangle bash/error-handling/README.md :mkdirp yes
  # Error Handling

  Implement various kinds of error handling and resource management.

  An important point of programming is how to handle errors and close
  resources even if errors occur.

  This exercise requires you to handle various errors. Because error handling
  is rather programming language specific you'll have to refer to the tests
  for your track to see what's exactly required.


  Run the tests with:

  ```bash
  bats error_handling_test.sh
  ```

  After the first test(s) pass, continue by commenting out or removing
  the `skip` annotations prepending other tests.



  ## External utilities
  `Bash` is a language to write scripts that works closely with various
  system utilities, like [`sed`](https://www.gnu.org/software/sed/),
  [`awk`](https://www.gnu.org/software/gawk/),
  [`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html)
  and even other programming languages, like
  [`Python`](https://www.python.org/).  This track does not restrict the
  usage of these utilities, and as long as your solution is portable
  between systems and does not require installing third party
  applications, feel free to use them to solve the exercise.

  For an extra challenge, if you would like to have a better understanding of the language,
  try to re-implement the solution in pure `Bash`, without using any external tools.

  ## Submitting Incomplete Solutions
  It's possible to submit an incomplete solution so you can see how
  others have completed the exercise.
#+end_src
*** Bash Error Handling Download and Submit Scripts
**** Bash Error Handling Download Script
#+name:bash-error-handling-download
#+begin_src sh :results output
exercism download --exercise=error-handling --track=bash
#+end_src

#+RESULTS: bash-error-handling-download
: /usr/local/dev/programming/Languages/Exercism/bash/error-handling

**** Bash Error Handling Submit Script
#+name:bash-error-handling-submit
#+begin_src sh :results output
exercism submit bash/error-handling/error_handling.sh
#+end_src

#+RESULTS: bash-error-handling-submit
:     https://exercism.io/my/solutions/a39a7939b2ae4e4fbe9d0a68740a46f4
: 

#+name:bash-error-handling-exercism-metadata
#+begin_src js :tangle bash/error-handling/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"bash",
    "exercise":"error-handling",
    "id":"a39a7939b2ae4e4fbe9d0a68740a46f4",
    "url":"https://exercism.io/my/solutions/a39a7939b2ae4e4fbe9d0a68740a46f4",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Bash Error Handling Code
n#+name:bash-error-handling-code
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle bash/error-handling/error_handling.sh :mkdirp yes
  set -o errexit

  main() {
      usage="Usage: ./error_handling <greetee>"
      (( $# != 1 )) && { echo $usage; exit 1; }

      input="$1"
      echo "Hello, $input"
  }

  main "$@"
#+end_src

{{{heading(Test the Code)}}}

#+name:bash-error-handling-code-test
#+begin_src sh :dir bash/error-handling :results output :exports both
bats error_handling_test.sh
#+end_src

#+RESULTS: bash-error-handling-code-test
: 1..5
: ok 1 correct arguments
: ok 2 one long argument
: ok 3 incorrect arguments
: ok 4 print usage banner with no value given
: ok 5 empty argument

*** Bash Error Handling Tests
#+name:bash-error-handling-tests
#+begin_src sh :tangle bash/error-handling/error_handling_test.sh :mkdirp yes
#!/usr/bin/env bash

@test "correct arguments" {
  #skip
  run bash error_handling.sh Alice

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, Alice" ]
}

@test "one long argument" {
  #skip
  run bash error_handling.sh "Alice and Bob"

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, Alice and Bob" ]
}

@test "incorrect arguments" {
  #skip
  run bash error_handling.sh Alice Bob

  [ "$status" -eq 1 ]
  [ "$output" = "Usage: ./error_handling <greetee>" ]
}

@test "print usage banner with no value given" {
  #skip
  run bash error_handling.sh

  [ "$status" -eq 1 ]
  [ "$output" = "Usage: ./error_handling <greetee>" ]
}

@test "empty argument" {
  #skip
  run bash error_handling.sh ""

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, " ]
}
#+end_src
* Emacs Lisp Track
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][Emacs manual]] on the Web
- [[https://www.emacswiki.org][Emacs Wiki]]

Emacs Lisp is the extension language of the Emacs text editor.  You can easily
create you own extensions, which include preference files, but also
full-fledged applications that use Emacs as a running environment in a fully
integrated way.

{{{heading(About Emacs Lisp)}}}

Emacs Lisp is the language at the core of Emacs, the iconic text editor that is
at the beginning of the Free Software movement.  Emacs is made of more than a
million lines of Emacs Lisp, and all the applications that run inside Emacs
(IDEs for various programming languages, games, planners, etc.) are written in
Emacs Lisp.  User preferences are also lists of Emacs Lisp expressions.

Knowing Emacs Lisp is the first step into Lisp, the second oldest programming
language still used (just turned 60 in 2018) and also a language that still
influences so many other programming languages.

** About Emacs Lisp for Exercism
*** Running the Tests
Elisp tests are run using ~ERT~, an Emacs Lisp library for regression/unit
testing.  Tests can be run several ways:

1. Interactively and individually, with ~M-x ert RET test-name RET~
2. Interactively and all at once, with ~M-x ert RET t RET~
3. From the terminal, in batch mode, with
   : emacs -batch -l ert -l my-test.el -f ert-run-tests-batch-and-exit
4. Other options can be found in the docs, ~C-h i m ert RET~


Interactive testing is great while you're working on an exercise, but batch
mode testing is preferable for when you want to check that an exercise is ready
for submission.  The above command is a bit unwieldy, so if you like:

1. Create a file on your ~$PATH~ called ~ert-run~
2. The contents of the file should be as follows:
   #+begin_src emacs-lisp
   #!/usr/bin/env bash
   emacs -batch -l ert -l $1 -f ert-run-tests-batch-and-exit
   #+end_src
3. Make the file executable with ~chmod +x ert-run~


You should be able to simply call ~ert-run exercise-test.el~ and run the tests
in batch mode.

*** Working on Exercises
Since Emacs is, itself, an elisp interpreter, your working code is always in
its native execution environment.  You can evaluate any form by pressing ~C-x
e~ at the end of the form, or a selection with ~M-x eval-region~ or the whole
buffer with ~M-x eval-buffer~.  This can be extremely useful for quickly
debugging your code.

*** Suggestions on Developing Code
Since both your code and tests are valid elisp, it is suggested to work with
your exercise code in a buffer pane side-by side with its test, like so:

Split the frame vertically with ~C-x 3~, switch to the new window with ~C-x o~,
and open the file with ~C-x C-f /path/to/file~.

** Emacs Lisp Hello World
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** Emacs Lisp Hello World Readme
#+name:elisp-hello-world-readme
#+begin_src markdown :tangle elisp/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.
## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src
*** Emacs Lisp Hello World Scripts

**** Emacs Lisp Hello World Download
#+elisp-hello-world-download
#+begin_src sh :results output
exercism download --exercise=hello-world --track=elisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Languages/Exercism/elisp/hello-world

**** Emacs Lisp Hello World Submit
#+name:elisp-hello-world-submit
#+begin_src sh :results output
exercism submit elisp/hello-world/hello-world.el
#+end_src

#+RESULTS: elisp-hello-world-submit
:     https://exercism.io/my/solutions/894f5e31a6fd4db3a967b6a19580a171

#+name:elisp-hello-world-exercism-metadata
#+begin_src js :tangle elisp/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"elisp",
    "exercise":"hello-world",
    "id":"894f5e31a6fd4db3a967b6a19580a171",
    "url":"https://exercism.io/my/solutions/894f5e31a6fd4db3a967b6a19580a171",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+end_src

*** Emacs Lisp Hello World Code
#+name:elisp-hello-world-code
#+begin_src emacs-lisp :tangle elisp/hello-world/hello-world.el :mkdirp yes
  ;;; hello-world.el --- Hello World Exercise (exercism)

  ;;; Commentary:

  ;;; Code:
  (defun hello ()
    (print "Hello, World!"))

  (provide 'hello-world)
  ;;; hello-world.el ends here
#+end_src

{{{heading(Test the Code)}}}

#+name:elisp-hello-world-test-code
#+begin_src sh :dir elisp/hello-world :results output :exports both
emacs -batch -l ert -l hello-world-test.el -f ert-run-tests-batch-and-exit
#+end_src

#+RESULTS: elisp-hello-world-test-code
: 
: "Hello, World!"

*** Emacs Lisp Hello World Test
#+name:elisp-hello-world-test
#+begin_src emacs-lisp :tangle elisp/hello-world/hello-world-test.el :mkdirp yes
;;; hello-world-test.el --- Tests for Hello World (exercism)

;;; Commentary:
;; Common test data version: 1.1.0 be3ae66

;;; Code:

(load-file "hello-world.el")

(ert-deftest hello-world-test ()
  (should (equal (hello) "Hello, World!")))

(provide 'hello-world-test)

;;; hello-world-test.el ends here
#+end_src

** Emacs Lisp Two Fer
Two-fer or 2-fer is short for two for one. One for you and one for me.

: "One for X, one for me."

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

*** Emacs Lisp Two Fer Readme
#+name:elisp-two-fer-readme
#+begin_src markdown :tangle elisp/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

```text
"One for X, one for me."
```

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

## Source

[https://en.wikipedia.org/wiki/Two-fer](https://en.wikipedia.org/wiki/Two-fer)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Emacs Lisp Two Fer Scripts

**** Emacs Lisp Two Fer Download
#+name:elisp-two-fer-download
#+begin_src sh :results output
exercism download --exercise=two-fer --track=elisp
#+end_src

#+RESULTS: elisp-two-fer-download
: /Users/pine/Dev/Programming/Languages/Exercism/elisp/two-fer

**** Emacs Lisp Two Fer Submit
#+name:elisp-two-fer-submit
#+begin_src sh :result output
exercism submit elisp/two-fer/two-fer.el
#+end_src

#+RESULTS: elisp-two-fer-submit
: https://exercism.io/my/solutions/65d4cc560fef45a695f56a2a1609b9e1

*** Emacs Lisp Two Fer Code
**** Emacs Lisp Two Fer Solution
#+name:elisp-two-fer-solution
#+begin_src emacs-lisp :tangle elisp/two-fer/two-fer.el :mkdirp yes
;;; two-fer.el --- Two-fer Exercise (exercism)

;;; Commentary: Two-fer or 2-fer is short for two for one. One for you
;;; and one for me.<

;;; Code:
(defun two-fer (&optional name)
  "Prints a two-fer message, possibly using 'you' if argument is missing."
  (format "One for %s, one for me." (or name "you")))

(provide 'two-fer)
;;; two-fer.el ends here
#+end_src

#+name:elisp-two-fer-run-tests
#+begin_src sh :dir elisp/two-fer :results output :exports both
emacs -batch -l ert -l two-fer-test.el -f ert-run-tests-batch-and-exit 2>&1
#+end_src

#+name:elisp-two-fer-exercism-metadata
#+begin_src js :tangle elisp/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"elisp",
    "exercise":"two-fer",
    "id":"65d4cc560fef45a695f56a2a1609b9e1",
    "url":"https://exercism.io/my/solutions/65d4cc560fef45a695f56a2a1609b9e1",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Emacs Lisp Two Fer Tests
#+name:elisp-two-fer-tests
#+begin_src emacs-lisp :tangle elisp/two-fer/two-fer-test.el :mkdirp yes
;;; two-fer-test.el --- Tests for Two-fer (exercism)

;;; Commentary:
;; Common test data version: 1.2.0 4fc1acb

;;; Code:

(load-file "two-fer.el")

(ert-deftest no-name-given ()
  (should (equal (two-fer) "One for you, one for me.")))

(ert-deftest a-name-given ()
  (should (equal (two-fer "Alice") "One for Alice, one for me.")))

(ert-deftest another-name-given ()
  (should (equal (two-fer "Bob") "One for Bob, one for me.")))

(provide 'two-fer-test)

;;; two-fer-test.el ends here

#+end_src

** Emacs Lisp Bob
Bob is a lackadaisical teenager.  In conversation, his responses are very
limited.

Bob answers 'Sure.' if you ask him any question, such as "How are you?".

He answers 'Whoa, chill out!' if you YELL AT HIM (in all capitals).

He answers 'Calm down, I know what I'm doing!' if you yell a question at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Implement a function response-for that takes a string as argument and returns
the appropriate response.

*** Emacs Lisp Bob Readme
#+name:elisp-bob-readme
#+begin_src markdown :tangle elisp/bob/README.md :mkdirp yes
# Bob

Bob is a lackadaisical teenager. In conversation, his responses are
very limited.

Bob answers 'Sure.' if you ask him any question, such as "How are
you?".

He answers 'Whoa, chill out!' if you YELL AT HIM (in all capitals).

He answers 'Calm down, I know what I'm doing!' if you yell a question
at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Implement a function `response-for` that takes a string as argument
and returns the appropriate response.

## Source

Inspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to
Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=06](http://pine.fm/LearnToProgram/?Chapter=06)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how
others have completed the exercise.
#+end_src

*** Emacs Lisp Bob Scripts
**** Emacs Lisp Bob Download Script
#+name:elisp-bob-download-script
#+begin_src sh
exercism download --exercise=bob --track=elisp
#+end_src

#+RESULTS: elisp-bob-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/elisp/bob

**** Emacs Lisp Bob Submit Script
#+name:elisp-bob-submit-script
#+begin_src sh
exercism submit elisp/bob/bob.el
#+end_src

#+RESULTS: elisp-bob-submit-script
: https://exercism.io/my/solutions/938923eec9a843fb88ce497bc1998bca

*** Emacs Lisp Bop Source and Tests
**** Emacs Lisp Bob Source
Two things to note:

   #+cindex:@code{case-fold-search}
1. Eliminate global state change by localizing variable ~case-fold-search~
   being set to ~nil~.

   #+cindex:@code{string-match}
   #+cindex:@code{string-match-p}
   #+cindex:@code{match-data}
   #+cindex:@code{save-match-data}
2. Eliminate global state change of ~match-data~ by using ~string-match-p~ in
   this case since ~match-data~ is not being used.  If ~match-data~ were being
   used, then consider using the function ~save-match-data~.

#+name:elisp-bob-source
#+begin_src emacs-lisp :tangle elisp/bob/bob.el :mkdirp yes
  ;;; bob.el --- Bob exercise (exercism)

  ;;; Commentary:Function to elicit correct response for Bob given some
  ;;; statement or question.

  ;;; Code:
  (defun response-for (response)
    "Evaluate input statement to determinte Bob's correct response."
    (let ((case-fold-search nil))
      (cond ((string-match-p "^[[:upper:]\s]+\\?$" response) "Calm down, I know what I'm doing!")
            ((string-match-p "\\`[^\n]+\\?\s*\\'" response) "Sure.")
            ((string-match-p "\\`[[:space:]]*\\'" response) "Fine. Be that way!")
            ((string-match-p ".[[:upper:]].*!$\\|\\`[^[:lower:][:digit:]]+\\'" response) "Whoa, chill out!")
            (t "Whatever."))))

  (provide 'bob)
  ;;; bob.el ends here
#+end_src

{{{heading(Test Results)}}}

#+name:elisp-bob-run-tests
#+begin_src sh :dir elisp/bob :results output :exports both
emacs -batch -l ert -l bob-test.el -f ert-run-tests-batch-and-exit 2> output.log
cat output.log
#+end_src

#+name:elisp-bob-exercism-metadata.js
#+begin_src js :tangle elisp/bob/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"elisp",
    "exercise":"bob",
    "id":"938923eec9a843fb88ce497bc1998bca",
    "url":"https://exercism.io/my/solutions/938923eec9a843fb88ce497bc1998bca",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Emacs Lisp Bob Tests
#+name:elisp-bob-tests
#+begin_src emacs-lisp :tangle elisp/bob/bob-test.el
;;; bob-test.el --- ERT tests for Bob (exercism)

;;; Commentary:
;; Common test data version: 1.2.0 6dc2014

;;; Code:

(load-file "bob.el")


(ert-deftest responds-to-stating-something ()
  (should (string= "Whatever." (response-for "Tom-ay-to, tom-aaaah-to."))))

(ert-deftest responds-to-shouting ()
  (should
   (string= "Whoa, chill out!" (response-for "WATCH OUT!"))))

(ert-deftest responds-to-shouting-gibberish ()
  (should
   (string= "Whoa, chill out!" (response-for "FCECDFCAAB"))))

(ert-deftest responds-to-asking-a-question ()
  (should
   (string= "Sure." (response-for "Does this cryogenic chamber make me look fat?"))))

(ert-deftest responds-to-asking-a-numeric-question ()
  (should
   (string= "Sure." (response-for "You are, what, like 15?"))))

(ert-deftest responds-to-asking-gibberish ()
  (should
   (string= "Sure." (response-for "fffbbcbeab?"))))

(ert-deftest responds-to-talking-forcefully ()
  (should
   (string= "Whatever." (response-for "Let's go make out behind the gym!"))))

(ert-deftest responds-to-using-acronyms-in-regular-speech ()
  (should
   (string= "Whatever." (response-for "It's OK if you don't want to go to the DMV."))))

(ert-deftest responds-to-forceful-question ()
  (should
   (string= "Calm down, I know what I'm doing!" (response-for "WHAT THE HELL WERE YOU THINKING?"))))

(ert-deftest responds-to-shouting-numbers ()
  (should
   (string= "Whoa, chill out!" (response-for "1, 2, 3, GO!"))))

(ert-deftest responds-to-only-numbers ()
  (should
   (string= "Whatever." (response-for "1, 2, 3"))))

(ert-deftest responds-to-questions-with-only-numbers ()
  (should
   (string= "Sure." (response-for "4?"))))

(ert-deftest responds-to-shouting-with-special-chars ()
  (should
   (string= "Whoa, chill out!" (response-for "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"))))

(ert-deftest responds-to-shouting-with-no-exclamation-mark ()
  (should
   (string= "Whoa, chill out!" (response-for "I HATE YOU"))))

(ert-deftest responds-to-statement-containing-question-mark ()
  (should
   (string= "Whatever." (response-for "Ending with ? means a question."))))

(ert-deftest responds-to-non-letters-with-question ()
  (should
   (string= "Sure." (response-for ":) ?"))))

(ert-deftest responds-to-prattling-on ()
  (should
   (string= "Sure." (response-for "Wait! Hang on. Are you going to be OK?"))))

(ert-deftest responds-to-silence ()
  (should
   (string= "Fine. Be that way!" (response-for ""))))

(ert-deftest responds-to-prolonged-silence ()
  (should
   (string= "Fine. Be that way!" (response-for "    "))))

(ert-deftest responds-to-alternate-silence ()
  (should
   (string= "Fine. Be that way!" (response-for "\t\t\t\t\t\t\t\t\t\t"))))

(ert-deftest responds-to-multiple-line-question ()
  (should
   (string= "Whatever." (response-for "\nDoes this cryogenic chamber make me look fat?\nno"))))

(ert-deftest responds-to-starting-with-whitespace ()
  (should
   (string= "Whatever." (response-for "         hmmmmmmm..."))))

(ert-deftest responds-to-ending-with-whitespace ()
  (should
   (string= "Sure." (response-for "Okay if like my  spacebar  quite a bit?   "))))

(ert-deftest responds-to-other-whitespace ()
  (should
   (string= "Fine. Be that way!" (response-for "\n\r \t"))))

(ert-deftest responds-to-non-question-ending-with-whitespace ()
  (should
   (string= "Whatever." (response-for "This is a statement ending with whitespace      "))))

(provide 'bob-test)
;;;bob-test.el ends here

#+end_src

** Emacs Lisp Hamming
*** Emacs Lisp Hamming Introduction
#+cindex:hamming difference
Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or copying of a
nucleic acid, in particular DNA.  Because nucleic acids are vital to cellular
functions, mutations tend to cause a ripple effect throughout the cell.
Although mutations are technically mistakes, a very rare mutation may equip the
cell with a beneficial attribute.  In fact, the macro effects of evolution are
attributable by the accumulated result of beneficial microscopic mutations over
many generations.

The simplest and most common type of nucleic acid mutation is a point mutation,
which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands taken
from different genomes with a common ancestor, we get a measure of the minimum
number of point mutations that could have occurred on the evolutionary path
between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

#+begin_example
GAGCCTACTAACGGGAT
CATCGTAATGACGGCCT
^ ^ ^  ^ ^    ^^
#+end_example

The Hamming distance between these two DNA strands is 7.

*** Emacs Lisp Hamming Implementation Notes
The Hamming distance is only defined for sequences of equal length.  This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

{{{heading(Source)}}}

The Calculating Point Mutations problem at [[http://rosalind.info/problems/hamm/][Rosalind]].

*** Emacs Lisp Hamming Scripts
**** Emacs Lisp Hamming Download Script
#+name:elisp-hamming-download-script
#+begin_src sh
exercism download --exercise=hamming --track=elisp
#+end_src

#+RESULTS: elisp-hamming-download-script
: /usr/local/dev/programming/Languages/Exercism/elisp/hamming

**** Emacs Lisp Hamming Submit Script
#+name:elisp-hamming-submit-script
#+begin_src sh
exercism submit elisp/hamming/hamming.el
#+end_src

#+RESULTS: elisp-hamming-submit-script
: https://exercism.io/my/solutions/fed4aef682fe4010a9d5455d9c76bc22

*** Emacs Lisp Hamming Readme
#+name:elisp-hamming-readme
#+begin_src markdown :tangle elisp/hamming/README.md :mkdirp yes
# Hamming

Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

# Implementation notes

The Hamming distance is only defined for sequences of equal length. This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

## Source

The Calculating Point Mutations problem at Rosalind [http://rosalind.info/problems/hamm/](http://rosalind.info/problems/hamm/)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Emacs Lisp Hamming Source and Tests Code
**** Emacs Lisp Hamming Solution Code
Note that in order for "ert" to work with the ~seq-count~ and ~seq-mapn~
functions, the ~seq~ library must be loaded first.

#+name:elisp-hamming-hamming.el
#+begin_src emacs-lisp :tangle elisp/hamming/hamming.el :mkdirp yes
  ;;; hamming.el --- Hamming (exercism)

  ;;; Commentary:

  ;;; Code:

(require 'seq)

(defun calc-hamming (str1 str2)
  "Functionally calculate the hamming distance between STR1 and STR2."
  (- (length str1)
     (seq-count #'identity (seq-mapn #'char-equal str1 str2))))

(defun hamming-distance (str1 str2)
  "Calculate the hamming distance between two strings, STR1 and STR2."
  (if (equal (length str1) (length str2))
      (calc-hamming str1 str2)
    (error "Strings of unequal length")))

(provide 'hamming)
  ;;; hamming ends here
#+end_src

#+name:elisp-hamming-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle elisp/hamming/.exercism/metadata.json
  {
      "track":"elisp",
      "exercise":"hamming",
      "id":"fed4aef682fe4010a9d5455d9c76bc22",
      "url":"https://exercism.io/my/solutions/fed4aef682fe4010a9d5455d9c76bc22",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

***** Mentor Comment
Can you try to implement calc-hamming with seq-mapn and seq-count?

Example uses of them:

#+begin_src emacs-lisp
(seq-mapn #'= "123" "321")
;; => (nil t nil)

(seq-count #'identity '(nil t nil t nil))
;; => 2
#+end_src

***** Review of ~seq-mapn~
#+cindex:@code{seq-mapn}
~seq-mapn~ FUNCTION &rest SEQUENCES

This function returns the result of applying FUNCTION to each element of
SEQUENCES.  The arity of FUNCTION must match the number of sequences.  Mapping
stops at the end of the shortest sequence, and the returned value is a list.

***** Review of ~seq-count~
#+cindex:@code{seq-count}
~seq-count~ PREDICATE SEQUENCE

This function returns the number of elements in SEQUENCE for which PREDICATE
returns non-‘nil’.

***** Review of ~identity~
#+cindex:@code{identity}
~identity~ ARG

This function returns ARG and has no side effects.

**** Emacs Lisp Test Code
#+name:elisp-hamming-test-code
#+begin_src emacs-lisp :tangle elisp/hamming/hamming-test.el
;;; hamming-test.el --- Tests for hamming (exercism)

;;; Commentary:
;; Common test data version: 2.0.1 f79dfd7

;;; Code:

(load-file "hamming.el")

(declare-function hamming-distance "hamming.el")

(ert-deftest empty-strands ()
  (should (= 0 (hamming-distance "" ""))))

(ert-deftest identical-strands ()
  (should (= 0 (hamming-distance "A" "A"))))

(ert-deftest long-identical-strands ()
  (should (= 0 (hamming-distance "GGACTGA" "GGACTGA"))))

(ert-deftest complete-distance-in-single-nucleotide-strands ()
  (should (= 1 (hamming-distance "A" "G"))))

(ert-deftest complete-distance-in-small-strands ()
  (should (= 2 (hamming-distance "AG" "CT"))))

(ert-deftest small-distance-in-small-strands ()
  (should (= 1 (hamming-distance "AT" "CT"))))

(ert-deftest small-distance ()
  (should (= 1 (hamming-distance "GGACG" "GGTCG"))))

(ert-deftest small-distance-in-long-strands ()
  (should (= 2 (hamming-distance "ACCAGGG" "ACTATGG"))))

(ert-deftest non-unique-character-in-first-strand ()
  (should (= 1 (hamming-distance "AAA" "AAG"))))

(ert-deftest same-nucleotides-in-different-positions ()
  (should (= 2 (hamming-distance "TAG" "GAT"))))

(ert-deftest large-distance ()
  (should (= 4 (hamming-distance "GATACA" "GCATAA"))))

(ert-deftest large-distance-in-off-by-one-strand ()
  (should (= 9 (hamming-distance "GGACGGATTCTG" "AGGACGGATTCT"))))

(ert-deftest disallow-first-strand-longer ()
  (should-error (hamming-distance "AATG" "AAA")))

(ert-deftest disallow-second-strand-longer ()
  (should-error (hamming-distance "ATA" "AGTG")))

(provide 'hamming-test)
;;; hamming-test.el ends here

#+end_src

**** Emacs Lisp Hamming Run Tests
#+name:elisp-hamming-run-tests
#+header: :shebang "#!/usr/bin/env bash" :dir elisp/hamming
#+header: :results output :exports results
#+begin_src sh :tangle elisp/hamming/hamming-test.sh
emacs -batch -l ert -l hamming-test.el -f ert-run-tests-batch-and-exit
#+end_src

#+RESULTS: elisp-hamming-run-tests

* Exercism Makefile
#+name:Exercism-Makefile
#+begin_src makefile :tangle Makefile
BASE_DIR := $(shell cat ~/.config/exercism/user.json | sed -n '/workspace/ s///p' | tr -d '": ')
LANGUAGES = javascript typescript python perl5 ocaml bash elisp
HTML_SRC = *.html
TEXINFO_SRC = *.{texi,info,pdf}
DVI_SRC = *.{aux,log,toc}

.phony : texinfo-clean
texinfo-clean :
	cd $(BASE_DIR) && rm -vrf $(TEXINFO_SRC)

.phony : html-clean
html-clean :
	cd $(BASE_DIR) && rm -vrf $(HTML_SRC)

.phony : dist-clean
dist-clean :
	cd $(BASE_DIR) && rm -vrf $(LANGUAGES) README.md $(DVI_SRC)

.phony : world-clean
world-clean : dist-clean html-clean texinfo-clean
	rm Makefile

#+end_src

* Export Settings                                                  :noexport:
** Options
#+options: H:4
#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:t tex:t
** HTML Export
#+html_doctype: html5
#+html_container: div
#+description:Exercises from Exercism.io Python language
#+keywords:exercism.io exercises Python
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head:
#+html_head_extra:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.2.2)
#+latex_header:
** TEXINFO Export                                                 :noexport:
#+TEXINFO_FILENAME:Exercism.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:Languages
#+TEXINFO_DIR_TITLE:Exercism
#+TEXINFO_DIR_DESC:Learning new languages through exercises
#+TEXINFO_PRINTED_TITLE:Exercism Exercises
** MACROS                                                         :noexport:
#+macro: heading @@texinfo:@heading @@$1
#+macro: subheading @@texinfo:@subheading @@$1
* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+[dD]ate:Last updated %:y-%02m-%02d %02H:%02M$"
# End:

# -*- mode:org; fill-column:79; -*-
#+Title:Exercism Exercises
#+Author:Pinecone062
#+Date:Last updated 2020-12-06 21:53
#+Macro: version Version 0.5.42
{{{title}}} {{{version}}} {{{date}}}
* Exercism Home
:PROPERTIES:
:unnumbered: t
:END:
- https://exercism.io
- https://github.com/exercism

** Exercism Readme
#+name:Exercism-Readme
#+BEGIN_SRC txt :tangle README.md
  # Welcome to Exercism

  This is the central point of contact for Exercism.

  ## Where to open issues

  The project is divided across many repositories.

  #### The website or product

  If you have any issues or questions regarding **the website
  (https://exercism.io)** please [open an issue in this
  repository](https://github.com/exercism/exercism/issues). To report
  errors in the website copy or submit fixes for typos or other
  improvements, please see the
  [exercism/website-copy](https://github.com/exercism/website-copy/issues)
  repository.

  #### The Command-Line Client (CLI)

  For problems with the **Command-Line Client (CLI)**, open an issue in
  [exercism/cli](https://github.com/exercism/cli/issues).

  #### Exercises in a particular programming language

  The exercises are all in separate, language-specific
  repositories. These repositories are tagged with the topic
  [`#exercism-track`](https://github.com/search?q=topic%3Aexercism-track+org%3Aexercism&type=Repositories). From
  there, search for the track (programming language) you are
  participating in.

  ,**Unsure? Open your issue here**

  If you aren't sure where to open it, then pick this repository. It's
  as good a starting point as any!

  ## Feeling uncomfortable?

  If you need to report a code of conduct violation, please email us at team@exercism.io.

  ## Where to find the code

  The code for the website lives in [exercism/website](http://github.com/exercism/website).

  The code for the old website is in this repository, in the
  [v1.exercism.io](https://github.com/exercism/exercism/tree/v1.exercism.io)
  branch.

  ## Who's behind Exercism?

  Read about our Team on the site: https://exercism.io/team
#+end_src

** Exercism CLI
- https://github.com/exercism/cli

To install manually, download the appropriate version of exercism based on your
processor architecture at the [[https://github.com/exercism/cli/releases/latest][releases page]], then extract the archive and put
the binary in your path.

Check the installed version with:

#+BEGIN_SRC sh :results output :exports both
exercism version
#+END_SRC

#+RESULTS:
: exercism version 3.0.11

In order to configure the CLI, paste in the following text into your terminal:
: exercism configure --token=b4b5ab41-b448-4762-a5ce-452ccd2eff08

 You should see a notification from the CLI that a configuration file has been
 written.

#+begin_src txt
You have configured the Exercism command-line client:

Config dir:                       ~/.config/exercism
Token:         (-t, --token)      b4b5ab41-b448-4762-a5ce-452ccd2eff08
Workspace:     (-w, --workspace)  <path-to>/Exercism
API Base URL:  (-a, --api)        https://api.exercism.io/v1
#+end_src

** Exercism Tangle
This code extracts all of the Exercism files to disk upon Export.
#+name:exercism-tangle
#+BEGIN_SRC emacs-lisp :results output :exports both
(org-babel-tangle-file "Exercism.org")
#+END_SRC

* JavaScript Exercism Track
[[file:resources/svg/nodejs-new-pantone-black.svg]]

- https://exercism.io/my/tracks/javascript


This track relies  on ~NodeJS~ throughout to provide a  runtime for JavaScript.
This means  that we assume  all execution of  JavaScript on your  computer will
happen using ~NodeJS~.

The  =JavaScript= Exercism  Track runs  via ~NodeJS~  and all  dependencies are
installed via [[https://yarnpkg.com][Yarn]].

- [[https://nodejs.org/en/][~NodeJS~]] :: a  JavaScript runtime built on Chrome's V8  JavaScript engine; it
  is an asynchronous event-driven JavaScript runtime designed to build scalable
  network  applications. It  presents  an  event loop  as  a runtime  construct
  instead  of  as a  library.  ~NodeJS~  simply  enters  the event  loop  after
  executing the input  script. ~NodeJS~ exits the event loop  when there are no
  more callbacks to perform.
  - LTS version :: currently 12.19.0
  - Current version :: currently 14.14.0
  - Installation using MacPorts :: =port install nodejs<major-version>=

- ~Yarn~ :: a package  manager that doubles down as project  manager. Yarn is a
  package manager for your code. It allows you to use and share code with other
  developers from around  the world. Code is shared through  something called a
  package.  A  package  contains  all  the  code being  shared  as  well  as  a
  package.json file (called a manifest) which describes the package.

** JavaScript Requires Node.js and Yarn

*** Node.js
 #+header: :results output :exports results
 #+begin_src sh
 node=$(which node)
 [[ -z $node ]] \
   && { \
     echo "Node.js was not found";
     echo "Install Node.js before proceeding.";
     exit 0;
   } || { \
     echo "Found Node.js";
     node -v;
   }
 #+end_src

*** Yarn
#+header: :results output :exports results
#+begin_src sh
yarn=$(which yarn)
[[ -z $yarn ]] \
  && { \
       echo "Yarn was not found.";
       echo "Install Yarn before proceeding.";
     } || { \
       echo "Found Yarn.";
       yarn --version;
     }
#+end_src

** Required Tools for the JavaScript Track
Each assignment needs some tools to run the tests.  *NOTE* that they can be
installed by running the following command from within each assignment
directory:

: yarn install

- [[https://facebook.github.io/jest/][Jest]]: a test runner based on Jasmine; to install globally for CLI usage:

  #+begin_example
  yarn global add jest

  success Installed "jest@24.8.0" with binaries:
      - jest
  ✨  Done in 13.66s.
  #+end_example

- [[https://github.com/babel/babel][Babel]] and [[https://babeljs.io][Babel.js]]: to transpile ECMAScript 2015 code to ECMAScript 5

  While you can install Babel CLI globally on your machine, it's much better to
  install it locally project by project, because:

  1. Different projects on the same machine can depend on different versions of
     Babel allowing you to update one at a time.

  2. It means you do not have an implicit dependency on the environment you are
     working in.  Making your project far more portable and easier to setup.

  {{{heading(Install Babel CLI Locally)}}}

  Install Babel CLI locally by running:
  : yarn add --dev @babel/core @babel/cli

  If you do not have a ~package.json~, create one before installing.  This will
  ensure proper interaction with the ~npx~ command.

  After that finishes installing, your ~package.json~ file should include:

  #+begin_example
    {
      "devDependencies": {
  +     "@babel/cli": "^7.0.0",
  +     "@babel/core": "^7.0.0"
      }
    }
  #+end_example

  {{{heading(Setup Babel build Scripts)}}}

  Instead of running Babel directly from the command line we're going to put
  our commands in ~npm~ scripts which will use our local version.  Add a
  =scripts= field to your ~package.json~ and put the ~babel~ command inside
  there as =build=.

  #+begin_example
    {
      "name": "my-project",
      "version": "1.0.0",
  +   "scripts": {
  +     "build": "babel src -d lib"
  +   },
      "devDependencies": {
        "babel-cli": "^6.0.0"
      }
    }
  #+end_example

  From your terminal you can run:
  : yarn run build

  This will run Babel the same way as before and the output will be present in
  ~lib~ directory, only now we are using a local copy.

  Alternatively, you can reference the babel cli inside of node_modules.
  : ./node_modules/.bin/babel src -d lib

  {{{heading(Enable the env Plugin and Create a babelrc File)}}}

  You've configured Babel but you haven't made it actually do anything.  Create
  a ~.babelrc~ config in your project root and enable some plugins.  To start,
  you can use the =env= preset, which enables transforms for ES2015+.
  : yarn add @babel/preset-env --dev

  In order to enable the preset you have to define it in your ~.babelrc~ file,
  like this:

  #+begin_example
  {
    "presets": ["@babel/preset-env"]
  }
  #+end_example

- [[http://eslint.org/][ESLint]] (optional): to perform several static analysis and coding style checks
  to your JavaScript code.

  {{{heading(Installing ESLint Locally)}}}

  If you want to include ESLint as part of your project’s build system, we
  recommend installing it locally.  You can do so using ~yarn~:

  : yarn add eslint --dev

  You should then setup a configuration file:

  : ./node_modules/.bin/eslint --init

  After that, you can run ESLint in your project’s root directory like this:

  : ./node_modules/.bin/eslint yourfile.js

  Instead of navigating to ~./node_modules/.bin/~ you may also use ~npx~ to run
  eslint:

  : npx eslint

  Any plugins or shareable configs that you use must also be installed locally
  to work with a locally-installed ESLint.

  {{{heading(ESLint Configuration)}}}

  After running ~eslint --init~, you’ll have an ~.eslintrc~ file in your
  directory.  In it, you’ll see some rules configured like this:

  #+begin_example
   # .eslintrc
   {
       "rules": {
           "semi": ["error", "always"],
           "quotes": ["error", "double"]
       }
   }
  #+end_example

  The names "semi" and "quotes" are the names of rules in ESLint.  The first
  value is the error level of the rule and can be one of these values:

  - "off" or 0 - turn the rule off

  - "warn" or 1 - turn the rule on as a warning (doesn’t affect exit code)

  - "error" or 2 - turn the rule on as an error (exit code will be 1)

  Your ~.eslintrc~ configuration file will also include the line:

  : "extends": "eslint:recommended"

  Because of this line, all of the rules marked “OK” on the rules page will be
  turned on.  ESLint will not lint your code unless you extend from a shared
  configuration or explicitly turn rules on in your configuration.

** Running the Tests
Execute the tests with:

: yarn run lint-test

You can also run Jest in "watch" mode, which will re-run your tests
automatically when you save changes to the code or test module:

: yarn run watch

{{{heading(Understanding Skip Tests)}}}

The skip method instructs the test suite to not run a test, this function could
be used also under the aliases:

- ~it.skip(name, fn)~
- ~xit(name, fn)~
- ~xtest(name, fn)~


They are skipped so as to enable users to concentrate on one test at a time and
enable one by one as they evolve the solution.

To enable skipping, change ~xtest~ to ~test~.

#+begin_src js
test('title cased phrases', () => {
  expect(Acronyms.parse('Portable Network Graphics')).toEqual('PNG');
});
#+end_src

{{{heading(Making Your First JavaScript 2015 Module)}}}

Usually, tests on this track will load your implementation by importing it as a
JavaScript module:

: import { Bob } from './bob.js';

You just need to export your implementation from the referenced file, ~bob.js~:

#+begin_src js
export class Bob {
  hey(message) {
    //
    // Your solution to the exercise goes here
    //
  }
}
#+end_src

To make it easier to get started, there is a skeleton JavaScript file in the
directory for the first exercise.

#+caption:Skeleton JavaScript File
#+name:javascript-skeleton-file
#+begin_src js
//
// This is only a SKELETON file for the 'Hello World' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const hello = () => {
  //
  // YOUR CODE GOES HERE
  //
};

#+end_src

** JavaScript Hello World
*** JavaScript Hello World Introduction
The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


{{{heading(Download the Exercise)}}}

This step is done only once for initial setup; thereafter, this Org file will
install the project automatically upon an export.

#+name:javascript-hello-world-download
#+begin_src sh :results output :exports code
exercism download --exercise=hello-world --track=javascript
#+end_src

#+RESULTS: javascript-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/hello-world

*** JavaScript Hello World Setup and Tests
1. Go through the setup instructions for Javascript to install the necessary
   dependencies:
   - https://exercism.io/tracks/javascript/installation

2. Install assignment dependencies:
   This step will run automatically upon an export of this Org file.

   #+name:javascript-hello-world-install
   #+begin_src sh :dir javascript/hello-world :results output :exports both
   yarn install
   #+end_src

3. After completing the code challenge, Execute the tests.

   This step will also run automatically upon an export of this Org file.

   #+name:javascript-hello-world-run-lint-test
   #+begin_src sh :dir javascript/hello-world :results output :exports both
   yarn lint-test 2>&1
   #+end_src

   In the test suites all tests but the first have been skipped.  Once you get
   a test passing, you can enable the next one by changing ~xtest~ to ~test~.

4. Submit Passing code to Exercism

  This step should be done manually after this Org file correctly installs the
  project and successfully runs the test.

  #+name:javascript-hello-world-submit
  #+begin_src sh :dir javascript/hello-world :results output
  exercism submit $PWD/hello-world.js
  #+end_src

*** JavaScript Hello World Files
**** JS Hello World README
#+name:javascript-hello-world-readme
#+begin_src markdown :tangle javascript/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

**** JS Hello World package.json
#+name:javascript-hello-world-package.json
#+begin_src js :tangle javascript/hello-world/package.json :mkdirp yes
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}
#+end_src

**** JS Hello World Babel config
#+name:javascript-hello-world-babel.config.js
#+begin_src js :tangle javascript/hello-world/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

**** JS Hello World ESLint config
#+name:javascript-hello-world-eslint-config
#+begin_src js :tangle javascript/hello-world/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

**** JS Hello World Jest Spec
#+name:javascript-hello-world-spec
#+begin_src js :tangle javascript/hello-world/hello-world.spec.js
import { hello } from './hello-world';

describe('Hello World', () => {
  test('says hello', () => {
    expect(hello()).toEqual('Hello, World!');
  });
});
#+end_src

**** JS Hello World Solution
#+name:javascript-hello-world-solution
#+begin_src js :tangle javascript/hello-world/hello-world.js
//
// This is only a SKELETON file for the 'Hello World' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const hello = () => {
    return "Hello, World!";
};
#+end_src

#+name:javascript-hello-world-exercism-metadata
#+begin_src js :tangle javascript/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"javascript",
    "exercise":"hello-world",
    "id":"3e83e95453cb4b2e8d0a68027687fe72",
    "url":"https://exercism.io/my/solutions/3e83e95453cb4b2e8d0a68027687fe72",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+end_src

** JavaScript Two Fer
- https://exercism.io/my/solutions/0d6a508dc6cb4f2282e2cfc2f5274acf

To download the code manually:
#+name:javascript-two-fer-download
#+begin_src sh :results output
exercism download --exercise=two-fer --track=javascript
#+end_src

#+RESULTS: javascript-two-fer-download
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/two-fer

When ready to submit working code:
#+name:javascript-two-fer-submit
#+begin_src sh :dir javascript/two-fer :results output
exercism submit ./two-fer.js
#+end_src

#+RESULTS: javascript-two-fer-submit
:     https://exercism.io/my/solutions/0d6a508dc6cb4f2282e2cfc2f5274acf

*** JavaScript Two Fer Files
**** JS Two Fer README
#+name:javascript-two-fer-readme
#+begin_src markdown :tangle javascript/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    |String to return 
|:-------|:------------------
|Alice   |One for Alice, one for me. 
|Bob     |One for Bob, one for me.
|        |One for you, one for me.
|Zaphod  |One for Zaphod, one for me.

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

**** JS Two Fer Package config
#+name:javascript-two-fer-package-config
#+begin_src js :tangle javascript/two-fer/package.json :mkdirp yes
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}
#+end_src

**** JS Two Fer Babel config
#+name:javascript-two-fer-babel-config
#+begin_src js :tangle javascript/two-fer/babel.config.js :mkdirp yes
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

**** JS Two Fer ESLint config
#+name:javascript-two-fer-eslint-config
#+begin_src js :tangle javascript/two-fer/.eslintrc :mkdirp yes
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

**** JS Two Fer Test Spec
#+name:javascript-two-fer-test-spec
#+begin_src js :tangle javascript/two-fer/two-fer.spec.js :mkdirp yes
import { twoFer } from './two-fer'

describe('twoFer()', () => {
  test('no name given', () => {
    expect(twoFer()).toEqual("One for you, one for me.")
  })

  test('a name given', () => {
    expect(twoFer("Alice")).toEqual("One for Alice, one for me.")
  })

  test('another name given', () => {
    expect(twoFer("Bob")).toEqual("One for Bob, one for me.")
  })
})
#+end_src

**** JS Two Fer Solution
#+name:javascript-two-fer-solution
#+begin_src js :tangle javascript/two-fer/two-fer.js :mkdirp yes
export const twoFer = (name="you") => {
    return (`One for ${name}, one for me.`);
}
#+end_src

#+name:javascript-two-fer-exercism-metadata
#+begin_src js :tangle javascript/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"javascript",
    "exercise":"two-fer",
    "id":"0d6a508dc6cb4f2282e2cfc2f5274acf",
    "url":"https://exercism.io/my/solutions/0d6a508dc6cb4f2282e2cfc2f5274acf",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** JavaScript Two Fer Installation and Testing
#+name:javascript-two-fer-package-installation
#+begin_src sh :dir javascript/two-fer :results output :exports both
yarn
#+end_src

#+name:javascript-two-fer-testing
#+begin_src sh :dir javascript/two-fer :results output :exports both
yarn lint-test 2>&1
#+end_src

#+RESULTS: javascript-two-fer-testing
#+begin_example
yarn run v1.16.0
$ eslint . && jest --no-cache ./* 
PASS ./two-fer.spec.js
  twoFer()
    ✓ no name given (3ms)
    ✓ a name given (1ms)
    ✓ another name given

Test Suites: 1 passed, 1 total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        0.856s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/node_modules|.\/package.json|.\/two-fer.js|.\/two-fer.spec.js|.\/yarn.lock/i.
Done in 1.95s.
#+end_example

** JavaScript Resister Color
- https://exercism.io/my/solutions/5ac4fa71d14f41edb6a16980179d2dbc

Resistors have color coded bands, where each color maps to a number. The first
2 bands of a resistor have a simple encoding scheme: each color maps to a
single number.

These colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

Mnemonics map the colors to the numbers, that, when stored as an array, happen
to map to their index in the array: Better Be Right Or Your Great Big Values Go
Wrong.

To pass this exercise, your code will be given a color, and should return the
correct number.

*** JavaScript Resistor Color Scripts
{{{heading(Download Source Code)}}}

This step does not normally need to be done other during initial setup of the
Org file.

#+name:javascript-resistor-color-download
#+begin_src sh :results output
exercism download --exercise=resistor-color --track=javascript
#+end_src

#+RESULTS: javascript-resistor-color-download
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/resistor-color

{{{heading(Submit)}}}

This step is done only once, after all the tests are passing.

#+name:javascript-resistor-color-submit
#+begin_src sh :dir javascript/resistor-color :results output
exercism submit resistor-color.js
#+end_src

#+RESULTS: javascript-resistor-color-submit

{{{heading(Install Dependencies)}}}

This step is done automatically upon an export of this Org source file.  There
is no reason to run this script manually unless the source file is not being
exported.

#+name:javascript-resistor-color-install
#+begin_src sh :dir javascript/resistor-color :results output :exports both
yarn
#+end_src

{{{heading(Test Solution Code)}}}

This step is done automatically upon an export of this Org source file.  During
coding, it can be done manually to test your code from within this Org source
file.

#+name:javascript/resistor-color-test-solution
#+begin_src sh :dir javascript/resistor-color :results output :exports both
yarn lint-test 2>&1
#+end_src

#+RESULTS: javascript/resistor-color-test-solution
#+begin_example
yarn run v1.16.0
$ eslint . && jest --no-cache ./* 
PASS ./resistor-color.spec.js
  ResistorColor
    ✓ Colors (1ms)
    Color codes
      ✓ Black (2ms)
      ✓ White
      ✓ Orange

Test Suites: 1 passed, 1 total
Tests:       4 passed, 4 total
Snapshots:   0 total
Time:        0.836s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/node_modules|.\/package.json|.\/resistor-color.js|.\/resistor-color.spec.js|.\/yarn.lock/i.
Done in 1.90s.
#+end_example

*** JavaScript Resistor Color Solution
#+name:javascript-resistor-color-solution
#+begin_src js :tangle javascript/resistor-color/resistor-color.js :mkdirp yes
const COLORS = [
    "black",
    "brown",
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "violet",
    "grey",
    "white"
];

const colorCode = color => COLORS.indexOf(color);

export { colorCode, COLORS };
#+end_src
*** JavaScript Resistor Color Readme
#+name:javascript-resistor-color-readme
#+begin_src markdown :tangle javascript/resistor-color/README.md :mkdirp yes
# Resistor Color

Resistors have color coded bands, where each color maps to a
number. The first 2 bands of a resistor have a simple encoding scheme:
each color maps to a single number.

These colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

Mnemonics map the colors to the numbers, that, when stored as an
array, happen to map to their index in the array: Better Be Right Or
Your Great Big Values Go Wrong.

More information on the color encoding of resistors can be found in
the [Electronic color code Wikipedia
article](https://en.wikipedia.org/wiki/Electronic_color_code)

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

Maud de Vries, Erik Schierboom [https://github.com/exercism/problem-specifications/issues/1458](https://github.com/exercism/problem-specifications/issues/1458)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

*** JavaScript Resistor Color Test Spec
#+name:javascript-resistor-color-test-spec
#+begin_src js :tangle javascript/resistor-color/resistor-color.spec.js :mkdirp yes
import { colorCode, COLORS } from './resistor-color'

describe('ResistorColor', () => {
  describe('Color codes', () => {
    test('Black', () => {
      expect(colorCode("black")).toEqual(0)
    })

    test('White', () => {
      expect(colorCode("white")).toEqual(9)
    })

    test('Orange', () => {
      expect(colorCode("orange")).toEqual(3)
    })
  })

  test('Colors', () => {
    expect(COLORS).toEqual(["black","brown","red","orange","yellow","green","blue","violet","grey","white"])
  })
})
#+end_src

*** JavaScript Resister Color Configuration Files
{{{heading(package.json)}}}
#+name:javascript-resistor-color-package-json
#+begin_src js :tangle javascript/resistor-color/package.json :mkdirp yes
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}
#+end_src

{{{heading(Babel Config)}}}
#+name:javascript-resistor-color-babel-config
#+begin_src js :tangle javascript/resistor-color/babel.config.js :mkdirp yes
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

{{{heading(ESLint Config)}}}
#+name:javascript-resistor-color-eslint-config
#+begin_src js :tangle javascript/resistor-color/.eslintrc :mkdirp yes
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

#+name:javascript-resistor-color-exercism-metadata-json
#+begin_src js :tangle javascript/resistor-color/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"javascript",
    "exercise":"resistor-color",
    "id":"5ac4fa71d14f41edb6a16980179d2dbc",
    "url":"https://exercism.io/my/solutions/5ac4fa71d14f41edb6a16980179d2dbc",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

** JavaScript Resister Color Duo
:PROPERTIES:
:level:    easy
:END:
*** JavaScript Resister Color Duo Introduction
If you want to build something using a Raspberry Pi, you'll probably use
resistors.  For this exercise, you need to know two things about them:

- Each resistor has a resistance value.

- Resistors are small---so small in fact that if you printed the resistance
  value on them, it would be hard to read.  To get around this problem,
  manufacturers print color-coded bands onto the resistors to denote their
  resistance values.  Each band acts as a digit of a number.  For example, if
  they printed a brown band (value 1) followed by a green band (value 5), it
  would translate to the number 15.


In this exercise, you are going to create a helpful program so that you don't
have to remember the values of the bands.  The program will take two colors as
input, and output the correct number.

The band colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

*** JavaScript Resistor Color Due Readme
#+name:javascript-resistor-color-duo-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle javascript/resistor-color-duo/README.md
# Resistor Color Duo

If you want to build something using a Raspberry Pi, you'll probably
use _resistors_. For this exercise, you need to know two things about
them:

- Each resistor has a resistance value.

- Resistors are small - so small in fact that if you printed the
  resistance value on them, it would be hard to read.

To get around this problem, manufacturers print color-coded bands onto
the resistors to denote their resistance values. Each band acts as a
digit of a number. For example, if they printed a brown band (value 1)
followed by a green band (value 5), it would translate to the number
15.

In this exercise, you are going to create a helpful program so that
you don't have to remember the values of the bands. The program will
take two colors as input, and output the correct number.

The band colors are encoded as follows:

- Black: 0
- Brown: 1
- Red: 2
- Orange: 3
- Yellow: 4
- Green: 5
- Blue: 6
- Violet: 7
- Grey: 8
- White: 9

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing
`xtest` to `test`.

## Source

Maud de Vries, Erik Schierboom
[https://github.com/exercism/problem-specifications/issues/1464](https://github.com/exercism/problem-specifications/issues/1464)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how
others have completed the exercise.

#+end_src

*** JavaScript Resistor Color Duo Scripts
**** JavaScript Resistor Color Duo Download Script
#+name:javascript-resistor-color-duo-download-script
#+begin_src sh
exercism download --exercise=resistor-color-duo --track=javascript
#+end_src

#+RESULTS: javascript-resistor-color-duo-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/resistor-color-duo

**** JavaScript Resistor Color Duo Submit Script
#+name:javascript-resistor-color-duo-submit-script
#+begin_src sh
exercism submit javascript/resistor-color-duo/resistor-color-duo.js
#+end_src

**** JavaScript Resistor Color Duo Install Package Script
This script will run automatically upon an export of this Org file.

To install the package from within this Org file, place your cursor inside the
script below and type =C-c C-c=.

To install the package manually, navigate into the
~Exercism/javascript/resistor-color-duo/~ directory and type the command:
: ./install-package.sh

or alternatively, type the command:
: yarn

#+name:javascript-resistor-color-duo-install-package-json
#+header: :shebang "#!/usr/bin/env bash"
#+header: :dir javascript/resistor-color-duo
#+header: :results output :exports results
#+begin_src sh :tangle javascript/resistor-color-duo/install-package.sh
yarn
#+end_src

#+RESULTS: javascript-resistor-color-duo-install-package-json

**** JavaScript Resistor Color Duo Run Tests Script
These tests will run automatically upon an export of this Org file.

To run these tests in this Org file, type =C-c C-c= while your cursor is inside
the script..

To run these these from within a shell, navigate into the
~Exercism/javascript/resistor-color-duo/~ directory and type the command:
: ./run-tests.sh

#+name:javascript-resistor-color-duo-run-tests
#+header: :shebang "#!/usr/bin/env bash"
#+header: :dir javascript/resistor-color-duo
#+header: :results output :exports results
#+begin_src sh :tangle javascript/resistor-color-duo/run-tests.sh
npm run lint-test 2>&1 >test-results
cat test-results
#+end_src

*** JavaScript Resistor Color Duo Solution Code
#+name:javascript-resistor-color-due-solution-code
#+begin_src js :tangle javascript/resistor-color-duo/resistor-color-duo.js
//
// This is only a SKELETON file for the 'Resistor Color Duo' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const value = ([color1, color2]) => {
    const band_colors = {
        black: 0,
        brown: 1,
        red:   2,
        orange:3,
        yellow:4,
        green: 5,
        blue:  6,
        violet:7,
        grey:  8,
        white: 9
    };

    return Number.parseInt(`${band_colors[color1.toLowerCase()]}${band_colors[color2.toLowerCase()]}`);
};

#+end_src

*** JavaScript Resistor Color Duo Test Code
#+name:javascript-resistor-color-duo-test-code
#+begin_src js :tangle javascript/resistor-color-duo/resistor-color-duo.spec.js
import { value } from './resistor-color-duo.js';

describe('Resistor Colors', () => {
  test('Brown and black', () => {
    expect(value(['brown', 'black'])).toEqual(10);
  });

  test('Blue and grey', () => {
    expect(value(['blue', 'grey'])).toEqual(68);
  });

  test('Yellow and violet', () => {
    expect(value(['yellow', 'violet'])).toEqual(47);
  });

  test('Orange and orange', () => {
    expect(value(['orange', 'orange'])).toEqual(33);
  });
});

#+end_src
*** JavaScript Resistor Color Duo Metadata
#+name:javascript-resistor-color-duo-metadata
#+header: :exports none :mkdirp yes
#+begin_src js :tangle javascript/resistor-color-duo/.exercism/metadata.json
{
    "track":"javascript",
    "exercise":"resistor-color-duo",
    "id":"aa637cb2e6a942eb818d90f3b36fa3be",
    "url":"https://exercism.io/my/solutions/aa637cb2e6a942eb818d90f3b36fa3be",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

#+name:javascript-resistor-color-duo-package.json
#+begin_src js :tangle javascript/resistor-color-duo/package.json
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}

#+end_src

{{{heading(JavaScript Resistor Color Duo ESLint Metadata)}}}

#+name:javascript-resistor-color-duo-eslint
#+begin_src js :tangle javascript/resistor-color-duo/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

{{{heading(JavaScript Resistor Color Duo Babel Configuration)}}}

#+name:javascript-resistor-color-due-babel-config
#+begin_src js :tangle javascript/resistor-color-duo/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};

#+end_src
** JavaScript Gigasecond
*** JavaScript Gigasecond Introduction
Given a moment, determine the moment that would be after a gigasecond has
passed.  A gigasecond is 10^9 (1,000,000,000) seconds.

{{{heading(Setup)}}}

Go through the setup instructions for Javascript to install the necessary
dependencies:  [[*Required Tools for the JavaScript Track][JavaScript Tools]]
- https://exercism.io/tracks/javascript/installation


{{{heading(Requirements)}}}

Install assignment dependencies:

#+name:javascript-gigasecond-install-dependencies
#+header: :dir javascript/gigasecond
#+header: :results output :exports both
#+begin_src sh
yarn
#+end_src

#+RESULTS: javascript-gigasecond-install-dependencies
: yarn install v1.16.0
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 7.87s.

{{{heading(Making the Test Suite Pass)}}}

Execute the tests with:

#+name:javascript-gigasecond-execute-tests
#+header: :dir javascript/gigasecond
#+header: :results output :exports both
#+begin_src sh
yarn test
#+end_src

#+RESULTS: javascript-gigasecond-execute-tests
: yarn run v1.16.0
: $ jest --no-cache ./*
: Done in 1.65s.

In the test suites all tests but the first have been skipped.  Once you get a
test passing, you can enable the next one by changing ~xtest~ to ~test~.


{{{heading(Source)}}}

[[http://pine.fm/LearnToProgram/?Chapter=09][Chapter 9]] in Chris Pine's online Learn to Program tutorial.

*** JavaScript Gigasecond Scripts
**** JavaScript Gigasecond Download Script
#+name:javascript-gigasecond-download-script
#+begin_src sh :results output
exercism download --exercise=gigasecond --track=javascript
#+end_src

#+RESULTS: javascript-gigasecond-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/gigasecond

**** JavaScript Gigasecond Submit Script
#+name:javascript-gigasecond-submit-script
#+begin_src sh :results output
exercism submit javascript/gigasecond/gigasecond.js
#+end_src

#+RESULTS: javascript-gigasecond-submit-script
:     https://exercism.io/my/solutions/d8673b7004144bb1a63a0f1e57997cdb
: 

**** JavaScript Gigasecond Run Tests Script
#+name:javascript-gigasecond-run-tests-script
#+header: :dir javascript/gigasecond
#+header: :results output :exports results
#+begin_src sh
yarn run lint-test 2>&1
#+end_src

#+RESULTS: javascript-gigasecond-run-tests-script
#+begin_example
yarn run v1.16.0
$ eslint . && jest --no-cache ./* 
PASS ./gigasecond.spec.js
  Gigasecond
    ✓ tells a gigasecond anniversary since midnight (3ms)
    ✓ tells the anniversary is next day when you are born at night (1ms)
    ✓ even works before 1970 (beginning of Unix epoch)

Test Suites: 1 passed, 1 total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        1.125s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/gigasecond.js|.\/gigasecond.spec.js|.\/node_modules|.\/package.json|.\/yarn.lock/i.
Done in 2.42s.
#+end_example

*** JavaScript Gigasecond Readme
#+name:javascript-gigasecond-readmen
#+header: :mkdirp yes
#+begin_src markdown -n :tangle javascript/gigasecond/README.md
# Gigasecond

Given a moment, determine the moment that would be after a gigasecond
has passed.

A gigasecond is 10^9 (1,000,000,000) seconds.

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

Chapter 9 in Chris Pine's online Learn to Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=09](http://pine.fm/LearnToProgram/?Chapter=09)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** JavaScript Gigasecond Metadata Configuration
**** JavaScript Gigasecond Node Configuration
#+name:javascript-gigasecond-package.json
#+begin_src js -n :tangle javascript/gigasecond/package.json
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}

#+end_src

#+name:javascript-gigasecond-exercism-metadata
#+header: :mkdirp yes
#+begin_src js :tangle javascript/gigasecond/.exercism/metadata.json
{
    "track":"javascript",
    "exercise":"gigasecond",
    "id":"d8673b7004144bb1a63a0f1e57997cdb",
    "url":"https://exercism.io/my/solutions/d8673b7004144bb1a63a0f1e57997cdb",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** JavaScript Gigasecond Babel Configuration
#+name:javascript-gigasecond-babel-configuration
#+begin_src js -n :tangle javascript/gigasecond/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};

#+end_src

**** JavaScript Gigasecond ESLint Configuration
#+name:javascript-gigasecond-eslint-configuration
#+begin_src js -n :tangle javascript/gigasecond/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}

#+end_src

*** JavaScript Gigasecond Tests
#+name:javascript-gigasecond-tests
#+begin_src js -n :tangle javascript/gigasecond/gigasecond.spec.js
import { gigasecond } from './gigasecond';

describe('Gigasecond', () => {
  test('tells a gigasecond anniversary since midnight', () => {
    const gs = gigasecond(new Date(Date.UTC(2015, 8, 14)));
    const expectedDate = new Date(Date.UTC(2047, 4, 23, 1, 46, 40));
    expect(gs).toEqual(expectedDate);
  });

  test('tells the anniversary is next day when you are born at night', () => {
    const gs = gigasecond(new Date(Date.UTC(2015, 8, 14, 23, 59, 59)));
    const expectedDate = new Date(Date.UTC(2047, 4, 24, 1, 46, 39));
    expect(gs).toEqual(expectedDate);
  });

  test('even works before 1970 (beginning of Unix epoch)', () => {
    const gs = gigasecond(new Date(Date.UTC(1959, 6, 19, 5, 13, 45)));
    const expectedDate = new Date(Date.UTC(1991, 2, 27, 7, 0, 25));
    expect(gs).toEqual(expectedDate);
  });
});

#+end_src

*** JavaScript Gigasecond Solution
#+name:javascript-gigasecond-solution
#+begin_src js -n :tangle javascript/gigasecond/gigasecond.js
//
// This is only a SKELETON file for the 'Gigasecond' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const gigasecond = (moment) => {
    return new Date(moment.getTime() + 10**12);
};

#+end_src

** JavaScript RNA Transcription
*** JavaScript RNA Transcription Introduction
Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are:
- adenine (A)
- cytosine (C)
- guanine (G)
- thymine (T)


The four nucleotides found in RNA are
- adenine (A)
- cytosine (C)
- guanine (G)
- uracil (U)


Given a DNA strand, its transcribed RNA strand is formed by replacing each
nucleotide with its complement:

- G -> C
- C -> G
- T -> A
- A -> U


{{{heading(Setup)}}}

Go through the setup instructions for Javascript to install the necessary
dependencies:


{{{heading(Requirements)}}}

Install assignment dependencies:

#+name:javascript-rna-transcription-install-dependencies
#+header: :dir javascript/rna-transcription
#+header: :results output :exports results
#+begin_src sh
yarn
#+end_src

#+RESULTS: javascript-rna-transcription-install-dependencies
: yarn install v1.16.0
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 8.48s.

{{{heading(Making the test suite pass)}}}

Execute the tests with:

#+name:javascript-rna-transcription-run-tests
#+header: :dir javascript/rna-transcription
#+header: :results output :exports results
#+begin_src sh
yarn test 2>&1
#+end_src

#+RESULTS: javascript-rna-transcription-run-tests
#+begin_example
yarn run v1.16.0
$ jest --no-cache ./*
PASS ./rna-transcription.spec.js
  Transcription
    ✓ empty rna sequence (3ms)
    ✓ transcribes cytosine to guanine
    ✓ transcribes guanine to cytosine
    ✓ transcribes thymine to adenine
    ✓ transcribes adenine to uracil
    ✓ transcribes all dna nucleotides to their rna complements (1ms)

Test Suites: 1 passed, 1 total
Tests:       6 passed, 6 total
Snapshots:   0 total
Time:        0.864s
Ran all test suites matching /.\/README.md|.\/babel.config.js|.\/node_modules|.\/package.json|.\/rna-transcription.js|.\/rna-transcription.spec.js|.\/yarn.lock/i.
Done in 1.44s.
#+end_example

In the test suites all tests but the first have been skipped.  Once you get a
test passing, you can enable the next one by changing ~xtest~ to ~test~.

{{{heading(Source)}}}

[[http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html][Hyperphysics Transcription]]

*** JavaScript RNA Transcription Scripts
**** JavaScript RNA Transcription Download Script
#+name:javascript-rna-transcription-download-script
#+begin_src sh
exercism download --exercise=rna-transcription --track=javascript
#+end_src

#+RESULTS: javascript-rna-transcription-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/javascript/rna-transcription

**** JavaScript RNA Transcription Submit Script
#+name:javascript-rna-transcription-submit-script
#+begin_src sh
exercism submit javascript/rna-transcription/rna-transcription.js
#+end_src

#+RESULTS: javascript-rna-transcription-submit-script
: https://exercism.io/my/solutions/e4a461c666f24604878c855a90871b40

*** JavaScript RNA Transcription README
#+name:javascript-rna-transcription-README
#+header: :mkdirp yes
#+begin_src markdown :tangle javascript/rna-transcription/README.md
# RNA Transcription

Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and thymine (**T**).

The four nucleotides found in RNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and uracil (**U**).

Given a DNA strand, its transcribed RNA strand is formed by replacing
each nucleotide with its complement:

,* `G` -> `C`
,* `C` -> `G`
,* `T` -> `A`
,* `A` -> `U`

## Setup

Go through the setup instructions for Javascript to install the necessary
dependencies:

[https://exercism.io/tracks/javascript/installation](https://exercism.io/tracks/javascript/installation)

## Requirements

Install assignment dependencies:

```bash
$ npm install
```

## Making the test suite pass

Execute the tests with:

```bash
$ npm test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xtest` to
`test`.

## Source

Hyperphysics [http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html](http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src
*** JavaScript RNA Transcription Metadata
**** JavaScript RNA Transcription Node Package
#+name:javascript-rna-transcription-node-package
#+begin_src js :tangle javascript/rna-transcription/package.json
{
  "name": "exercism-javascript",
  "version": "0.0.0",
  "description": "Exercism exercises in Javascript.",
  "author": "Katrina Owen",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/javascript"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.4.0",
    "@babel/preset-env": "^7.4.2",
    "@types/jest": "^24.0.13",
    "@types/node": "^12.0.4",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "eslint": "^5.15.3",
    "eslint-plugin-import": "^2.16.0",
    "jest": "^24.5.0"
  },
  "jest": {
    "modulePathIgnorePatterns": [
      "package.json"
    ]
  },
  "scripts": {
    "test": "jest --no-cache ./*",
    "watch": "jest --no-cache --watch ./*",
    "lint": "eslint .",
    "lint-test": "eslint . && jest --no-cache ./* "
  },
  "license": "MIT",
  "dependencies": {}
}

#+end_src

**** JavaScript RNA Transcription Babel Config
#+name:javascript-rna-transcription-babel-config
#+begin_src js :tangle javascript/rna-transcription/babel.config.js
module.exports = {
  presets: [
    [
      '@babel/env',
      {
        targets: {
          node: 'current',
        },
        useBuiltIns: false,
      },

    ],
  ],
};
#+end_src

**** JavaScript RNA Transcription ESLint Config
#+name:javascript-rna-transcription-eslint-config
#+begin_src js :tangle javascript/rna-transcription/.eslintrc
{
  "root": true,
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 7,
    "sourceType": "module"
  },
  "env": {
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings"
  ],
  "rules": {
    "linebreak-style": "off",

    "import/extensions": "off",
    "import/no-default-export": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off"
  }
}
#+end_src

**** JavaScript RNA Transcription Exercism Config
#+name:javascript-rna-transcription-exercism-config
#+header: :mkdirp yes
#+begin_src js :tangle javascript/rna-transcription/.exercism/metadata.json
{
    "track":"javascript",
    "exercise":"rna-transcription",
    "id":"e4a461c666f24604878c855a90871b40",
    "url":"https://exercism.io/my/solutions/e4a461c666f24604878c855a90871b40",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** JavaScript RNA Transcription Test Specs
#+name:javascript-rna-transcription-test-specs
#+begin_src js :tangle javascript/rna-transcription/rna-transcription.spec.js
import { toRna } from './rna-transcription'

describe('Transcription', () => {
  test('empty rna sequence', () => {
    expect(toRna('')).toEqual('');
  });

  test('transcribes cytosine to guanine', () => {
    expect(toRna('C')).toEqual('G');
  });

  test('transcribes guanine to cytosine', () => {
    expect(toRna('G')).toEqual('C');
  });

  test('transcribes thymine to adenine', () => {
    expect(toRna('T')).toEqual('A');
  });

  test('transcribes adenine to uracil', () => {
    expect(toRna('A')).toEqual('U');
  });

  test('transcribes all dna nucleotides to their rna complements', () => {
    expect(toRna('ACGTGGTCTTAA')).toEqual('UGCACCAGAAUU');
  });
})
#+end_src

*** JavaScript RNA Transcription Code
#+name:javascript-rna-transcription-code
#+begin_src js :tangle javascript/rna-transcription/rna-transcription.js
//
// This is only a SKELETON file for the 'RNA Transcription' exercise. It's been provided as a
// convenience to get you started writing code faster.
//

export const toRna = (dna) => {
    const complement = {
        G:'C',
        C:'G',
        T:'A',
        A:'U',
    };

    return dna.split('').map(n => complement[n]).join('');
};
#+end_src

* TypeScript Exercism Track
- https://exercism.io/my/tracks/typescript

- 87 Exercises

** About TypeScript

#+begin_quote
TypeScript is a language for writing more maintainable JavaScript.  TypeScript
adds optional types, classes, and modules to JavaScript.
#+end_quote

[[http://www.typescriptlang.org][TypeScript]] (TS) is a superset of JavaScript (JS), created at Microsoft in
response to frustration developing large-scale applictions in JS.  In a large
JS project, knowing what properties your own objects have, what arguments your
functions take (and what type they need to be) can become difficult.
Similarly, since there is no ability to intelligently inspect JS code, when you
include a package (like from ~npm~), you have to keep the documentation up so
you know what methods are available and what arguments they take.  TS solves
these issues.  It is currently an open-source project hosted on Github.  It
supports tools for any browser as well as Node, for any host, on any OS.  TTS
compiles to readable, standards-based JavaScript.

TS adds a flexible type system to JS, in addition to interfaces (custom types)
and modifying the syntax of some ECMAScript features such as classes.  Types
are optional and flexible (for example, you can specify an argument is a string
OR a number).  Types allow tooling available in most code editors that improve
the development experience such as code completion and method detection, both
in your own code and in packages you use.  It supports many upcoming ECMASCript
features (such as ~async/await~).  TS can be written in OO or functional
styles.  It is compatible with all existing JS packages.  TS transpiles to
clean, readable JS.

Try it out at the [[http://www.typescriptlang.org/Playground][playground]], and stay up to date via the [[https://blogs.msdn.microsoft.com/typescript][Typescript blog]] and
Twitter account.

** TypeScript Hello World
*** TypeScript Introduction
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** TypeScript Setup
Go through the setup instructions for TypeScript to install the necessary
dependencies:

- Requirements

  - Install assignment dependencies:
    : $ yarn install

  - Making the test suite pass:

    Execute the tests with:
    : $ yarn test

    In many test suites all but the first test have been skipped.  Once you get
    a test passing, you can unskip the next one by changing ~xit~ to ~it~.

*** TypeScript Tutorial

This section is a step-by-step guide to solving this exercise.

*** TypeScript Hello World Readme

#+name:typescript-hello-world-readme
#+begin_src markdown :tangle typescript/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Setup

Go through the setup instructions for TypeScript to
install the necessary dependencies:

http://exercism.io/languages/typescript

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In many test suites all but the first test have been skipped.

Once you get a test passing, you can unskip the next one by
changing `xit` to `it`.

## Tutorial

This section is a step-by-step guide to solving this exercise.

This exercise has two files:

- hello-world.ts
- hello-world.test.ts

The first file is where you will write your code.
The second is where the tests are defined.

The tests will check whether your code is doing the right thing.
You don't need to be able to write a test suite from scratch,
but it helps to understand what a test looks like, and what
it is doing.

Open up the test file, hello-world.test.ts.
There are three tests inside:

```typescript
  it('says hello world with no name', () => {
    expect(HelloWorld.hello()).toEqual('Hello, World!')
  })

  xit('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  xit('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
```


Run the tests now, with the following command on the command-line:

```bash
$ yarn test
```

The test fails, which makes sense since you've not written any code yet.

The failure looks like this:

```
$ tsc --noEmit -p . && jest --no-cache
hello-world.test.ts(11,12): error TS2554: Expected 0 arguments, but got 1.
hello-world.test.ts(15,12): error TS2554: Expected 0 arguments, but got 1.
```

The failures go after the `$ tsc ...` line where the `tsc` command triggers typescript compiler to compile the code. Following lines
```
hello-world.test.ts(11,12): error TS2554: Expected 0 arguments, but got 1.
hello-world.test.ts(15,12): error TS2554: Expected 0 arguments, but got 1.
```
tell us that the compiler failed to compile the code in the files:
```
hello-world.test.ts
hello-world.test.ts
```
at lines:
```
                   (11,
                   (15,
```
starting from symbols:
```
                      ,12)
                      ,12)
```
with errors:
```
                                          Expected 0 arguments, but got 1.
                                          Expected 0 arguments, but got 1.
```

And these are those code lines with probable defects in the `hello-world.test.ts` file:

the 11th line:
```
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
           ^
           12
```

and the 15th line:
```
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
           ^
           12
```

Hence the problem is with the `HelloWorld.hello(...)` call where we are calling the `hello` static method from the `HelloWorld` class. While calling the method we pass one argument to it – in the 11th line we path `'Bob'` and in the 15th line we pass `'Sally'`.

Recalling the failure messages:
```
                                          Expected 0 arguments, but got 1.
                                          Expected 0 arguments, but got 1.
```

We can guess that while we pass 1 argument to the method, the method expected 0.

So let's check now this method in the `hello-worlds.ts` file:

```typescript
class HelloWorld {
    static hello( /* Parameters go here */ ) {
        // Your code here
    }
}

export default HelloWorld
```

Now we see that the method has no any parameter defined. This is the reason for our failure. Let's fix this by adding a parameter to the method:

```typescript
class HelloWorld {
    static hello(message:string) {
        // Your code here
    }
}

export default HelloWorld
```

Run tests again:
```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
hello-world.test.ts(7,12): error TS2554: Expected 1 arguments, but got 0.
hello-world.ts(2,18): error TS6133: 'name' is declared but never used.
```

Ok, now we have problem with the 7th line of `hello-world.test.ts` – the method expects 1 argument but we pass 0:

```typescript
    expect(HelloWorld.hello()).toEqual('Hello, World!')
           ^
           12
```

Good, let's add a default value for the method parameter, so if we do not pass an argument explicitly the value will be still assigned to the method parameter:

```typescript
class HelloWorld {
    static hello(message:string="") {
        // Your code here
    }
}

export default HelloWorld
```

Next try:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
hello-world.ts(2,18): error TS6133: 'message' is declared but never used.
```

Oh, we have to use the parameter somehow... Let's do the simplest thing possible:

```typescript
class HelloWorld {
    static hello(message:string="") {
        return message;
    }
}

export default HelloWorld
```

And one more try:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 FAIL  ./hello-world.test.ts
  ● Hello World › says hello world with no name

    expect(received).toEqual(expected)

    Expected value to equal:
      "Hello, World!"
    Received:
      ""
```

Now the compilation passed, but the `Hello World › says hello world with no name` test failed:

```typescript
describe('Hello World', () => {

  it('says hello world with no name', () => {
    expect(HelloWorld.hello()).toEqual('Hello, World!')
  })
}
```

Our `hello` method should actually return the `'Hello, World!'` string when received no argument. Let's fix this, again, with the simplest solution:

```typescript
class HelloWorld {
    static hello(message:string="Hello, World!") {
        return message;
    }
}

export default HelloWorld
```

Next try:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 PASS  ./hello-world.test.ts
  Hello World
    ✓ says hello world with no name (13ms)
    ○ skipped 2 tests

Test Suites: 1 passed, 1 total
Tests:       2 skipped, 1 passed, 3 total
Snapshots:   0 total
Time:        3.441s
Ran all test suites.
✨  Done in 8.99s.
```

Finally succeeded:)

But why the other two tests

```typescript
  //...

  xit('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  xit('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
```

... were skipped?

The answer is simple – they were defined with a `xit` "clause" instead of `it`. This was done by intention, so students at the start can focus on solving one problem, and then, step by step improve the solution according to the next tests.

So let's "unskip" the rest tests:

```typescript
  //...

  it('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  it('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
```

and run tests again:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 FAIL  ./hello-world.test.ts
  ● Hello World › says hello to bob

    expect(received).toEqual(expected)

    Expected value to equal:
      "Hello, Bob!"
    Received:
      "Bob"

      ...

  ● Hello World › says hello to sally

    expect(received).toEqual(expected)

    Expected value to equal:
      "Hello, Sally!"
    Received:
      "Sally"

      ...

  Hello World
    ✓ says hello world with no name (4ms)
    ✕ says hello to bob (113ms)
    ✕ says hello to sally (7ms)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        4.381s
Ran all test suites.
```

Oh... So the argument that we pass to the method should be used as a name of the "person" to whom we say hello...
- Easy!

```typescript
class HelloWorld {
    static hello(name:string="World") {
        return `Hello, ${name}!`;
    }
}

export default HelloWorld
```

And finally:

```bash
$ yarn test
yarn run v1.2.1
$ tsc --noEmit -p . && jest --no-cache
 PASS  ./hello-world.test.ts
  Hello World
    ✓ says hello world with no name (4ms)
    ✓ says hello to bob (1ms)
    ✓ says hello to sally

Test Suites: 1 passed, 1 total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        5.028s
Ran all test suites.
✨  Done in 10.54s.
```


Now when we are done, let's submit our solution to exercism:

```bash
$ exercism submit hello-world.ts
```


## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.
#+end_src

*** TypeScript Hello World Scripts
**** TypeScript Hello World Download Script

#+name:typescript-hello-world-download
#+begin_src sh
exercism download --exercise=hello-world --track=typescript
#+end_src

#+RESULTS: typescript-hello-world-download
: /usr/local/dev/programming/Languages/Exercism/typescript/hello-world

#+name:typescript-hello-world-exercism-metadata
#+begin_src js :tangle typescript/hello-world/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"typescript",
      "exercise":"hello-world",
      "id":"239d4122205345729809a15add2752a7",
      "url":"https://exercism.io/my/solutions/239d4122205345729809a15add2752a7",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":true
  }
#+end_src

**** TypeScript Hello World Submit Script

#+name:typescript-hello-world-submit-script
#+begin_src sh
exercism submit typescript/hello-world/hello-world.ts
#+end_src

#+RESULTS: typescript-hello-world-submit-script
: https://exercism.io/my/solutions/239d4122205345729809a15add2752a7

**** TypeScript Hello-World Configuration and Install Script

{{{heading(TypeScript Hello-World Package JSON File)}}}

#+caption:TypeScript Hello-World Package JSON File
#+name:typescript-hello-world-package.json
#+begin_src js :tangle typescript/hello-world/package.json :mkdirp yes
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}
#+end_src

{{{heading(TypeScript Hello-World TSConfig JSON File)}}}

#+caption:TypeScript Hello-World TSConfig JSON File
#+name:typescript-hello-world-tsconfig.json
#+begin_src js :tangle typescript/hello-world/tsconfig.json :mkdirp yes
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}
#+end_src

{{{heading(TypeScript Hello-World TSLint JSON File)}}}

#+caption:TypeScript Hello-World TSLint JSON File
#+name:typescript-hello-world-tslint.json
#+begin_src js :tangle typescript/hello-world/tslint.json :mkdirp yes
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}

#+end_src

#+name:typescript-hello-world-install-script
#+begin_src sh :dir typescript/hello-world :results output :exports both
yarn install
#+end_src

*** TypeScript HelloWorld Solution and Tests
**** TypeScript Hello World Solution

{{{heading(TypeScript Hello-World Solution Code)}}}

#+caption:TypeScript Hello-World Solution Code
#+name:typescript-hello-world-solution
#+begin_src js :tangle typescript/hello-world/hello-world.ts :mkdirp yes
class HelloWorld {
    static hello( subject:string="World" ) {
        return `Hello, ${subject}!`;
    }
}

export default HelloWorld
#+end_src

**** TypeScript Hello World Tests

{{{heading(TypeScript Hello-World Run Tests)}}}

#+caption:TypeScript Hello-World Tests
#+name:typescript-hello-world-tests
#+begin_src js :tangle typescript/hello-world/hello-world.test.ts :mkdirp yes
import HelloWorld from "./hello-world"

describe('Hello World', () => {

  it('says hello world with no name', () => {
    expect(HelloWorld.hello()).toEqual('Hello, World!')
  })

  it('says hello to bob', () => {
    expect(HelloWorld.hello('Bob')).toEqual('Hello, Bob!')
  })

  it('says hello to sally', () => {
    expect(HelloWorld.hello('Sally')).toEqual('Hello, Sally!')
  })
})
#+end_src

{{{subheading(TypeScript Hello-World Test Results)}}}

#+name:typescript-hello-world-tsc
#+begin_src sh :dir typescript/hello-world :results output :exports both
./node_modules/.bin/tsc --noEmit -p . >test_results.txt
./node_modules/.bin/jest --no-cache 2>>test_results.txt
cat test_results.txt
#+end_src

** TypeScript Two Fer
=Two-fe= or =2-fer= is short for "two for one".  One for you and one for me.

Given a name, return a string with the message:

: One for X, one for me.

Where X is the given name.

However, if the name is missing, return the string:

: One for you, one for me.

Here are some examples:

#+begin_example
Name	String to return
Alice	One for Alice, one for me.
Bob	One for Bob, one for me.
One for you, one for me.
Zaphod	One for Zaphod, one for me.
#+end_example

*** TypeScript Two Fer Readme

#+name:typescript-two-fer-readme
#+begin_src markdown :tangle typescript/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    |String to return 
|:-------|:------------------
|Alice   |One for Alice, one for me. 
|Bob     |One for Bob, one for me.
|        |One for you, one for me.
|Zaphod  |One for Zaphod, one for me.

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** TypeScript Two Fer Scripts

**** TypeScript Two Fer Download Script

#+name:typescript-two-fer-download-script
#+begin_src sh
exercism download --exercise=two-fer --track=typescript
#+end_src

#+RESULTS: typescript-two-fer-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/typescript/two-fer

**** TypeScript Two Fer Submit Script

#+name:typescript-two-fer-submit-script
#+begin_src sh
exercism submit typescript/two-fer/two-fer.ts
#+end_src

#+RESULTS: typescript-two-fer-submit-script
: https://exercism.io/my/solutions/167c692f10f04ba78dc2b3e17008da2a

*** TypeScript Two Fer Metadata

{{{heading(TypeScript Two Fer Package JSON)}}}

#+name:typescript-two-fer-package-json
#+begin_src js :tangle typescript/two-fer/package.json :mkdirp yes
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}

#+end_src

{{{heading(TypeScript Two Fer TSConfig JSON)}}}

#+name:typescript-two-fer-tsconfig-json
#+begin_src js :tangle typescript/two-fer/tsconfig.json :mkdirp yes
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}

#+end_src

{{{heading(TypeScript Two Fer TSLint JSON)}}}
#+begin_src js :tangle typescript/two-fer/tslint.json :mkdirp yes
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}

#+end_src

{{{heading(TypeScript Two Fer Installation)}}}

#+name:typescript-two-fer-installation
#+begin_src sh :dir typescript/two-fer :results output :exports both
yarn install
#+end_src

#+name:typescript-two-fer-exercism-metadata
#+begin_src js :tangle typescript/two-fer/.exercism/metadata.json :mkdirp yes
{
    "track":"typescript",
    "exercise":"two-fer",
    "id":"167c692f10f04ba78dc2b3e17008da2a",
    "url":"https://exercism.io/my/solutions/167c692f10f04ba78dc2b3e17008da2a",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript Two Fer Code Solution and Test
**** TypeScript Two Fer Code Solution

#+name:typescript-two-fer-code-solution
#+begin_src js :tangle typescript/two-fer/two-fer.ts
class TwoFer {
  static twoFer( name:string="you" ) {
    return(`One for ${name}, one for me.`);
  }
}

export default TwoFer

#+end_src

{{{heading(TypeScript Two Fer Test Results)}}}

#+name:typescript-two-fer-test-results
#+begin_src sh :dir typescript/two-fer :results output :exports results
yarn test
#+end_src

#+RESULTS: typescript-two-fer-test-results
: yarn run v1.16.0
: $ tsc --noEmit -p . && jest --no-cache
: Done in 2.27s.

**** TypeScript Two Fer Test

#+name:typescript-two-fer-tests
#+begin_src js :tangle typescript/two-fer/two-fer.test.ts :mkdirp yes
import TwoFer from './two-fer'

describe('TwoFer', () => {
  it('no name given', () => {
    const expected = 'One for you, one for me.'
    expect(TwoFer.twoFer()).toEqual(expected)
  })

  it('a name given', () => {
    const expected = 'One for Alice, one for me.'
    expect(TwoFer.twoFer('Alice')).toEqual(expected)
  })

  it('another name given', () => {
    const expected = 'One for Bob, one for me.'
    expect(TwoFer.twoFer('Bob')).toEqual(expected)
  })
})

#+end_src
** TypeScript Leap
:PROPERTIES:
:source:   JavaRanch Cattle Drive, exercise 3 http://www.javaranch.com/leap.jsp
:END:
Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

- on every year that is evenly divisible by 4
- except every year that is evenly divisible by 100
- unless the year is also evenly divisible by 400


For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but
2000 is.

*** TypeScript Leap Readme
#+name:typescript-leap-readme
#+begin_src sh :tangle typescript/leap/README.md :mkdirp yes
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src
*** TypeScript Leap Scripts
**** TypeScriipt Leap Download Script
#+name:typescript-leap-download-script
#+begin_src sh :results output
exercism download --exercise=leap --track=typescript
#+end_src

#+RESULTS: typescript-leap-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/typescript/leap

**** TypeScript Leap Submit Script
#+name:typescript-leap-submit-script
#+begin_src sh :results output
exercism submit typescript/leap/leap.ts
#+end_src

#+RESULTS: typescript-leap-submit-script
:     https://exercism.io/my/solutions/1fe455d365f946e69ed99df4984febf8
: 

*** TypeScript Leap Metadata
#+name:typescript-leap-metadata-package.json
#+begin_src js :tangle typescript/leap/package.json :mkdirp yes
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}

#+end_src

#+name:typescript-leap-install
#+begin_src sh :dir typescript/leap :results output :exports results
yarn install
#+end_src

#+name:typescript-leap-metadata-tsconfig.js
#+begin_src js :tangle typescript/leap/tsconfig.json :mkdirp yes
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}
#+end_src

#+name:typescript-leap-metadata-tslint.json
#+begin_src js :tangle typescript/leap/tslint.json :mkdirp yes
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}
#+end_src

#+name:typescript-leap-metadata-exercism
#+begin_src js :tangle typescript/leap/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"typescript",
    "exercise":"leap",
    "id":"1fe455d365f946e69ed99df4984febf8",
    "url":"https://exercism.io/my/solutions/1fe455d365f946e69ed99df4984febf8",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript Leap Solution and Tests
**** TypeScript Leap Solution Code
#+name:typescript-leap-solution
#+begin_src js :tangle typescript/leap/leap.ts :mkdirp yes
function isLeapYear(year : number) : boolean {

    let div_4   = (year:number) => !(year % 4);
    let div_100 = (year:number) => !(year % 100);
    let div_400 = (year:number) => !(year % 400);

    return div_4(year) && !(div_100(year) && !div_400(year));
}

export default isLeapYear
#+end_src

#+name:typescript-leap-run-tests
#+begin_src sh :dir typescript/leap :results output :exports results
yarn test 2> results.txt
cat results.txt
#+end_src
***** Mentor Commentary
:PROPERTIES:
:mentor:   snowfrogdev
:date:     2019-06-25
:END:
Congratulations on solving this problem and passing all the tests.  I like how
you made individual variables to wrap the divisible by X checks.

One of the main teaching goals for this exercise is to help the student get a
better grasp of logical operators and short-circuiting.  With that in mind can
you try to refactor your code a little bit to keep the following in mind:

{{{heading(order of operation matters:)}}}

- 75% of all years cannot be leap years because they are not multiples of 4;
  test ~year % 4 === 0~ first
- 98.97% of all years that are multiples of 4 are not multiples of 100; test
  ~year % 100 !== 0~ second
- 1.03% of all years that are multiples of 4 are also multiples of 100 and 400;
  test ~year % 400 === 0~ third


Although your solution is correct in output, the check ~year % 400~ is executed
for all years that don't match ~year % 4 == 0~, and for these (75% of all
years), always returns false, because if something is not divisible by 4 it can
not be divisible by 400.  This is making a redundant check.

Essentially, I'd like you to rewrite your solution in a way that avoids making
unnecessary checks.  That's where short-circuiting comes in.  Let me know if
you need more guidance.

**** TypsScript Leap Tests
#+name:typescript-leap-tests
#+begin_src js :tangle typescript/leap/leap.test.ts
import isLeapYear from './leap'

describe('A leap year', () => {

  it('is not very common', () => {
    expect(isLeapYear(2015)).toBeFalsy()
  })

  it('is introduced every 4 years to adjust about a day', () => {
    expect(isLeapYear(2016)).toBeTruthy()
  })

  it('is skipped every 100 years to remove an extra day', () => {
    expect(isLeapYear(1900)).toBeFalsy()
  })

  it('is reintroduced every 400 years to adjust another day', () => {
    expect(isLeapYear(2000)).toBeTruthy()
  })

  describe('Additional example of a leap year that', () => {

    it('is not a leap year', () => {
      expect(isLeapYear(1978)).toBeFalsy()
    })

    it('is a common leap year', () => {
      expect(isLeapYear(1992)).toBeTruthy()
    })

    it('is skipped every 100 years', () => {
      expect(isLeapYear(2100)).toBeFalsy()
    })

    it('is reintroduced every 400 years', () => {
      expect(isLeapYear(2400)).toBeTruthy()
    })
  })
})

#+end_src
** TypeScript Gigasecond
:PROPERTIES:
:exercise: side
:END:
*** TypeScript Gigasecond Introduction
Given a moment, determine the moment that would be after a gigasecond has
passed.

A gigasecond is 10^9 (1,000,000,000) seconds.

{{{heading(Setup)}}}

Go through the [[https://exercism.io/tracks/typescript/installation][setup instructions]] for TypeScript to install the necessary
dependencies.

{{{heading(Requirements)}}}

Install assignment dependencies:

: $ yarn install

{{{heading(Making the test suite pass)}}}

Execute the tests with:

: $ yarn test

In the test suites all tests but the first have been skipped.  Once you get a
test passing, you can enable the next one by changing ~xit~ to ~it~.

{{{heading(Source)}}}

[[http://pine.fm/LearnToProgram/?Chapter=09][Chapter 9]] in Chris Pine's online Learn to Program tutorial.

*** TypeScript Gigasecond Scripts
**** TypeScript Gigasecond Download Script
#+name:typescript-gigasecond-download-script
#+begin_src sh
exercism download --exercise=gigasecond --terack=typescript
#+end_src

#+RESULTS: typescript-gigasecond-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/typescript/gigasecond

**** TypeScript Gigasecond Test Script
#+typescript-gigasecond-test-script
#+header: :dir typescript/gigasecond
#+header: :results output :exports results
#+begin_src sh
yarn lint && yarn test 2>&1
#+end_src

**** TypeScript Gigasecond Submit Script
#+name:typescript-gigasecond-submit-script
#+begin_src sh
exercism submit typescript/gigasecond/gigasecond.ts
#+end_src

#+RESULTS: typescript-gigasecond-submit-script
: https://exercism.io/my/solutions/5fa8d8dd0a1149f19d7db94c86a9848d

#+name:typescript-gigasecond-exercism-metadata
#+header: :mkdirp yes
#+begin_src js :tangle typescript/gigasecond/.exercism/metadata.json
{
    "track":"typescript",
    "exercise":"gigasecond",
    "id":"5fa8d8dd0a1149f19d7db94c86a9848d",
    "url":"https://exercism.io/my/solutions/5fa8d8dd0a1149f19d7db94c86a9848d",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript Gigasecond Readme
#+name:typescript-gigasecond-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle typescript/gigasecond/README.md
# Gigasecond

Given a moment, determine the moment that would be after a gigasecond
has passed.

A gigasecond is 10^9 (1,000,000,000) seconds.

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

Chapter 9 in Chris Pine's online Learn to Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=09](http://pine.fm/LearnToProgram/?Chapter=09)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** TypeScript Gigasecond Metadata
**** TypeScript Gigasecond Package File
#+name:typescript-gigasecond-package-file
#+begin_src js :tangle typescript/gigasecond/package.json
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}

#+end_src
**** TypeScript Gigasecond Package Installation
#+name:typescript-gigasecond-package-installation
#+header: :dir typescript/gigasecond
#+header: :results output :exports results
#+begin_src sh
yarn
#+end_src

#+RESULTS: typescript-gigasecond-package-installation
: yarn install v1.17.3
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 6.27s.

**** TypeScript Gigasecond TSConfig
#+name:typescript-gigasecond-tsconfig
#+begin_src js :tangle typescript/gigasecond/tsconfig.json
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}

#+end_src
**** TypeScript Gigasecond TSLint
#+name:typescript-gigasecond-tslint
#+begin_src js :tangle typescript/gigasecond/tslint.json
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}

#+end_src

*** TypeScript Gigasecond Tests and Solution
**** TypeScript Gigasecond Tests
#+name:typescrpt-gigasecond-tests
#+begin_src js -n :tangle typescript/gigasecond/gigasecond.test.ts
import Gigasecond from './gigasecond'

describe('Gigasecond', () => {

  it('tells a gigasecond anniversary since midnight', () => {
    const gs = new Gigasecond(new Date(Date.UTC(2015, 8, 14)))
    const expectedDate = new Date(Date.UTC(2047, 4, 23, 1, 46, 40))
    expect(gs.date()).toEqual(expectedDate)
  })

  it('tells the anniversary is next day when you are born at night', () => {
    const gs = new Gigasecond(new Date(Date.UTC(2015, 8, 14, 23, 59, 59)))
    const expectedDate = new Date(Date.UTC(2047, 4, 24, 1, 46, 39))
    expect(gs.date()).toEqual(expectedDate)
  })

  it('even works before 1970 (beginning of Unix epoch )', () => {
    const gs = new Gigasecond(new Date(Date.UTC(1959, 6, 19, 5, 13, 45)))
    const expectedDate = new Date(Date.UTC(1991, 2, 27, 7, 0, 25))
    expect(gs.date()).toEqual(expectedDate)
  })

  it('make sure calling "date" doesn\'t mutate value', () => {
    const gs = new Gigasecond(new Date(Date.UTC(1959, 6, 19, 5, 13, 45)))
    const expectedDate = new Date(Date.UTC(1991, 2, 27, 7, 0, 25))
    gs.date()
    expect(gs.date()).toEqual(expectedDate)
  })
})

#+end_src
**** TypeScript Gigasecond Solution
#+name:typescript-gigasecond-solution
#+begin_src js -n :tangle typescript/gigasecond/gigasecond.ts
export default class Gigasecond {
    moment: Date

    constructor(moment: Date) {
        this.moment = moment
    }

    date() {
        return new Date(this.moment.getTime() + 10 ** 12)
    }
}
#+end_src
** TypeScript Difference of Squares
{{{heading(Introduction)}}}

Find the difference between the square of the sum and the sum of the squares of
the first N natural numbers.

- The square of the sum of the first ten natural numbers ::
  =(1 + 2 + ... + 10)²  = 55² = 3025=

- The sum of the squares of the first ten natural numbers ::
  =1² + 2² + ... + 10² = 385=

- The difference between the square of the sum of the first ten natural numbers
  and the sum of the squares of the first ten natural numbers ::
  =3025 - 385 = 2640=


You are not expected to discover an efficient solution to this yourself from
first principles; research is allowed, indeed, encouraged. Finding the best
algorithm for the problem is a key skill in software engineering.

*** TypeScript Difference of Squares Scripts
**** TypeScript Difference of Squares Download Script
#+name:typescript-difference-of-squares-download-script
#+header: :results output
#+begin_src sh
exercism download --exercise=difference-of-squares --track=typescript
#+end_src

**** TypeScript Difference of Squares Submit Script
#+name:typescript-difference-of-squares-submit-script
#+begin_src sh :results output :exports code
exercism submit typescript/difference-of-squares/difference-of-squares.ts
#+end_src

#+RESULTS: typescript-difference-of-squares-submit-script
:     https://exercism.io/my/solutions/d17b1f2cbe9a45d790a39362cac02f6e
: 

#+name:typescript-difference-of-squares-exercism-metadata
#+header: :exports none :mkdirp yes
#+begin_src js :tangle typescript/difference-of-squares/.exercism/metadata.json
  {
      "track":"typescript",
      "exercise":"difference-of-squares",
      "id":"d17b1f2cbe9a45d790a39362cac02f6e",
      "url":"https://exercism.io/my/solutions/d17b1f2cbe9a45d790a39362cac02f6e",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

**** TypeScript Difference of Squares Dependency Installation
#+name:typescript-difference-of-squares-dependency-install
#+header: :results output :exports both
#+begin_src sh :dir typescript/difference-of-squares
yarn install
#+end_src

#+RESULTS: typescript-difference-of-squares-dependency-install
: yarn install v1.16.0
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 42.57s.

*** TypeScript Difference of Squares Metadata
**** TypeScript Difference of Squares Package
{{{heading(Package.json)}}}

#+name:typescript-difference-of-squares-package.json
#+begin_src js :tangle typescript/difference-of-squares/package.json
{
  "name": "@exercism/typescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/typescript"
  },
  "devDependencies": {
    "@types/jest": "^24.0.15",
    "@types/node": "^12.6.8",
    "@typescript-eslint/eslint-plugin": "^1.13.0",
    "@typescript-eslint/parser": "^1.13.0",
    "eslint": "^6.1.0",
    "eslint-plugin-import": "^2.18.2",
    "jest": "^24.8.0",
    "ts-jest": "^24.0.2",
    "typescript": "^3.5.3"
  },
  "scripts": {
    "test": "yarn lint:types && jest --no-cache",
    "lint": "yarn lint:types && yarn lint:ci",
    "lint:types": "yarn tsc --noEmit -p .",
    "lint:ci": "eslint . --ext .tsx,.ts"
  },
  "dependencies": {}
}
#+end_src

**** TypeScript Difference of Squares TSConfig
{{{heading(TSConfig.json)}}}

#+name:typescript-difference-of-squares-tsconfig.json
#+begin_src js :tangle typescript/difference-of-squares/tsconfig.json
{
  "compilerOptions": {
    /* Basic Options */
    "target": "es2017",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["esnext", "es2016", "es2017"],    /* Specify library files to be included in the compilation. */
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": true,                        /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "./build",                      /* Redirect output structure to the directory. */
    // "rootDirs": ["./"],                    /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    "isolatedModules": true,                  /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "noEmitOnError": true,                    /* Do not emit outputs when compilation fails. */

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    "noUnusedParameters": true,               /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    "moduleResolution": "node",               /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": { "~src/*": ["./src/*"] },                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    "allowSyntheticDefaultImports": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  "compileOnSave": true,
  "exclude": [
    "node_modules"
  ]
}
#+end_src

**** TypeScript Difference of Squares ESLint
{{{heading(.eslintrc File)}}}

#+name:typescript-difference-of-squares-tslint.json
#+begin_src js :tangle typescript/difference-of-squares/.eslintrc
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
  ],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
    "@typescript-eslint/array-type": "off", // Styling not forced upon the student
    "@typescript-eslint/explicit-function-return-type": [
      "warn", {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true
      }
    ], // Prevent bugs
    "@typescript-eslint/explicit-member-accessibility": "off", // Styling not forced upon the student
    "@typescript-eslint/indent": "off", // Styling not forced upon the student
    "@typescript-eslint/member-delimiter-style": "off", // Styling not forced upon the student
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-parameter-properties": [
      "warn", {
        "allows": [
          "private", "protected", "public",
          "private readonly", "protected readonly", "public readonly"
        ]
      }
    ], // only disallow readonly without an access modifier
    "@typescript-eslint/no-unused-vars": "off", // Covered by the tsc compiler (noUnusedLocals)
    "@typescript-eslint/no-use-before-define": [
      "error", {
        "functions": false,
        "typedefs": false
      }
    ], // Prevent bugs, not styling
    "semi": "off", // Always disable base-rule
    "@typescript-eslint/semi": "off" // Styling not forced upon student
  }
}

#+end_src

{{{heading(.eslintignore File)}}}

#+name:typescript-difference-of-squares-eslintignore
#+begin_src js :tangle typescript/difference-of-squares/.eslintignore
bin/*
dist/*
docs/*
node_modules/*
production_node_modules/*
test/fixtures/*
tmp/*
jest.config.js
#+end_src

**** TypeScript Difference of Squares Jest Config
{{{heading(Jest.config.js)}}}

#+name:typescript-difference-of-squares-jest-config
#+begin_src js :tangle typescript/difference-of-squares/jest.config.js
module.exports = {
  verbose: true,
  projects: [
    '<rootDir>'
  ],
  testMatch: [
    "**/__tests__/**/*.[jt]s?(x)",
    "**/test/**/*.[jt]s?(x)",
    "**/?(*.)+(spec|test).[jt]s?(x)"
  ],
  testPathIgnorePatterns: [
    '/(?:production_)?node_modules/',
    '.d.ts$',
    '<rootDir>/test/fixtures',
    '<rootDir>/test/helpers',
    '__mocks__'
  ],
  transform: {
    '^.+\\.[jt]sx?$': 'ts-jest',
  },
};
#+end_src

*** TypeScript Difference of Squares README
{{{heading(README)}}}

#+name:typescript-difference-of-squares-README
#+begin_src markdown :tangle typescript/difference-of-squares/README.md :mkdirp yes
# Difference Of Squares

Find the difference between the square of the sum and the sum of the squares of the first N natural numbers.

The square of the sum of the first ten natural numbers is
(1 + 2 + ... + 10)² = 55² = 3025.

The sum of the squares of the first ten natural numbers is
1² + 2² + ... + 10² = 385.

Hence the difference between the square of the sum of the first
ten natural numbers and the sum of the squares of the first ten
natural numbers is 3025 - 385 = 2640.

You are not expected to discover an efficient solution to this yourself from
first principles; research is allowed, indeed, encouraged. Finding the best
algorithm for the problem is a key skill in software engineering.

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

Problem 6 at Project Euler [http://projecteuler.net/problem=6](http://projecteuler.net/problem=6)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** TypeScript Difference of Squares Solution and Tests
**** TypeScript Difference of Squares Solution
{{{heading(Difference of Squares Solution)}}}

#+name:typescript-difference-of-squares-solution
#+begin_src js :tangle typescript/difference-of-squares/difference-of-squares.ts
  export default class Squares {
      constructor (private num:number) {
          this.num = num;
      }

      get sumOfSquares () {
          let sum = 0;
          for (let x = 1; x <= this.num; x++) {
              sum += x * x;
          }
          return sum;
      }

      get squareOfSum () {
          let sum = 0;
          for (let x = 1; x <= this.num; x++) {
              sum += x;
          }
          return sum * sum;
      }

      get difference () {
          return this.squareOfSum - this.sumOfSquares;
      }
  }
#+end_src

{{{heading(Test Solution)}}}

#+name:typescript-difference-of-squares-test-solution
#+header: :dir typescript/difference-of-squares
#+header: :results output :exports both
#+begin_src sh
yarn test 2>&1
#+end_src

#+RESULTS: typescript-difference-of-squares-test-solution
#+begin_example
yarn run v1.16.0
$ yarn lint:types && jest --no-cache
$ yarn tsc --noEmit -p .
$ /usr/local/dev/programming/Languages/Exercism/typescript/difference-of-squares/node_modules/.bin/tsc --noEmit -p .
PASS ./difference-of-squares.test.ts
  Squares
    up to 5
      ✓ gets the square of sum (2ms)
      ✓ gets the sum of squares
      ✓ gets the difference
    up to 10
      ✓ gets the square of sum
      ✓ gets the sum of squares
      ✓ gets the difference
    up to 100
      ✓ gets the square of sum (1ms)
      ✓ gets the sum of squares
      ✓ gets the difference

Test Suites: 1 passed, 1 total
Tests:       9 passed, 9 total
Snapshots:   0 total
Time:        2.292s
Ran all test suites.
Done in 6.10s.
#+end_example

**** TypeScript Difference of Squares Tests
#+name:typescript-difference-of-squares-tests
#+begin_src js :tangle typescript/difference-of-squares/difference-of-squares.test.ts
import Squares from './difference-of-squares'

describe('Squares', () => {

  describe('up to 5', () => {
    const squares = new Squares(5)

    it('gets the square of sum', () => {
      expect(squares.squareOfSum).toBe(225)
    })

    it('gets the sum of squares', () => {
      expect(squares.sumOfSquares).toBe(55)
    })

    it('gets the difference', () => {
      expect(squares.difference).toBe(170)
    })

  })

  describe('up to 10', () => {
    const squares = new Squares(10)

    it('gets the square of sum', () => {
      expect(squares.squareOfSum).toBe(3025)
    })

    it('gets the sum of squares', () => {
      expect(squares.sumOfSquares).toBe(385)
    })

    it('gets the difference', () => {
      expect(squares.difference).toBe(2640)
    })

  })

  describe('up to 100', () => {
    const squares = new Squares(100)

    it('gets the square of sum', () => {
      expect(squares.squareOfSum).toBe(25502500)
    })

    it('gets the sum of squares', () => {
      expect(squares.sumOfSquares).toBe(338350)
    })

    it('gets the difference', () => {
      expect(squares.difference).toBe(25164150)
    })

  })

})
#+end_src

** TypeScript Word Count
Given a phrase, count the occurrences of each word in that phrase.

For example for the input "olly olly in come free"

#+begin_example
olly: 2
in: 1
come: 1
free: 1
#+end_example

*** TypeScript Word Count Scripts
**** TypeScript Word Count Install Script
#+name:typescript-word-count-install-script
#+begin_src sh :results output :mkdirp yes
exercism download --exercise=word-count --track=typescript
#+end_src

#+RESULTS: typescript-word-count-install-script
: /Users/pine/Dev/Programming/Languages/Exercism/typescript/word-count

**** TypeScript Word Count Submit Script
#+name:typescript-word-count-submit-script
#+begin_src sh :results output
exercism submit typescript/word-count/word-count.ts
#+end_src

#+RESULTS: typescript-word-count-submit-script
:     https://exercism.io/my/solutions/c14ff64228e547229f6b7d766650898c
: 

#+name:typescript-word-count-exercism-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle typescript/word-count/.exercism/metadata.json
{
    "track":"typescript",
    "exercise":"word-count",
    "id":"c14ff64228e547229f6b7d766650898c",
    "url":"https://exercism.io/my/solutions/c14ff64228e547229f6b7d766650898c",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript Word Count README
#+name:typescript-word-count-readme
#+begin_src markdown :tangle typescript/word-count/README.md :mkdirp yes
# Word Count

Given a phrase, count the occurrences of each word in that phrase.

For example for the input `"olly olly in come free"`

```text
olly: 2
in: 1
come: 1
free: 1
```

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

This is a classic toy problem, but we were reminded of it by seeing it in the Go Tour.

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src
*** TypeScript Word Count Metadata
**** TypeScript Word Count Package File
{{{heading(Package.json)}}}

#+name:typescript-word-count-metadata-package.json
#+begin_src js :tangle typescript/word-count/package.json
{
  "name": "@exercism/typescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/typescript"
  },
  "devDependencies": {
    "@types/jest": "^24.0.15",
    "@types/node": "^12.6.8",
    "@typescript-eslint/eslint-plugin": "^1.13.0",
    "@typescript-eslint/parser": "^1.13.0",
    "eslint": "^6.1.0",
    "eslint-plugin-import": "^2.18.2",
    "jest": "^24.8.0",
    "ts-jest": "^24.0.2",
    "typescript": "^3.5.3"
  },
  "scripts": {
    "test": "yarn lint:types && jest --no-cache",
    "lint": "yarn lint:types && yarn lint:ci",
    "lint:types": "yarn tsc --noEmit -p .",
    "lint:ci": "eslint . --ext .tsx,.ts"
  },
  "dependencies": {}
}
#+end_src

{{{heading(Install Package Dependencies Script)}}}

#+name:typescript-word-count-package-install-script
#+header: :dir typescript/word-count
#+header: :results output :exports both
#+begin_src sh
yarn install
#+end_src

#+RESULTS: typescript-word-count-package-install-script
: yarn install v1.17.3
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 11.65s.

**** TypeScript Word Count TSConfig File
{{{heading(TSConfig.json)}}}

{{{subheading(tsconfig.json)}}}

#+name:typescript-word-count-metadata-tsconfig.json
#+begin_src js :tangle typescript/word-count/tsconfig.json
{
  "compilerOptions": {
    /* Basic Options */
    "target": "es2017",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["esnext", "es2016", "es2017"],    /* Specify library files to be included in the compilation. */
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": true,                        /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "./build",                      /* Redirect output structure to the directory. */
    // "rootDirs": ["./"],                    /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    "isolatedModules": true,                  /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "noEmitOnError": true,                    /* Do not emit outputs when compilation fails. */

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    "noUnusedParameters": true,               /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    "moduleResolution": "node",               /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": { "~src/*": ["./src/*"] },                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    "allowSyntheticDefaultImports": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  "compileOnSave": true,
  "exclude": [
    "node_modules"
  ]
}
#+end_src

**** TypeScript Word Count ESLintrc File
{{{heading(ESLintRC File)}}}

{{{subheading(.eslintrc)}}}

#+name:typescript-word-count-metadata-eslintrc
#+begin_src js :tangle typescript/word-count/.eslintrc
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
  ],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
    "@typescript-eslint/array-type": "off", // Styling not forced upon the student
    "@typescript-eslint/explicit-function-return-type": [
      "warn", {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true
      }
    ], // Prevent bugs
    "@typescript-eslint/explicit-member-accessibility": "off", // Styling not forced upon the student
    "@typescript-eslint/indent": "off", // Styling not forced upon the student
    "@typescript-eslint/member-delimiter-style": "off", // Styling not forced upon the student
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-parameter-properties": [
      "warn", {
        "allows": [
          "private", "protected", "public",
          "private readonly", "protected readonly", "public readonly"
        ]
      }
    ], // only disallow readonly without an access modifier
    "@typescript-eslint/no-unused-vars": "off", // Covered by the tsc compiler (noUnusedLocals)
    "@typescript-eslint/no-use-before-define": [
      "error", {
        "functions": false,
        "typedefs": false
      }
    ], // Prevent bugs, not styling
    "semi": "off", // Always disable base-rule
    "@typescript-eslint/semi": "off" // Styling not forced upon student
  }
}
#+end_src

{{{heading(ESLintIgnore File)}}}

{{{subheading(.eslintignore)}}}

#+name:typescript-word-count-metadata-eslintignore
#+begin_src sh :tangle typescript/word-count/.eslintignore
bin/*
dist/*
docs/*
node_modules/*
production_node_modules/*
test/fixtures/*
tmp/*
jest.config.js
#+end_src

**** TypeScript Word Count Jest Config File
{{{heading(Jest Config File)}}}

{{{subheading(jest.config.js)}}}

#+name:typescript-word-count-jest.config.js
#+begin_src js :tangle typescript/word-count/jest.config.js
module.exports = {
  verbose: true,
  projects: [
    '<rootDir>'
  ],
  testMatch: [
    "**/__tests__/**/*.[jt]s?(x)",
    "**/test/**/*.[jt]s?(x)",
    "**/?(*.)+(spec|test).[jt]s?(x)"
  ],
  testPathIgnorePatterns: [
    '/(?:production_)?node_modules/',
    '.d.ts$',
    '<rootDir>/test/fixtures',
    '<rootDir>/test/helpers',
    '__mocks__'
  ],
  transform: {
    '^.+\\.[jt]sx?$': 'ts-jest',
  },
};
#+end_src

*** TypeScript Word Count Test File
{{{heading(Word Count Test File)}}}

{{{subheading(word-count.test.js)}}}

#+name:typescript-word-count-test-file
#+begin_src js :tangle typescript/word-count/word-count.test.ts
import Words from './word-count'

describe('words()', () => {
  const words = new Words()

  it('counts one word', () => {
    const expectedCounts = new Map(Object.entries({ word: 1 }))
    expect(words.count('word')).toEqual(expectedCounts)
  })

  it('counts one of each', () => {
    const expectedCounts = new Map(Object.entries({ one: 1, of: 1, each: 1 }))
    expect(words.count('one of each')).toEqual(expectedCounts)
  })

  it('counts multiple occurrences', () => {
    const expectedCounts = new Map(Object.entries({ one : 1, fish: 4, two: 1, red: 1, blue: 1 }))
    expect(words.count('one fish two fish red fish blue fish')).toEqual(expectedCounts)
  })

  it('includes punctuation', () => {
    const expectedCounts = new Map(Object.entries({ car: 1, ':': 2, carpet: 1, as: 1, java: 1, 'javascript!!&@$%^&': 1 }))
    expect(words.count('car : carpet as java : javascript!!&@$%^&')).toEqual(expectedCounts)
  })

  it('includes numbers', () => {
    const expectedCounts = new Map(Object.entries({ testing: 2, 1: 1, 2: 1 }))
    expect(words.count('1 2 testing testing')).toEqual(expectedCounts)
  })

  it('normalizes to lower case', () => {
    const expectedCounts = new Map(Object.entries({ go: 3 }))
    expect(words.count('go Go GO')).toEqual(expectedCounts)
  })

  it('counts properly international characters', () => {
    const expectedCounts = new Map(Object.entries({ '¡hola!': 1, '¿qué': 1, 'tal?': 1, 'привет!': 1 }))
    expect(words.count('¡Hola! ¿Qué tal? Привет!')).toEqual(expectedCounts)
  })

  it('counts multiline', () => {
    const expectedCounts = new Map(Object.entries({ hello: 1, world: 1 }))
    expect(words.count('hello\nworld')).toEqual(expectedCounts)
  })

  it('counts tabs', () => {
    const expectedCounts = new Map(Object.entries({ hello: 1, world: 1 }))
    expect(words.count('hello\tworld')).toEqual(expectedCounts)
  })

  it('counts multiple spaces as one', () => {
    const expectedCounts = new Map(Object.entries({ hello: 1, world: 1 }))
    expect(words.count('hello  world')).toEqual(expectedCounts)
  })

  it('does not count leading or trailing whitespace', () => {
    const expectedCounts = new Map(Object.entries({ introductory: 1, course: 1 }))
    expect(words.count('\t\tIntroductory Course      ')).toEqual(expectedCounts)
  })

  it('handles properties that exist on Object’s prototype', () => {
    const expectedCounts = new Map(Object.entries({ reserved: 1, words : 1, like : 1,  constructor: 1, and : 1, tostring: 1,  'ok?': 1}))
    expect(words.count('reserved words like constructor and toString ok?')).toEqual(expectedCounts)
  })
})

#+end_src

*** TypeScript Word Count Solution File
{{{heading(Word Count Solution)}}}

{{{subheading(word-count.ts)}}}

#+name:typescript-word-count-solution-file
#+begin_src js :tangle typescript/word-count/word-count.ts
export default class Words {

    count (phrase:string) {
        const map = new Map();
        const spl = new RegExp(/[\s\n\t]+/);

        phrase
            .trim()
            .toLowerCase()
            .replace(/^spl/,'')
            .split(spl)
            .forEach(e => {
                if (map.has(e)) {
                    map.set(e, map.get(e) + 1);
                } else {
                    map.set(e, 1);
                }
            });
        return map;
    }
}
#+end_src

{{{heading(Test Solution Script)}}}

#+name:typescript-word-count-test-solution-file
#+header: :dir typescript/word-count
#+header: :results output :exports both
#+begin_src sh
yarn test 2>&1
#+end_src
** TypeScript RNA Transcription
Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are:
- adenine (A)
- cytosine (C)
- guanine (G)
- thymine (T)


The four nucleotides found in RNA are:
- adenine (A)
- cytosine (C)
- guanine (G)
- uracil (U)


Given a DNA strand, its transcribed RNA strand is formed by replacing each
nucleotide with its complement:

- G -> C
- C -> G
- T -> A
- A -> U

*** TypeScript RNA Transcription Scripts
**** TypeScript RNA Transcription Download Script
#+name:typescript-rna-transcription-download-script
#+header: :results output
#+begin_src sh
exercism download --exercise=rna-transcription --track=typescript
#+end_src

**** TypeScript RNA Transcription Install Dependencies
#+name:typescript-rna-transcription-install-dependencies
#+header: :dir typescript/rna-transcription
#+header: :results output :exports results
#+begin_src sh
yarn install
#+end_src

#+RESULTS: typescript-rna-transcription-install-dependencies
: yarn install v1.17.3
: info No lockfile found.
: [1/4] Resolving packages...
: [2/4] Fetching packages...
: [3/4] Linking dependencies...
: [4/4] Building fresh packages...
: success Saved lockfile.
: Done in 5.86s.

**** TypeScript RNA Transcription Submit Script
#+name:typescript-rna-transcription-submit-script
#+header: :results output :exports none
#+begin_src sh
exercism submit typescript/rna-transcription/rna-transcription.ts
#+end_src

#+RESULTS: typescript-rna-transcription-submit-script
:     https://exercism.io/my/solutions/62a8630b3f034da3ad10af1c8b2b369d
: 

#+name:tiypescript-rna-transcription-exercism-metadata
#+header: :mkdirp yes
#+header: :exports none
#+begin_src js :tangle typescript/rna-transcription/.exercism/metadata.json
{
    "track":"typescript",
    "exercise":"rna-transcription",
    "id":"62a8630b3f034da3ad10af1c8b2b369d",
    "url":"https://exercism.io/my/solutions/62a8630b3f034da3ad10af1c8b2b369d",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** TypeScript RNA Transcription Readme
#+name:typescript-rna-transcription-readme
#+begin_src markdown :tangle typescript/rna-transcription/README.md :mkdirp yes
# RNA Transcription

Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and thymine (**T**).

The four nucleotides found in RNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and uracil (**U**).

Given a DNA strand, its transcribed RNA strand is formed by replacing
each nucleotide with its complement:

,* `G` -> `C`
,* `C` -> `G`
,* `T` -> `A`
,* `A` -> `U`

## Setup

Go through the setup instructions for TypeScript to install the necessary
dependencies:

[https://exercism.io/tracks/typescript/installation](https://exercism.io/tracks/typescript/installation)

## Requirements

Install assignment dependencies:

```bash
$ yarn install
```

## Making the test suite pass

Execute the tests with:

```bash
$ yarn test
```

In the test suites all tests but the first have been skipped.

Once you get a test passing, you can enable the next one by changing `xit` to
`it`.

## Source

Hyperphysics [http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html](http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have
completed the exercise.

#+end_src

*** TypeScript RNA Transcription Package Files
**** TypeScript RNA Transcription Package
#+name:typescript-rna-transcription-package-json
#+begin_src js :tangle typescript/rna-transcription/package.json
{
  "name": "xtypescript",
  "version": "1.0.0",
  "description": "Exercism exercises in Typescript.",
  "author": "",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/exercism/xtypescript"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tsc --noEmit -p . && jest --no-cache",
    "lint": "tsc --noEmit -p . && tslint \"*.ts?(x)\"",
    "lintci": "tslint \"*.ts?(x)\" --force"
  },
  "dependencies": {
    "@types/jest": "^21.1.5",
    "@types/node": "^8.0.47",
    "jest": "^21.2.1",
    "ts-jest": "^21.1.3",
    "tslint": "^5.8.0",
    "typescript": "^2.5.3"
  },
  "jest": {
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js"
    ]
  }
}

#+end_src
**** TypeScript RNA Transcription TSConfig
#+name:typescript-rna-transcription-tsconfig-json
#+begin_src js :tangle typescript/rna-transcription/tsconfig.json
{
    "compilerOptions": { 
        "target": "es2017",
        "module": "commonjs",
        "alwaysStrict": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noImplicitAny": true,
        "strictNullChecks": true,
        "preserveConstEnums": true,
        "noFallthroughCasesInSwitch":true,
        "noImplicitThis":true,
        "noImplicitReturns":true,
        "sourceMap": true,
        "noEmitOnError": true,
        "outDir": "./build"
    },
    "compileOnSave": true, 
    "exclude": [
        "node_modules"
    ]
}

#+end_src
**** TypeScript RNA Transcription TSLint
#+name:typescript-rna-transcription-tslint-json
#+begin_src js :tangle typescript/rna-transcription/tslint.json
{
    "jsRules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-duplicate-variable": true,
        "no-eval": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [
            false,
            "double"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
    },
    "rules": {
        "class-name": true,
        "comment-format": [
            true,
            "check-space"
        ],
        "indent": [
            true,
            "spaces"
        ],
        "no-eval": true,
        "no-internal-module": true,
        "no-trailing-whitespace": true,
        "no-unsafe-finally": true,
        "no-var-keyword": true,
        "one-line": [
            true,
            "check-open-brace",
            "check-whitespace"
        ],
        "semicolon": [
            true,
            "never"
        ],
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            }
        ],
        "variable-name": [
            true,
            "ban-keywords"
        ],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        "no-namespace": true, 
        "prefer-for-of": true,
        "only-arrow-functions": [true, "allow-declarations"],
        "no-var-requires": true,
        "no-any": true,
        "curly": true,
        "forin": true,
        "no-arg": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-console": [true, "log", "error"],
        "no-construct": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-invalid-this": [true, "check-function-in-method"],
        "no-misused-new": true,
        "no-null-keyword": true,
        "no-string-literal": true,
        "radix": true,
        "typeof-compare": true,
        "use-isnan": true,
        "prefer-const": true,
        "array-type": [true, "array-simple"],
        "arrow-parens": true,
        "new-parens": true,
        "no-consecutive-blank-lines": [true,1],
        "no-parameter-properties": true,
        "no-unnecessary-initializer": true,
        "object-literal-shorthand": true,
        "object-literal-key-quotes": [true, "as-needed"]
    }
}

#+end_src

*** TypeScript RNA Transcription Solution Code
#+name:typescript-rna-transcription-rna_transcription
#+begin_src js -n :tangle typescript/rna-transcription/rna-transcription.ts
  enum DNA {A, C, G, T}
  enum RNA {A, C, G, U}

  function isDNA (it : DNA|any) : it is DNA {
      return DNA[it as DNA] !== undefined;
  }

  type DNA_STRAND = string;
  type RNA_STRAND = string;

  interface DNA2RNA {
      [dna:string]: RNA;
  }

  const dna_2_rna: DNA2RNA = {
      G : RNA.C,
      C : RNA.G,
      T : RNA.A,
      A : RNA.U,
  }

  class Transcriptor {

      toRna( dna_strand : DNA_STRAND ): RNA_STRAND {
          return dna_strand
              .split('')
              .map(dna => {
                  if (isDNA(dna)) {
                      return RNA[dna_2_rna[dna]]
                  } else
                      throw new Error('Invalid input DNA.');
              })
              .join('');
      }
  }

  export default Transcriptor;
#+end_src

{{{heading(Test Results)}}}

#+name:typescript-rna-transcription-run-tests
#+header: :dir typescript/rna-transcription
#+header: :results output :exports results
#+begin_src sh
yarn test 2>&1
#+end_src

*** TypeScript RNA Transcription Test Code
#+name:typescript-rna-transcription-test-code
#+begin_src ts -n :tangle typescript/rna-transcription/rna-transcription.test.ts
import Transcriptor from './rna-transcription'

describe('Transcriptor', () => {
  const transcriptor = new Transcriptor()

  it('transcribes cytosine to guanine', () => {
    expect(transcriptor.toRna('C')).toEqual('G')
  })

  it('transcribes guanine to cytosine', () => {
    expect(transcriptor.toRna('G')).toEqual('C')
  })

  it('transcribes adenine to uracil', () => {
    expect(transcriptor.toRna('A')).toEqual('U')
  })

  it('transcribes thymine to adenine', () => {
    expect(transcriptor.toRna('T')).toEqual('A')
  })

  it('transcribes all dna nucleotides to their rna complements', () => {
    expect(transcriptor.toRna('ACGTGGTCTTAA'))
        .toEqual('UGCACCAGAAUU')
  })

  it('correctly handles invalid input', () => {
    expect(() => transcriptor.toRna('U')).toThrowError(
      'Invalid input DNA.'
    )
  })

  it('correctly handles completely invalid input', () => {
    expect(() => transcriptor.toRna('XXX')).toThrowError(
      'Invalid input DNA.'
    )
  })

  it('correctly handles partially invalid input', () => {
    expect(() => transcriptor.toRna('ACGTXXXCTTAA')).toThrowError(
      'Invalid input DNA.'
    )
  })

})

#+end_src
* Python Exercism Track
- http://exercism.io/languages/python
- https://github.com/exercism/python

The Python code in this repo is meant to follow the [[https://www.python.org/dev/peps/pep-0008/][PEP8 style guide]] (a
stylized version http://pep8.org).

This repo uses [[http://flake8.readthedocs.org/en/latest/][flake8]] with default settings to enforce the coding standard.

** Python Exercism README
#+name:Readme-Python-track
#+begin_src txt :tangle python/README.md :mkdirp yes
# Exercism Python Track

[![Build Status](https://travis-ci.org/exercism/python.svg?branch=master)](https://travis-ci.org/exercism/python) [![Requirements Status](https://pyup.io/repos/github/exercism/python/shield.svg)](https://pyup.io/repos/github/exercism/python/)
[![Join the chat at https://gitter.im/exercism/python](https://badges.gitter.im/exercism/python.svg)](https://gitter.im/exercism/python?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Exercism exercises in Python


## Contributing Guide

Please see the [contributing guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md)


## Working on the Exercises

We welcome both improvements to the existing exercises and new exercises.
A list of missing exercise can be found here: https://github.com/exercism/python/issues/417#issuecomment-366040062


### Conventions

- We use minimalistic stub files for all exercises ([#272](https://github.com/exercism/python/issues/272)).
- We use `unittest` (Python Standard Library) and no 3rd-party-framework.
- We use the parameter order `self.assertEqual(actual, expected)` ([#440](https://github.com/exercism/python/issues/440)).
- We use context managers (`with self.assertRaises(\<exception type\>):`) for testing for exceptions ([#477](https://github.com/exercism/python/issues/477)).
- We use an established utility method to confirm that expected exceptions contain a non-empty message. This method must be included for any test class with an exception-based test case ([#1080](https://github.com/exercism/python/issues/1080#issuecomment-442068539)).
- We use `assertIs(actual, True)` and `assertIs(actual, False)` rather than `assertTrue(actual)` or `assertFalse(actual)` ([#419](https://github.com/exercism/python/pull/419)).
- We use a comment string in the test file to reference the version of the exercise's `canonical-data.json` that tests were adapted from (wording can be found in: [#784](https://github.com/exercism/python/issues/784)).


### Testing

All exercises must be compatible with Python versions 2.7 and 3.4 upwards.

To test a single exercise (e.g., with Python 2.7):
```
python2.7 test/check-exercises.py [exercise-name]
```

To test all exercises (e.g., with Python 3):
```
python3 test/check-exercises.py
```


### Code Style

The Python code in this repo is meant to follow the [PEP8 style guide](https://www.python.org/dev/peps/pep-0008/) (a stylized version http://pep8.org).

This repo uses [flake8](http://flake8.readthedocs.org/en/latest/) with default settings to enforce the coding standard.


### CI build

This repo uses `travis-ci` in the following configuration: [travis.yml](https://github.com/exercism/python/blob/master/.travis.yml)

It will automatically check the code style, the problem configuration, and run the unittests with all supported Python versions.


## Pull Requests

We :heart: pull requests!
We even :sparkling_heart: them if they contain well written commit messages!

Please write the first line of your commit message in the following style:

```exercise-name: Change some things```

Please try to follow the [The seven rules of a great Git commit message](https://chris.beams.io/posts/git-commit/#seven-rules) like to capitalize the subject line and use the imperative mood. If there are more details to add, put those into the body of the commit message.

If you're interested, Tim Pope even has an [entire blog post](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) on good commit messages.

If you're new to Git, take a look at [this short guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md#git-basics).

## License
This repository uses the [MIT License](/LICENSE).
#+end_src

** Python Hello World
Write a function that returns the string "Hello, World!"

You can tell Python to run the ~pytest~ module (allowing the same command to be
used regardless of Python version):

: python -m pytest hello_world_test.py

Changed computer or want to re-download the exercise after updating to the
latest version? Use this command:

: exercism download --exercise=hello-world --track=python

: Downloaded to
: /usr/local/dev/programming/Exercism/python/hello-world

*** Python Hello World Solution

#+name:hello_world.py
#+begin_src python -n :tangle python/hello-world/hello_world.py :mkdirp yes
def hello():
    return "Hello, World!"
#+end_src

#+name:python-hello-world-metadata
#+BEGIN_SRC js :tangle python/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"hello-world",
    "id":"86a587c4d6e34a078741d6be1edce608",
    "url":"https://exercism.io/my/solutions/86a587c4d6e34a078741d6be1edce608",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** Python Hello World Test

#+name:Python-Hello-World-Test
#+begin_src python :tangle python/hello-world/hello_world_test.py :mkdirp yes
import unittest

import hello_world

# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0

class HelloWorldTest(unittest.TestCase):
    def test_hello(self):
        self.assertEqual(hello_world.hello(), 'Hello, World!')


if __name__ == '__main__':
    unittest.main()
#+end_src

#+name:python-hello-world-test
#+begin_src sh :dir python/hello-world :results output :exports both
python3 -m pytest hello_world_test.py
#+end_src

#+RESULTS: python-hello-world-test
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/hello-world
: collected 1 item
: 
: hello_world_test.py .                                                    [100%]
: 
: =========================== 1 passed in 0.10 seconds ===========================

** Python Two Fer
Two-fer or 2-fer is short for two for one. One for you and one for me.

: "One for X, one for me."

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

To run the tests:
: python3 -m pytest two_fer_test.py

*** Python Two Fer Solution
#+name:Two-Fer-Solution
#+begin_src python -n :tangle python/two-fer/two_fer.py :mkdirp yes
def two_fer(name="you"):
    return f"One for {name}, one for me."
#+end_src

#+begin_src sh :dir python/two-fer :results output
python3 -m pytest two_fer_test.py
#+end_src

#+RESULTS:
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/two-fer
: collected 3 items
: 
: two_fer_test.py ...                                                      [100%]
: 
: =========================== 3 passed in 0.02 seconds ===========================

#+name:python-two-fer-metadata
#+BEGIN_SRC js :tangle python/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"two-fer",
    "id":"80dbb050e4f041efa796149983871746",
    "url":"https://exercism.io/my/solutions/80dbb050e4f041efa796149983871746",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

*** Python Two Fer Test
#+name:Python-Two-Fer-Test
#+begin_src python :tangle python/two-fer/two_fer_test.py :mkdirp yes
import unittest

from two_fer import two_fer


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0

class TwoFerTest(unittest.TestCase):
    def test_no_name_given(self):
        self.assertEqual(two_fer(), 'One for you, one for me.')

    def test_a_name_given(self):
        self.assertEqual(two_fer("Alice"), "One for Alice, one for me.")

    def test_another_name_given(self):
        self.assertEqual(two_fer("Bob"), "One for Bob, one for me.")


if __name__ == '__main__':
    unittest.main()
#+end_src

#+begin_src sh :dir python/two-fer :results output :exports both
python3 -m pytest two_fer_test.py
#+end_src

#+RESULTS:
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/two-fer
: collected 3 items
: 
: two_fer_test.py ...                                                      [100%]
: 
: =========================== 3 passed in 0.06 seconds ===========================

** Python High Scores
:PROPERTIES:
:level:    easy
:END:

*** Python High Scores Task
Manage a game player's High Score list.

Your task is to build a high-score component of the classic Frogger game, one
of the highest selling and addictive games of all time, and a classic of the
arcade era.  Your task is to write methods that return the highest score from
the list, the last added score, the three highest scores, and a report on the
difference between the last and the highest scores.

*** Python High Scores Readme

#+name:High_Scores_Python_Readme
#+begin_src txt :tangle python/high-scores/README.md :mkdirp yes
# High Scores

Manage a game player's High Score list.

Your task is to build a high-score component of the classic Frogger game, one of the highest selling and addictive games of all time, and a classic of the arcade era. Your task is to write methods that return the highest score from the list, the last added score and the three highest scores.

In this exercise, you're going to use and manipulate lists. Python lists are very versatile, and you'll find yourself using them again and again in problems both simple and complex.

- [**Data Structures (Python 3 Documentation Tutorial)**](https://docs.python.org/3/tutorial/datastructures.html)
- [**Lists and Tuples in Python (Real Python)**](https://realpython.com/python-lists-tuples/)
- [**Python Lists (Google for Education)**](https://developers.google.com/edu/python/lists)



## Exception messages

Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to
indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not
every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include
a message.

To raise a message with an exception, just write it as an argument to the exception type. For example, instead of
`raise Exception`, you should write:

```python
raise Exception("Meaningful message indicating the source of the error")
```

## Running the tests

To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):

- Python 2.7: `py.test high_scores_test.py`
- Python 3.4+: `pytest high_scores_test.py`

Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):
`python -m pytest high_scores_test.py`

### Common `pytest` options

- `-v` : enable verbose output
- `-x` : stop running tests on first failure
- `--ff` : run failures from previous test before running other test cases

For other options, see `python -m pytest -h`

## Submitting Exercises

Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/high-scores` directory.

You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.

For more detailed information about running tests, code style and linting,
please see [Running the Tests](http://exercism.io/tracks/python/tests).

## Source

Tribute to the eighties' arcade game Frogger

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python High Scores Scripts
**** Python High Scores Download Script
#+name:python-high-scores-download
#+begin_src sh
exercism download --exercise=high-scores --track=python
#+end_src

**** Python High Scores Run Tests
#+name:python-high-scores-run-tests
#+header: :shebang "#!/usr/bin/env bash"
#+header: :dir python/high-scores
#+header: :results output :exports results
#+begin_src sh :tangle python/high-scores/high_scores_run_tests.sh
python3 -m pytest high_scores_test.py
#+end_src

**** Python High Scores Submit Script
#+name:python-high-scores-submit
#+begin_src sh
exercism submit python/high-scores/high_scores.py
#+end_src

#+RESULTS: python-high-scores-submit
: https://exercism.io/my/solutions/485c09d00b054d51b421c3d06a7cec30

#+name:python-high-scores-metadata
#+BEGIN_SRC js :tangle python/high-scores/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"high-scores",
    "id":"485c09d00b054d51b421c3d06a7cec30",
    "url":"https://exercism.io/my/solutions/485c09d00b054d51b421c3d06a7cec30",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
  }
#+END_SRC

*** Python High Scores Code
#+cindex:@code{sorted()} library function
The built-in library function ~sorted()~ returns a sorted list (that is, the
original list is unchanged).

#+name:High_Scores_Python
#+begin_src python -n :tangle python/high-scores/high_scores.py :mkdirp yes
def latest(scores):
    return scores[-1]

def personal_best(scores):
    return max(scores)

def personal_top_three(scores):
    return sorted(scores, reverse=True)[:3]

#+end_src

**** Python High Scores Mentor Comments
***** Comment 1 from =mfeif=
Hi there!

Great! Your tests pass. I see that you modified the tests in order to work with
your class. I don't have a problem with that, but you may not always be able to
change the api like that, so consider that perhaps for future exercises.

That said, you've clearly solved the problems, and are working with lists and
sorting well. (Though, you're not using your own function for 'latest' in your
report ;-) )

A couple of things that might be fun to try:

1. There is a cool way to make personal_best() much simpler using a built-in
   python function.
2. There is also a cool way to do personal_top() without having to make a
   manual copy, also using a built-in function.
3. If you'd like to explore those things, give it a shot, or if you'd just like
   to move on, let me know and I'll mark this as completed.

***** Comment 1a from =mfeif=
It's come to my attention that you may not have modified the tests, and you may
have an old version of the exercise download; if that's so, my apologies.

***** Comment 1 from me to =mfeif=
I will update and give it another go, then.

*** Python High Scores Tests
#+name:python-high-scores-tests
#+begin_src python -n :tangle python/high-scores/high_scores_test.py
import unittest

from high_scores import latest, personal_best, personal_top_three


# Tests adapted from `problem-specifications//canonical-data.json` @ v4.0.0


class HighScoreTest(unittest.TestCase):

    def test_latest_score(self):
        scores = [100, 0, 90, 30]
        expected = 30
        self.assertEqual(latest(scores), expected)

    def test_personal_best(self):
        scores = [40, 100, 70]
        expected = 100
        self.assertEqual(personal_best(scores), expected)

    def test_personal_top_three_from_a_long_list(self):
        scores = [10, 30, 90, 30, 100, 20, 10, 0, 30, 40, 40, 70, 70]
        expected = [100, 90, 70]
        self.assertEqual(personal_top_three(scores), expected)

    def test_personal_top_three_highest_to_lowest(self):
        scores = [20, 10, 30]
        expected = [30, 20, 10]
        self.assertEqual(personal_top_three(scores), expected)

    def test_personal_top_three_when_there_is_a_tie(self):
        scores = [40, 20, 40, 30]
        expected = [40, 40, 30]
        self.assertEqual(personal_top_three(scores), expected)

    def test_personal_top_three_when_there_are_less_than_3(self):
        scores = [30, 70]
        expected = [70, 30]
        self.assertEqual(personal_top_three(scores), expected)

    def test_personal_top_three_when_there_is_only_one(self):
        scores = [40]
        expected = [40]
        self.assertEqual(personal_top_three(scores), expected)


if __name__ == "__main__":
    unittest.main()

#+end_src
** Python Matrix
Given a string representing a matrix of numbers, return the rows and columns of
that matrix.  So given a string with embedded newlines like:
#+begin_src python
9 8 7
5 3 2
6 6 7
#+end_src
representing this matrix:
#+begin_src python
    1  2  3
  |---------
1 | 9  8  7
2 | 5  3  2
3 | 6  6  7
#+end_src

your code should be able to spit out:
- A list of the rows, reading each row left-to-right while moving top-to-bottom
  across the rows,
- A list of the columns, reading each column top-to-bottom while moving from
  left-to-right.


The rows for our example matrix:
- 9, 8, 7
- 5, 3, 2
- 6, 6, 7


And its columns:
- 9, 5, 6
- 8, 3, 6
- 7, 2, 7


In this exercise you're going to create a class.
- [[https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes][A First Look at Classes]] from the Python 3 documentation.
- [[https://realpython.com/python3-object-oriented-programming/#how-to-define-a-class-in-python][How to Define a Class in Python]] from the Real Python website.
- [[https://docs.python.org/3/tutorial/datastructures.html][Data Structures in Python]] from the Python 3 documentation.

*** Python Matrix Readme

#+name:python-matrix-readme
#+begin_src markdown :tangle python/matrix/README.md :mkdirp yes
# Matrix

Given a string representing a matrix of numbers, return the rows and columns of
that matrix.

So given a string with embedded newlines like:

```text
9 8 7
5 3 2
6 6 7
```

representing this matrix:

```text
    1  2  3
  |---------
1 | 9  8  7
2 | 5  3  2
3 | 6  6  7
```

your code should be able to spit out:

- A list of the rows, reading each row left-to-right while moving
  top-to-bottom across the rows,
- A list of the columns, reading each column top-to-bottom while moving
  from left-to-right.

The rows for our example matrix:

- 9, 8, 7
- 5, 3, 2
- 6, 6, 7

And its columns:

- 9, 5, 6
- 8, 3, 6
- 7, 2, 7

In this exercise you're going to create a **class**.  _Don't worry, it's not as complicated as you think!_ 

-   [**A First Look at Classes**](https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes) from the Python 3 documentation. 
-   [**How to Define a Class in Python**](https://realpython.com/python3-object-oriented-programming/#how-to-define-a-class-in-python) from the Real Python website.  
-   [**Data Structures in Python**](https://docs.python.org/3/tutorial/datastructures.html) from the Python 3 documentation.



## Exception messages

Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to
indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not
every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include
a message.

To raise a message with an exception, just write it as an argument to the exception type. For example, instead of
`raise Exception`, you should write:

```python
raise Exception("Meaningful message indicating the source of the error")
```

## Running the tests

To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):

- Python 2.7: `py.test matrix_test.py`
- Python 3.4+: `pytest matrix_test.py`

Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):
`python -m pytest matrix_test.py`

### Common `pytest` options

- `-v` : enable verbose output
- `-x` : stop running tests on first failure
- `--ff` : run failures from previous test before running other test cases

For other options, see `python -m pytest -h`

## Submitting Exercises

Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/matrix` directory.

You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.

For more detailed information about running tests, code style and linting,
please see [Running the Tests](http://exercism.io/tracks/python/tests).

## Source

Warmup to the `saddle-points` warmup. [http://jumpstartlab.com](http://jumpstartlab.com)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python Matrix Scripts
**** Python Matrix Download Script

#+name:python-matrix-download-script
#+begin_src sh
exercism download --exercise=matrix --track=python
#+end_src

#+RESULTS: python-matrix-download-script
: /usr/local/dev/programming/Languages/Exercism/python/matrix

**** Python Matrix Submit Script

#+name:python-matrix-submit-script
#+begin_src sh
exercism submit python/matrix/matrix.py
#+end_src

#+RESULTS: python-matrix-submit-script
: https://exercism.io/my/solutions/69068a572d974bb0899fdffe5249077f

*** Python Matrix Metadata

#+name:python-matrix-exercism-metadata
#+begin_src js :tangle python/matrix/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"python",
      "exercise":"matrix",
      "id":"69068a572d974bb0899fdffe5249077f",
      "url":"https://exercism.io/my/solutions/69068a572d974bb0899fdffe5249077f",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** Python Matrix Solution Code and Tests
**** Python Matrix Solution Code

This solution uses a list comprehension to create rows of integer numbers from
string numbers.

#+name:python-matrix-solution
#+begin_src python :tangle python/matrix/matrix.py :mkdirp yes
class Matrix(object):
    def __init__(self, matrix_string):
        self.matrix = [
            [int(num) for num in row.split(' ')]
            for row in matrix_string.splitlines()
        ]

    def row(self, index):
        return self.matrix[index - 1]

    def column(self, index):
        return [row[index-1] for row in self.matrix]
#+end_src

{{{heading(Python Matrix Test Results)}}}

#+name:python-matrix-test-results
#+begin_src sh :dir python/matrix :results output :exports results
python3 -m pytest matrix_test.py 2>test.results
cat test.results
#+end_src

**** Mentor Comments
***** yawpitch July 8, 2018
This works quite well, so I'll approve, but consider the following:

1. When it involves newlines from unknown sources it's generally a good idea to
   use ~str.splitlines~ rather than split on the Unix-specific newline
   character.

2. You could do for ~row in matrix_string.splitlines()~ and skip assigning
   rows.

   #+cindex:list comprehension
3. Consider how you could accomplish lines 7-12 with a /list comprehension/
   instead of an explicit for loop.  Lines 18-22 could also be done with a list
   comprehension.


One interesting subtlety of this problem: if you assign to the return value of
~Matrix.row (ie m.row(1)[0] = 5~) you mutate the underlying ~self.matrix~;
however doing the same with the ~Matrix.column~ return value won't mutate the
underlying data.  Perhaps return a copy of the row?

***** yawpitch July 8, 2018
Much better. This does still display that somewhat odd behaviour I mentioned
though:

#+name:odd-behavior-example
#+begin_src python
from matrix import Matrix
m = Matrix("1 2 3\n4 5 6\n7 8 9")
m.column(1)[0] = "X"
m.print_matrix()   # "1 2 3 \n 4 5 6 \n 7 8 9"
m.row(1)[0] = "X"
m.print_matrix()    # "X 2 3 \n 4 5 6 \n 7 8 9"
#+end_src

**** Python Matrix Tests

#+name:python-matrix-tests
#+begin_src python :tangle python/matrix/matrix_test.py :mkdirp yes
import unittest

from matrix import Matrix


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0

class MatrixTest(unittest.TestCase):
    def test_extract_row_from_one_number_matrix(self):
        matrix = Matrix("1")
        self.assertEqual(matrix.row(1), [1])

    def test_can_extract_row(self):
        matrix = Matrix("1 2\n3 4")
        self.assertEqual(matrix.row(2), [3, 4])

    def test_extract_row_where_numbers_have_different_widths(self):
        matrix = Matrix("1 2\n10 20")
        self.assertEqual(matrix.row(2), [10, 20])

    def test_can_extract_row_from_non_square_matrix(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9\n8 7 6")
        self.assertEqual(matrix.row(3), [7, 8, 9])

    def test_extract_column_from_one_number_matrix(self):
        matrix = Matrix("1")
        self.assertEqual(matrix.column(1), [1])

    def test_can_extract_column(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9")
        self.assertEqual(matrix.column(3), [3, 6, 9])

    def test_can_extract_column_from_non_square_matrix(self):
        matrix = Matrix("1 2 3\n4 5 6\n7 8 9\n8 7 6")
        self.assertEqual(matrix.column(3), [3, 6, 9, 6])

    def test_extract_column_where_numbers_have_different_widths(self):
        matrix = Matrix("89 1903 3\n18 3 1\n9 4 800")
        self.assertEqual(matrix.column(2), [1903, 3, 4])


if __name__ == '__main__':
    unittest.main()

#+end_src
** Python Pangram
:PROPERTIES:
:exercise: side
:END:

*** Python Pangram Introduction
Determine if a sentence is a pangram.  A pangram (Greek: παν γράμμα, pan
gramma, "every letter") is a sentence using every letter of the alphabet at
least once.  The best known English pangram is:

: The quick brown fox jumps over the lazy dog.

The alphabet used consists of ASCII letters a to z, inclusive, and is case
insensitive.  Input will not contain non-ASCII symbols.

{{{heading(Exception Messages)}}}

Sometimes it is necessary to raise an exception.  When you do this, you should
include a meaningful error message to indicate what the source of the error is.
This makes your code more readable and helps significantly with debugging.  Not
every exercise will require you to raise an exception, but for those that do,
the tests will only pass if you include a message.

To raise a message with an exception, just write it as an argument to the
exception type. For example, instead of ~raise Exception~, you should write:

: raise Exception("Meaningful message indicating the source of the error")

{{{heading(Running the tests)}}}

- Python 3.4+: ~pytest pangram_test.py~


Alternatively, you can tell Python to run the =pytest= module (allowing the same
command to be used regardless of Python version):

: python -m pytest pangram_test.py

{{{heading(Submitting Exercises)}}}

Note that, when trying to submit an exercise, make sure the solution is in the
~$EXERCISM_WORKSPACE/python/pangram~ directory.

You can find your Exercism workspace by running ~exercism debug~ and looking
for the line that starts with ~Workspace~.

{{{heading(Source)}}}

[[https://en.wikipedia.org/wiki/Pangram][Pangram on Wikipedia]]

*** Python Pangram Readme
#+name:python-pangram-readme
#+begin_src markdown :tangle python/pangram/README.md :mkdirp yes
# Pangram

Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma,
"every letter") is a sentence using every letter of the alphabet at least once.
The best known English pangram is:
> The quick brown fox jumps over the lazy dog.

The alphabet used consists of ASCII letters `a` to `z`, inclusive, and is case
insensitive. Input will not contain non-ASCII symbols.

## Exception messages

Sometimes it is necessary to raise an exception. When you do this, you should include a meaningful error message to
indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. Not
every exercise will require you to raise an exception, but for those that do, the tests will only pass if you include
a message.

To raise a message with an exception, just write it as an argument to the exception type. For example, instead of
`raise Exception`, you should write:

```python
raise Exception("Meaningful message indicating the source of the error")
```

## Running the tests

To run the tests, run the appropriate command below ([why they are different](https://github.com/pytest-dev/pytest/issues/1629#issue-161422224)):

- Python 2.7: `py.test pangram_test.py`
- Python 3.4+: `pytest pangram_test.py`

Alternatively, you can tell Python to run the pytest module (allowing the same command to be used regardless of Python version):
`python -m pytest pangram_test.py`

### Common `pytest` options

- `-v` : enable verbose output
- `-x` : stop running tests on first failure
- `--ff` : run failures from previous test before running other test cases

For other options, see `python -m pytest -h`

## Submitting Exercises

Note that, when trying to submit an exercise, make sure the solution is in the `$EXERCISM_WORKSPACE/python/pangram` directory.

You can find your Exercism workspace by running `exercism debug` and looking for the line that starts with `Workspace`.

For more detailed information about running tests, code style and linting,
please see [Running the Tests](http://exercism.io/tracks/python/tests).

## Source

Wikipedia [https://en.wikipedia.org/wiki/Pangram](https://en.wikipedia.org/wiki/Pangram)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python Pangram Scripts

**** Python Pangram Download Script
#+name:python-pangram-download-script
#+begin_src sh
exercism download --exercise=pangram --track=python
#+end_src

#+RESULTS: python-pangram-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/python/pangram

**** Python Pangram Submit Script
#+name:python-pangram-submit-script
#+begin_src sh
exercism submit python/pangram/pangram.py
#+end_src

#+RESULTS: python-pangram-submit-script
: https://exercism.io/my/solutions/6ee88bf5b1f54cbe9fe490f58a2526d8

*** Python Pangram Solution Code
#+caption:Solution Code pangram.py
#+name:python-pangram-solution
#+begin_src python -n :tangle python/pangram/pangram.py
def is_pangram(sentence):
    return len(set(list(filter(lambda e : e.isalpha(), list(''.join(sentence.lower().split())))))) == 26
#+end_src

{{{heading(Tests of Python Pangram Solution Code)}}}

#+name:python-pangram-run-tests
#+header: :dir python/pangram
#+header: :results output :exports results
#+begin_src sh
pytest pangram_test.py 2>&1 > results_pangram
cat results_pangram
#+end_src

#+RESULTS: python-pangram-run-tests
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.0.2, py-1.7.0, pluggy-0.8.0
: rootdir: /Users/pine/Dev/Programming/Languages/Exercism/python/pangram, inifile:
: collected 10 items
: 
: pangram_test.py ..........                                               [100%]
: 
: ========================== 10 passed in 0.01 seconds ===========================

#+name:python-pangram-metadata
#+begin_src js :tangle python/pangram/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"pangram",
    "id":"6ee88bf5b1f54cbe9fe490f58a2526d8",
    "url":"https://exercism.io/my/solutions/6ee88bf5b1f54cbe9fe490f58a2526d8",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Python Pangram Test Code
#+name:python-pangram-test-code
#+begin_src py -n :tangle python/pangram/pangram_test.py
import unittest

from pangram import is_pangram


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.4.1

class PangramTest(unittest.TestCase):

    def test_sentence_empty(self):
        self.assertIs(is_pangram(''), False)

    def test_recognizes_a_perfect_lower_case_pangram(self):
        self.assertIs(is_pangram('abcdefghijklmnopqrstuvwxyz'), True)

    def test_pangram_with_only_lower_case(self):
        self.assertIs(
            is_pangram('the quick brown fox jumps over the lazy dog'),
            True)

    def test_missing_character_x(self):
        self.assertIs(
            is_pangram('a quick movement of the enemy will '
                       'jeopardize five gunboats'),
            False)

    def test_another_missing_character(self):
        self.assertIs(is_pangram('five boxing wizards jump quickly at it'),
                      False)

    def test_pangram_with_underscores(self):
        self.assertIs(
            is_pangram('the_quick_brown_fox_jumps_over_the_lazy_dog'),
            True)

    def test_pangram_with_numbers(self):
        self.assertIs(
            is_pangram('the 1 quick brown fox jumps over the 2 lazy dogs'),
            True)

    def test_missing_letters_replaced_by_numbers(self):
        self.assertIs(
            is_pangram('7h3 qu1ck brown fox jumps ov3r 7h3 lazy dog'),
            False)

    def test_pangram_with_mixedcase_and_punctuation(self):
        self.assertIs(
            is_pangram('"Five quacking Zephyrs jolt my wax bed."'),
            True)

    def test_upper_and_lower_case_versions_of_the_same_character(self):
        self.assertIs(
            is_pangram('the quick brown fox jumped over the lazy FX'),
            False)


if __name__ == '__main__':
    unittest.main()

#+end_src

* Perl5 Exercism Track
** Perl5 Hello World
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" (https://en.wikipedia.org/wiki/%22Hello%2c_World!%22_program)
is the traditional first program for beginning programming in a new language or
environment.

{{{heading(Objectives)}}}

The objectives are simple:
- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** Perl5 Hello World Readme
#+name:perl5-hello-world-readme
#+BEGIN_SRC txt :tangle perl5/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.
## Source

This is an exercise to introduce users to using Exercism
[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+END_SRC

*** Perl5 Hello World Solution
#+name:perl5-hello-world-code
#+BEGIN_SRC perl -n :tangle perl5/hello-world/lib/HelloWorld.pm :mkdirp yes
# Declare package 'HelloWorld'
package HelloWorld;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(hello);

sub hello {
  return "Hello, World!";
}

1;
#+END_SRC

#+name:perl5-hello-world-metadata
#+header: :exports none
#+BEGIN_SRC js :tangle perl5/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"perl5",
    "exercise":"hello-world",
    "id":"55fe9523b94f4e1b9a0b7f8a438d0e45",
    "url":"https://exercism.io/my/solutions/55fe9523b94f4e1b9a0b7f8a438d0e45",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** Perl5 Hello World Test
#+name:perl5-hello-world-test
#+BEGIN_SRC perl -n :tangle perl5/hello-world/t/hello-world.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 2; # This is how many tests we expect to run.
use lib './lib';
use HelloWorld qw(hello);

can_ok 'HelloWorld', 'import' or BAIL_OUT 'Cannot import subroutines from module';

# Run the 'is' subroutine from the 'Test::More' module, with three arguments.
is(
  hello,           # Run the 'hello' subroutine, which is imported from your module.
  'Hello, World!', # The expected result to compare with 'hello'.
  'Say Hi!'        # The test description.
);
#+END_SRC

#+name:perl5-hello-world-run-test
#+BEGIN_SRC sh :dir perl5/hello-world :results output :exports both
prove ./t
#+END_SRC

#+RESULTS: perl5-hello-world-run-test
: t/hello-world.t .. ok
: All tests successful.
: Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.03 cusr  0.00 csys =  0.05 CPU)
: Result: PASS
** Perl5 Two Fer
"Two-fer" or "2-fer" is short for "two for one.  One for you and one for me."

{{{heading(Objective)}}}

Given a name, return a string with the message:
: One for X, one for me.
Where 'X' is the given name.

However, if the name is missing, return the string:
: One for you, one for me.

*** Perl5 Two Fer Readme
#+name:perl5-two-fer-readme
#+BEGIN_SRC txt :tangle perl5/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    | String to return 
|:------:|:-----------------: 
|Alice   | One for Alice, one for me. 
|Bob     | One for Bob, one for me.
|        | One for you, one for me.
|Zaphod  | One for Zaphod, one for me.
## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+END_SRC
*** Perl5 Two Fer Solution

#+CINDEX:defined-or operator (@code{//})
#+CINDEX:@code{//}, defined-or operator
The defined-or operator, =//=, tests the definedness of its operand.  Unlike
=||=, which tests the truth of its operand, =//= evaluates to a =true= value
even if its operand evaluates to a numeric zero or the empty string.  This is
especially useful for setting default parameter values.

#+name:perl5-two-fer-solution
#+BEGIN_SRC perl -n :tangle perl5/two-fer/lib/TwoFer.pm :mkdirp yes
package TwoFer;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(two_fer);

sub two_fer {
  return "One for ". eval {pop // "you"}. ", one for me.";
}

1;
#+END_SRC

#+name:perl5-two-fer-metadata
#+header: :exports none
#+BEGIN_SRC js :tangle perl5/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"perl5",
    "exercise":"two-fer",
    "id":"4acecc77f2324da5aa5c59e52c0c0a6a",
    "url":"https://exercism.io/my/solutions/4acecc77f2324da5aa5c59e52c0c0a6a",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

*** Perl5 Two Fer Test
#+perl5-two-fer-test
#+BEGIN_SRC perl -n :tangle perl5/two-fer/t/two-fer.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 4;
use JSON::PP;
use lib './lib';
use TwoFer qw(two_fer);

can_ok 'TwoFer', 'import' or BAIL_OUT 'Cannot import subroutines from module';

my $C_DATA = do { local $/; decode_json(<DATA>); };
foreach my $case (@{$C_DATA->{cases}}) {
  is two_fer($case->{input}{name}), $case->{expected}, $case->{description};
}

__DATA__
{
  "exercise": "two-fer",
  "version": "1.2.0",
  "cases": [
    {
      "description": "no name given",
      "property": "twoFer",
      "input": {
        "name": null
      },
      "expected": "One for you, one for me."
    },
    {
      "description": "a name given",
      "property": "twoFer",
      "input": {
        "name": "Alice"
      },
      "expected": "One for Alice, one for me."
    },
    {
      "description": "another name given",
      "property": "twoFer",
      "input": {
        "name": "Bob"
      },
      "expected": "One for Bob, one for me."
    }
  ]
}
#+END_SRC

#+name:perl5-two-fer-run-test
#+BEGIN_SRC sh :dir perl5/two-fer :results output :exports both
prove ./t
#+END_SRC

#+RESULTS: perl5-two-fer-run-test
: t/two-fer.t .. ok
: All tests successful.
: Files=1, Tests=4,  0 wallclock secs ( 0.01 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.03 CPU)
: Result: PASS

** Perl5 Bob
*** Perl5 Bob Introduction
Bob is a lackadaisical teenager. In conversation, his responses are very
limited.

Bob answers 'Sure.' if you ask him a question.

He answers 'Whoa, chill out!' if you yell at him.

He answers 'Calm down, I know what I'm doing!' if you yell a question at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Bob's conversational partner is a purist when it comes to written communication
and always follows normal rules regarding sentence punctuation in English.

*** Perl5 Bob Inspirational Source
Inspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to Program
tutorial:
- http://pine.fm/LearnToProgram/?Chapter=06

*** Perl5 Bob How to Download
#+name:Perl5-Bob-Download
#+begin_src sh :dir perl5
exercism download --exercise=bob --track=perl5
#+end_src

#+RESULTS: Perl5-Bob-Download
: /usr/local/dev/programming/Languages/Exercism/perl5/bob

*** Perl5 Bob Solution
#+name:Perl5-Bob-Solution
#+begin_src perl -n :tangle perl5/bob/lib/Bob.pm :mkdirp yes
  # Declare package 'Bob'
  package Bob;
  use strict;
  use warnings;
  use Exporter 'import';
  our @EXPORT_OK = qw(hey);

  sub hey {
    my ($msg) = @_;

    if ($msg =~ /^[\p{Space}]{0,}$/) {
        return "Fine. Be that way!";
    }

    if ($msg =~ /^[\p{UPPERCASE_LETTER}]+[\p{UPPERCASE}\p{NUMBER}\s,%^*@#$(^!]*!?$/) {
        return "Whoa, chill out!";
    }

    if ($msg =~ /[\p{UPPERCASE_LETTER}\p{NUMBER}\s,%^*@#$(^!]*[\p{UPPERCASE_LETTER}]+!?$/) {
        return "Whoa, chill out!";
    }

    if ($msg =~ /^[\p{UPPERCASE_LETTER}\s]*[?]$/) {
        return "Calm down, I know what I'm doing!";
    }

    if ($msg =~ /^[\p{LETTER}\p{NUMBER},\s]*$/) {
        return "Whatever.";
    }

    if ($msg =~ /[\p{LETTER}\p{NUMBER}?]\s{0,}$/) {
        return "Sure.";
    }

    if ($msg !~ /\p{LETTER}/) {
        return "Whatever.";
    }

    return "Whatever.";
  }

  1;
#+end_src

#+name:Perl5-Bob-Metadata
#+begin_src js :tangle perl5/bob/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"perl5",
      "exercise":"bob",
      "id":"08f0b7ecdadd47f8a9baa2910b6558fc",
      "url":"https://exercism.io/my/solutions/08f0b7ecdadd47f8a9baa2910b6558fc",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** Perl5 Bob Test
#+name:Perl5-Bob-Tests
#+begin_src perl :tangle perl5/bob/t/bob.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 26; # This is how many tests we expect to run.
use JSON::PP;
use lib './lib';
use Bob qw(hey);

can_ok 'Bob', 'import' or BAIL_OUT 'Cannot import subroutines from module';

my $C_DATA = do { local $/; decode_json(<DATA>); };
is hey($_->{input}{heyBob}), $_->{expected}, $_->{description} foreach @{$C_DATA->{cases}};

__DATA__
{
  "exercise": "bob",
  "version": "1.4.0",
  "cases": [
    {
      "description": "stating something",
      "property": "response",
      "input": {
        "heyBob": "Tom-ay-to, tom-aaaah-to."
      },
      "expected": "Whatever."
    },
    {
      "description": "shouting",
      "property": "response",
      "input": {
        "heyBob": "WATCH OUT!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "shouting gibberish",
      "property": "response",
      "input": {
        "heyBob": "FCECDFCAAB"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "asking a question",
      "property": "response",
      "input": {
        "heyBob": "Does this cryogenic chamber make me look fat?"
      },
      "expected": "Sure."
    },
    {
      "description": "asking a numeric question",
      "property": "response",
      "input": {
        "heyBob": "You are, what, like 15?"
      },
      "expected": "Sure."
    },
    {
      "description": "asking gibberish",
      "property": "response",
      "input": {
        "heyBob": "fffbbcbeab?"
      },
      "expected": "Sure."
    },
    {
      "description": "talking forcefully",
      "property": "response",
      "input": {
        "heyBob": "Let's go make out behind the gym!"
      },
      "expected": "Whatever."
    },
    {
      "description": "using acronyms in regular speech",
      "property": "response",
      "input": {
        "heyBob": "It's OK if you don't want to go to the DMV."
      },
      "expected": "Whatever."
    },
    {
      "description": "forceful question",
      "property": "response",
      "input": {
        "heyBob": "WHAT THE HELL WERE YOU THINKING?"
      },
      "expected": "Calm down, I know what I'm doing!"
    },
    {
      "description": "shouting numbers",
      "property": "response",
      "input": {
        "heyBob": "1, 2, 3 GO!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "no letters",
      "property": "response",
      "input": {
        "heyBob": "1, 2, 3"
      },
      "expected": "Whatever."
    },
    {
      "description": "question with no letters",
      "property": "response",
      "input": {
        "heyBob": "4?"
      },
      "expected": "Sure."
    },
    {
      "description": "shouting with special characters",
      "property": "response",
      "input": {
        "heyBob": "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "shouting with no exclamation mark",
      "property": "response",
      "input": {
        "heyBob": "I HATE THE DMV"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "statement containing question mark",
      "property": "response",
      "input": {
        "heyBob": "Ending with ? means a question."
      },
      "expected": "Whatever."
    },
    {
      "description": "non-letters with question",
      "property": "response",
      "input": {
        "heyBob": ":) ?"
      },
      "expected": "Sure."
    },
    {
      "description": "prattling on",
      "property": "response",
      "input": {
        "heyBob": "Wait! Hang on. Are you going to be OK?"
      },
      "expected": "Sure."
    },
    {
      "description": "silence",
      "property": "response",
      "input": {
        "heyBob": ""
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "prolonged silence",
      "property": "response",
      "input": {
        "heyBob": "          "
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "alternate silence",
      "property": "response",
      "input": {
        "heyBob": "\t\t\t\t\t\t\t\t\t\t"
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "multiple line question",
      "property": "response",
      "input": {
        "heyBob": "\nDoes this cryogenic chamber make me look fat?\nNo."
      },
      "expected": "Whatever."
    },
    {
      "description": "starting with whitespace",
      "property": "response",
      "input": {
        "heyBob": "         hmmmmmmm..."
      },
      "expected": "Whatever."
    },
    {
      "description": "ending with whitespace",
      "property": "response",
      "input": {
        "heyBob": "Okay if like my  spacebar  quite a bit?   "
      },
      "expected": "Sure."
    },
    {
      "description": "other whitespace",
      "property": "response",
      "input": {
        "heyBob": "\n\r \t"
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "non-question ending with whitespace",
      "property": "response",
      "input": {
        "heyBob": "This is a statement ending with whitespace      "
      },
      "expected": "Whatever."
    }
  ]
}

#+end_src

#+name:Perl5-Bob-Run-Tests
#+begin_src sh :dir perl5/bob :results output :exports both
prove ./t
#+end_src

#+RESULTS: Perl5-Bob-Run-Tests
: t/bob.t .. ok
: All tests successful.
: Files=1, Tests=26,  0 wallclock secs ( 0.01 usr  0.01 sys +  0.06 cusr  0.00 csys =  0.08 CPU)
: Result: PASS
** Perl5 Leap
*** Perl5 Leap Scripts
**** Perl5 Leap Download Script
#+name:perl5-leap-download-script
#+begin_src sh
exercism download --exercise=leap --track=perl5
#+end_src

#+RESULTS: perl5-leap-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/perl5/leap

**** Perl5 Leap Submit Script
#+name:perl5-leap-submit-script
#+begin_src sh
exercism submit perl5/leap/leap.pm
#+end_src

#+RESULTS: perl5-leap-submit-script
: https://exercism.io/my/solutions/bc5ea753ab4440f8a8a9b57231b38402

**** Perl5 Leap Run Tests Script
#+name:perl5-leap-run-tests-script
#+header: :dir perl5/leap :mkdirp yes
#+header: :results output :exports results
#+begin_src sh
prove . -v
#+end_src

#+RESULTS: perl5-leap-run-tests-script
#+begin_example
./leap.t .. 
# Seeded srand with seed '20190714' from local date.
1..7
ok 1 - Imported symbol: is_leap_year
ok 2 - year not divisible by 4 in common year
ok 3 - year divisible by 2, not divisible by 4 in common year
ok 4 - year divisible by 4, not divisible by 100 in leap year
ok 5 - year divisible by 100, not divisible by 400 in common year
ok 6 - year divisible by 400 in leap year
ok 7 - year divisible by 200, not divisible by 400 in common year
ok
All tests successful.
Files=1, Tests=7,  0 wallclock secs ( 0.01 usr  0.00 sys +  0.06 cusr  0.00 csys =  0.07 CPU)
Result: PASS
#+end_example

*** Perl5 Leap README
#+name:perl5-leap-readme
#+begin_src markdown :tangle perl5/leap/README.md :mkdirp yes
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE
## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Perl5 Leap Tests
#+name:perl5-leap-tests
#+begin_src perl :tangle perl5/leap/leap.t
#!/usr/bin/env perl
use Test2::V0;
use JSON::PP;

use FindBin qw($Bin);
use lib $Bin, "$Bin/local/lib/perl5"; # Find modules in the same dir as this file.

use Leap qw(is_leap_year);

my $C_DATA = do { local $/; decode_json(<DATA>); };
plan 7;    # This is how many tests we expect to run.

imported_ok qw(is_leap_year) or bail_out;

for ( @{ $C_DATA->{cases} } ) {
  is(
    is_leap_year( $_->{input}{year} ),
    $_->{expected} ? T : DF,    # Check if True, or Defined but False
    $_->{description}
  );
}

__DATA__
{
  "exercise": "leap",
  "version": "1.5.1",
  "cases": [
    {
      "description": "year not divisible by 4 in common year",
      "property": "leapYear",
      "input": {
        "year": 2015
      },
      "expected": false
    },
    {
      "description": "year divisible by 2, not divisible by 4 in common year",
      "property": "leapYear",
      "input": {
        "year": 1970
      },
      "expected": false
    },
    {
      "description": "year divisible by 4, not divisible by 100 in leap year",
      "property": "leapYear",
      "input": {
        "year": 1996
      },
      "expected": true
    },
    {
      "description": "year divisible by 100, not divisible by 400 in common year",
      "property": "leapYear",
      "input": {
        "year": 2100
      },
      "expected": false
    },
    {
      "description": "year divisible by 400 in leap year",
      "property": "leapYear",
      "input": {
        "year": 2000
      },
      "expected": true
    },
    {
      "description": "year divisible by 200, not divisible by 400 in common year",
      "property": "leapYear",
      "input": {
        "year": 1800
      },
      "expected": false
    }
  ]
}

#+end_src

*** Perl5 Leap Code
#+name:perl5-leap-code
#+begin_src perl :tangle perl5/leap/leap.pm
# Declare package 'Leap'
package Leap;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(is_leap_year);

sub is_leap_year {
  my ($year) = @_;
  sub div { !($_[0] % $_[1]) }
  div($year, 4) && !(div($year, 100) && !div($year, 400));
}
1;
#+end_src

#+name:perl5-leap-exercism-metadata
#+header: :exports no
#+begin_src js :tangle perl5/leap/.exercism/metadata.json :mkdirp yes
{
    "track":"perl5",
    "exercise":"leap",
    "id":"bc5ea753ab4440f8a8a9b57231b38402",
    "url":"https://exercism.io/my/solutions/bc5ea753ab4440f8a8a9b57231b38402",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src
** Perl5 Grains
*** Perl5 Grains Introduction
Calculate the number of grains of wheat on a chessboard given that the number
on each square doubles.

There once was a wise servant who saved the life of a prince.  The king
promised to pay whatever the servant could dream up.  Knowing that the king
loved chess, the servant told the king he would like to have grains of
wheat.  One grain on the first square of a chess board, with the number of
grains doubling on each successive square.

There are 64 squares on a chessboard (where square 1 has one grain, square 2
has two grains, and so on).

Write code that shows:

- how many grains were on a given square, and

- the total number of grains on the chessboard


{{{heading(For bonus points)}}}

Did you get the tests passing and the code clean? If you want to, these are
some additional things you could try:

- Optimize for speed.

- Optimize for readability.


Then please share your thoughts in a comment on the submission.  Did this
experiment make the code better?  Worse?  Did you learn anything from it?

{{{heading(Source)}}}

JavaRanch Cattle Drive, exercise 6 http://www.javaranch.com/grains.jsp

*** Perl5 Grains Readme
#+name:perl5-grains-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle perl5/grains/README.md
# Grains

Calculate the number of grains of wheat on a chessboard given that the number
on each square doubles.

There once was a wise servant who saved the life of a prince. The king
promised to pay whatever the servant could dream up. Knowing that the
king loved chess, the servant told the king he would like to have grains
of wheat. One grain on the first square of a chess board, with the number
of grains doubling on each successive square.

There are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).

Write code that shows:
- how many grains were on a given square, and
- the total number of grains on the chessboard

## For bonus points

Did you get the tests passing and the code clean? If you want to, these
are some additional things you could try:

- Optimize for speed.
- Optimize for readability.

Then please share your thoughts in a comment on the submission. Did this
experiment make the code better? Worse? Did you learn anything from it?
## Source

JavaRanch Cattle Drive, exercise 6 [http://www.javaranch.com/grains.jsp](http://www.javaranch.com/grains.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Perl5 Grains Scripts
**** Perl5 Grains Download Script
#+name:perl5-grains-download-script
#+header: :results output :exports none
#+begin_src sh
exercism download --exercise=grains --track=perl5
#+end_src

#+RESULTS: perl5-grains-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/perl5/grains

**** Perl5 Grains Run Tests Script
#+name:perl5-grains-run-tests-script
#+header: :results output :exports both
#+header: :dir perl5/grains
#+begin_src sh
prove . -v
#+end_src

#+RESULTS: perl5-grains-run-tests-script
#+begin_example
./grains.t .. 
# Seeded srand with seed '20190715' from local date.
1..12
ok 1 - Imported symbols: grains_on_square, total_grains
ok 2 - square no. 1
ok 3 - square no. 2
ok 4 - square no. 3
ok 5 - square no. 4
ok 6 - square no. 16
ok 7 - square no. 32
ok 8 - square no. 64
ok 9 - square 0 raises an exception
ok 10 - negative square raises an exception
ok 11 - square greater than 64 raises an exception
ok 12 - returns the total number of grains on the board
ok
All tests successful.
Files=1, Tests=12,  0 wallclock secs ( 0.01 usr  0.00 sys +  0.09 cusr  0.01 csys =  0.11 CPU)
Result: PASS
#+end_example

**** Perl5 Grains Submit Script
#+name:perl5-grains-submit-script
#+header: :results output :exports none
#+begin_src sh
exercism submit perl5/grains/Grains.pm
#+end_src

#+RESULTS: perl5-grains-submit-script
:     https://exercism.io/my/solutions/8100efca3ab744fdab92510c09acb14c
: 

#+name:perl5-grains-exercism-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle perl5/grains/.exercism/metadata.json
{
    "track":"perl5",
    "exercise":"grains",
    "id":"8100efca3ab744fdab92510c09acb14c",
    "url":"https://exercism.io/my/solutions/8100efca3ab744fdab92510c09acb14c",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Perl5 Grains Tests
#+name:perl5-grains-tests
#+begin_src perl :tangle perl5/grains/grains.t
#!/usr/bin/env perl
use Test2::V0;
use JSON::PP;

use FindBin qw($Bin);
use lib $Bin, "$Bin/local/lib/perl5";

use Grains qw(grains_on_square total_grains);
use Math::BigFloat;

my $C_DATA = do { local $/; decode_json(<DATA>); };
plan 12;

imported_ok qw(grains_on_square total_grains) or bail_out;

for my $case ( map @{ $_->{cases} // [$_] }, @{ $C_DATA->{cases} } ) {
  if ( ref $case->{expected} ) {
    like dies( sub { grains_on_square( $case->{input}{square} ) } ),
      qr/$case->{expected}{error}/,
      $case->{description};
  }
  elsif ( $case->{property} eq 'square' ) {
    is(
      Math::BigFloat->new(
        grains_on_square( $case->{input}{square} )
      )->numify,
      number( $case->{expected} ),
      'square no. ' . $case->{description}
    );
  }
  elsif ( $case->{property} eq 'total' ) {
    is(
      Math::BigFloat->new( total_grains() )->numify,
      number( $case->{expected} ),
      $case->{description}
    );
  }
}

__DATA__
{
  "exercise": "grains",
  "version": "1.2.0",
  "comments": [
    "The final tests of square test error conditions",
    "In these cases you should expect an error as is idiomatic for your language"
  ],
  "cases": [
    {
      "description": "returns the number of grains on the square",
      "cases": [
        {
          "description": "1",
          "property": "square",
          "input": {
            "square": 1
          },
          "expected": 1
        },
        {
          "description": "2",
          "property": "square",
          "input": {
            "square": 2
          },
          "expected": 2
        },
        {
          "description": "3",
          "property": "square",
          "input": {
            "square": 3
          },
          "expected": 4
        },
        {
          "description": "4",
          "property": "square",
          "input": {
            "square": 4
          },
          "expected": 8
        },
        {
          "description": "16",
          "property": "square",
          "input": {
            "square": 16
          },
          "expected": 32768
        },
        {
          "description": "32",
          "property": "square",
          "input": {
            "square": 32
          },
          "expected": 2147483648
        },
        {
          "description": "64",
          "property": "square",
          "input": {
            "square": 64
          },
          "expected": 9223372036854775808
        },
        {
          "description": "square 0 raises an exception",
          "property": "square",
          "input": {
            "square": 0
          },
          "expected": {"error": "square must be between 1 and 64"}
        },
        {
          "description": "negative square raises an exception",
          "property": "square",
          "input": {
            "square": -1
          },
          "expected": {"error": "square must be between 1 and 64"}
        },
        {
          "description": "square greater than 64 raises an exception",
          "property": "square",
          "input": {
            "square": 65
          },
          "expected": {"error": "square must be between 1 and 64"}
        }
      ]
    },
    {
      "description": "returns the total number of grains on the board",
      "property": "total",
      "input": {},
      "expected": 18446744073709551615
    }
  ]
}

#+end_src

*** Perl5 Grains Code
#+name:perl5-grains-code
#+begin_src perl :tangle perl5/grains/Grains.pm
package Grains;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(grains_on_square total_grains);

use Math::BigFloat;

sub grains_on_square {
  my ($square) = @_;
  die "square must be between 1 and 64"
      unless ($square > 0 && $square <=64);

  eval {
      my $num = Math::BigFloat->new($square) - Math::BigFloat->bone();
      Math::BigInt->new(2) ** $num;
  };
}

sub total_grains {
    my $total = Math::BigInt->bzero();
    for (my $sq = 1; $sq <= 64; $sq++) {
        $total += grains_on_square(Math::BigInt->new($sq));
    }
    return $total;
}

1;
#+end_src
** Perl5 Raindrops
Convert a number to a string, the contents of which depend on the number's
factors.

- If the number has 3 as a factor, output 'Pling'.

- If the number has 5 as a factor, output 'Plang'.

- If the number has 7 as a factor, output 'Plong'.

- If the number does not have 3, 5, or 7 as a factor, just pass the number's
  digits straight through.


{{{heading(Examples)}}}

- 28's factors are 1, 2, 4, 7, 14, 28 :: In raindrop-speak, this would be a
     simple "Plong".

- 30's factors are 1, 2, 3, 5, 6, 10, 15, 30 :: In raindrop-speak, this would
     be a "PlingPlang".

- 34 has four factors: 1, 2, 17, and 34 :: In raindrop-speak, this would be
     "34".

*** Perl5 Raindrops README
#+name:perl5-raindrops-readme
#+begin_src markdown :tangle perl5/raindrops/README.md :mkdirp yes
# Raindrops

Convert a number to a string, the contents of which depend on the number's factors.

- If the number has 3 as a factor, output 'Pling'.
- If the number has 5 as a factor, output 'Plang'.
- If the number has 7 as a factor, output 'Plong'.
- If the number does not have 3, 5, or 7 as a factor,
  just pass the number's digits straight through.

## Examples

- 28's factors are 1, 2, 4, **7**, 14, 28.
  - In raindrop-speak, this would be a simple "Plong".
- 30's factors are 1, 2, **3**, **5**, 6, 10, 15, 30.
  - In raindrop-speak, this would be a "PlingPlang".
- 34 has four factors: 1, 2, 17, and 34.
  - In raindrop-speak, this would be "34".
## Source

A variation on a famous interview question intended to weed out potential candidates. [http://jumpstartlab.com](http://jumpstartlab.com)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Perl5 Raindrops Scripts
**** Perl5 Raindrops Download Script
#+name:perl5-raindrops-download-script
#+begin_src sh :results output :exports code
exercism download --exercise=raindrops --track=perl5
#+end_src

#+RESULTS: perl5-raindrops-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/perl5/raindrops

**** Perl5 Raindrops Submit Script
#+name:perl5-raindrops-submit-script
#+begin_src sh :results output :exports code
exercism submit perl5/raindrops/raindrops.pm
#+end_src

#+name:perl5-raindrops-exercism-metadata
#+begin_src js :exports none :mkdirp yes :tangle perl5/raindrops/.exercism/metadata.json
{
    "track":"perl5",
    "exercise":"raindrops",
    "id":"868955a3c97745888989b1df98b502ab",
    "url":"https://exercism.io/my/solutions/868955a3c97745888989b1df98b502ab",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Perl5 Raindrops Test File
#+name:perl5-raindrops-test-file
#+header: :mkdirp yes
#+begin_src perl :tangle perl5/raindrops/t/raindrops.t
#!/usr/bin/env perl
use Test2::V0;
use JSON::PP;

#use FindBin qw($Bin);
use lib './lib'; #$Bin, "$Bin/local/lib/perl5";

use Raindrops qw(raindrop);

my $C_DATA = do { local $/; decode_json(<DATA>); };
plan 19;

imported_ok qw(raindrop) or bail_out;

for my $case ( @{ $C_DATA->{cases} } ) {
  is raindrop( $case->{input}{number} ), $case->{expected},
    $case->{description};
}

__DATA__
{
  "exercise": "raindrops",
  "version": "1.1.0",
  "cases": [
    {
      "description": "the sound for 1 is 1",
      "property": "convert",
      "input": {
        "number": 1
      },
      "expected": "1"
    },
    {
      "description": "the sound for 3 is Pling",
      "property": "convert",
      "input": {
        "number": 3
      },
      "expected": "Pling"
    },
    {
      "description": "the sound for 5 is Plang",
      "property": "convert",
      "input": {
        "number": 5
      },
      "expected": "Plang"
    },
    {
      "description": "the sound for 7 is Plong",
      "property": "convert",
      "input": {
        "number": 7
      },
      "expected": "Plong"
    },
    {
      "description": "the sound for 6 is Pling as it has a factor 3",
      "property": "convert",
      "input": {
        "number": 6
      },
      "expected": "Pling"
    },
    {
      "description": "2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base",
      "property": "convert",
      "input": {
        "number": 8
      },
      "expected": "8"
    },
    {
      "description": "the sound for 9 is Pling as it has a factor 3",
      "property": "convert",
      "input": {
        "number": 9
      },
      "expected": "Pling"
    },
    {
      "description": "the sound for 10 is Plang as it has a factor 5",
      "property": "convert",
      "input": {
        "number": 10
      },
      "expected": "Plang"
    },
    {
      "description": "the sound for 14 is Plong as it has a factor of 7",
      "property": "convert",
      "input": {
        "number": 14
      },
      "expected": "Plong"
    },
    {
      "description": "the sound for 15 is PlingPlang as it has factors 3 and 5",
      "property": "convert",
      "input": {
        "number": 15
      },
      "expected": "PlingPlang"
    },
    {
      "description": "the sound for 21 is PlingPlong as it has factors 3 and 7",
      "property": "convert",
      "input": {
        "number": 21
      },
      "expected": "PlingPlong"
    },
    {
      "description": "the sound for 25 is Plang as it has a factor 5",
      "property": "convert",
      "input": {
        "number": 25
      },
      "expected": "Plang"
    },
    {
      "description": "the sound for 27 is Pling as it has a factor 3",
      "property": "convert",
      "input": {
        "number": 27
      },
      "expected": "Pling"
    },
    {
      "description": "the sound for 35 is PlangPlong as it has factors 5 and 7",
      "property": "convert",
      "input": {
        "number": 35
      },
      "expected": "PlangPlong"
    },
    {
      "description": "the sound for 49 is Plong as it has a factor 7",
      "property": "convert",
      "input": {
        "number": 49
      },
      "expected": "Plong"
    },
    {
      "description": "the sound for 52 is 52",
      "property": "convert",
      "input": {
        "number": 52
      },
      "expected": "52"
    },
    {
      "description": "the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7",
      "property": "convert",
      "input": {
        "number": 105
      },
      "expected": "PlingPlangPlong"
    },
    {
      "description": "the sound for 3125 is Plang as it has a factor 5",
      "property": "convert",
      "input": {
        "number": 3125
      },
      "expected": "Plang"
    }
  ]
}

#+end_src

*** Perl5 Raindrops Solution File
#+name:perl5-raindrops-solution-file
#+header: :mkdirp yes
#+begin_src perl :tangle perl5/raindrops/lib/raindrops.pm
package Raindrops;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(raindrop);

sub raindrop {
  my ($number) = @_;
  my %drop = (3=>'Pling', 5=>'Plang', 7=>'Plong');
  my $sound = '';

  for my $factor (3,5,7) {
      $sound .= $number % $factor ? '' : $drop{$factor};
  }

  return $sound ? $sound : $number;
}

1;
#+end_src

{{{heading(Perl5 Raindrops Test Solution)}}}

#+name:perl5-raindrops-test-solution
#+begin_src sh :dir perl5/raindrops :results output :exports both
prove ./t
#+end_src

#+RESULTS: perl5-raindrops-test-solution
* OCaml Exercism Track
- https://exercism.io/my/tracks/ocaml

** OCaml Getting Started
To work on the exercises, you will need [[https://opam.ocaml.org][Opam]] and [[https://opensource.janestreet.com/base/][Base]].  Consult [[https://opam.ocaml.org/doc/Install.html][opam]] website
for instructions on how to install =opam= for your OS.

#+name:ocaml-version-info
#+BEGIN_SRC sh :results output :exports both
opam --version
opam switch
ocaml --version
#+END_SRC

#+RESULTS: ocaml-version-info
: 2.0.4
: #  switch               compiler                    description
:    default              ocaml-base-compiler.4.07.0  default
: →  ocaml-base-compiler  ocaml-base-compiler.4.07.1  ocaml-base-compiler
: The OCaml toplevel, version 4.07.1

Once =opam= is installed open a terminal window and run the following command
to install =base= and =core_kernel=:

: opam install base core_kernel

To run the tests you will need =OUnit=.  Install it using =opam=:

: opam install ounit

*** OCaml Installation
- https://exercism.io/tracks/ocaml/installation


1. Install the OCaml compiler (ocaml) and package manager (opam).

   The excellent [[https://realworldocaml.org/][Real World OCaml]] book has [[https://github.com/realworldocaml/book/wiki/Installation-Instructions][installation instructions]] for a
   variety of operating systems.

2. If you followed the instructions from Real World OCaml, it is likely that
   your system's OCaml compiler is not the latest version.  To see a list of
   available versions and the one you have currently installed, run:

   : opam switch

   Note which version is the latest and install it by running:

   : opam switch <version-number>

   For example, if the latest version is 4.07.0, you will run:

   : opam switch 4.07.0

3. Install the =Core_kernel=, =Base= and =OUnit= packages, which are necessary in
   order to run the exercise tests:

   : opam install base core_kernel ounit

*** OCaml Running Tests
Because OCaml is a compiled language you need to compile your submission and
the test code before you can run the tests.  We use =jbuilder= to build.  Each
folder has a =jbuild= file specifying how to build and also a Makefile which
delegates to =jbuild=.

A Makefile is provided with a default target to compile your solution and run
the tests.  At the command line, type:

: make

*** OCaml Interactive Shell
=utop= is a command line program which allows you to run OCaml code
interactively.  The easiest way to install it is via =opam=:

: opam install utop

Consult utop for more detail.

*** OCaml Learning Resources

- [[http://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html][Documentation for the OCaml Standard Library]]

- [[https://ocaml.janestreet.com/][OCaml at JaneStreet]] and [[https://opensource.janestreet.com][Open Source Jane Street]]

- [[https://opensource.janestreet.com/base/][Documentation for the Jane Street Base Library]]

- [[https://opensource.janestreet.com/core/][Documentation for the Jane Street Core Library]]

- [[http://caml.inria.fr/resources/doc/guides/guidelines.en.html][Caml programming guidelines]]


OCaml's documentation is spread over multiple projects and can be hard to find
because there is what is sometimes called the "standard" library (the rather
minimal library that comes with the compiler) and a "Core" library (a separate
project by Jane Street that aims to provide a more complete and consistent
standard library).

Confusingly the standard library is sometimes referred to as the "core" library
(though rarely as the Core library).

The Core library from Jane Street is required for a few exercises, but can be
useful for all.  It's divided into three
- Base
- Core_kernel
- Core


each extending the previous.  Base is all you'll need for most exercises, but
for a few (using dates for instance, Core_kernel is needed).  To use Core, put
~open Base~ or ~open Core_kernel~ at the top of your code.

There are some subtle and not so subtle differences between the standard
library =List= module and Core's =List=.  A piece of advice: focus on the Core
library and ignore the standard library unless you really can't find what you
need in Core.

** OCaml Hello World
*** OCaml Hello World Download
#+name:ocaml-hello-world-download
#+BEGIN_SRC sh :results output :exports code
exercism download --exercise=hello-world --track=ocaml
#+END_SRC

#+RESULTS: ocaml-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/hello-world

*** OCaml Hello World Instruction
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".

- Run the test suite and make sure that it succeeds.

- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** OCaml Hello World README
#+name:ocaml-hello-world-README
#+BEGIN_SRC markdown :tangle ocaml/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`. Consult
[opam](https://opam.ocaml.org) website for instructions on how to
install `opam` for your OS. Once `opam` is installed open a terminal
window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution
and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run OCaml code
interactively. The easiest way to install it is via opam:

```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the OCaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

This is an exercise to introduce users to using Exercism
[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how
others have completed the exercise.
#+END_SRC

*** OCaml Hello World Solution
#+name:ocaml-hello-world-solution
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/hello_world.ml :mkdirp yes
let hello = "Hello, World!"
#+END_SRC

#+name:ocaml-hello-world-solution-interface
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/hello_world.mli :mkdirp yes
(*
   Returns "Hello, World!"
*)
val hello: string
#+END_SRC

#+name:ocaml-hello-world-metadata
#+BEGIN_SRC js :tangle ocaml/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"hello-world",
    "id":"87d3187606a5489eb60b63cbf0ec9af4",
    "url":"https://exercism.io/my/solutions/87d3187606a5489eb60b63cbf0ec9af4",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** OCaml Hello World Tests
#+name:ocaml-hello-world-tests
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/test.ml :mkdirp yes
open OUnit2
open Hello_world

let ae exp got _test_ctxt = assert_equal ~printer:(fun x -> x) exp got

let tests = [
     "Say Hi!" >:: ae "Hello, World!" hello;
]

let () =
  run_test_tt_main ("Hello World tests" >::: tests)
#+END_SRC

{{{heading(Testing OCaml Hello World)}}}

#+name:ocaml-hello-world-run-tests
#+BEGIN_SRC sh :dir ocaml/hello-world :results output :exports results
echo Running OCaml tests now...
make 2>&1
#+END_SRC

#+RESULTS: ocaml-hello-world-run-tests
: Running OCaml tests now...
: make clean...
: dune clean
: make test...
: dune runtest
:         test alias runtest
: .
: Ran: 1 tests in: 0.11 seconds.
: OK

*** OCaml Hello World Dune Project
#+name:ocaml-hello-world-dune
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+END_SRC

#+name:ocaml-hello-world-dune-project
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/dune-project :mkdirp yes
(lang dune 1.1)
#+END_SRC

*** OCaml Hello World Makefile
#+name:ocaml-hello-world-makefile
#+BEGIN_SRC make :tangle ocaml/hello-world/Makefile :mkdirp yes
default: clean test

test:
	@echo make test...
	dune runtest

clean:
	@echo make clean...
	dune clean

.PHONY: clean
#+END_SRC

** OCaml Leap
*** OCaml Leap Download
#+name:ocaml-leap-download
#+BEGIN_SRC sh :results output
exercism download --exercise=leap --track=ocaml
#+END_SRC

#+RESULTS: ocaml-leap-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/leap

*** OCaml Leap README
#+name:ocaml-leap-readme
#+BEGIN_SRC markdown
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

If your language provides a method in the standard library that does
this look-up, pretend it doesn't exist and implement it yourself.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`.  Consult
[opam](https://opam.ocaml.org) website for instructions on how to
install `opam` for your OS.  Once `opam` is installed open a terminal
window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run Ocaml code interactively. The easiest way to install it is via opam:
```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+END_SRC

*** OCaml Leap Solution
#+name:ocaml-leap-solution
#+BEGIN_SRC ocaml :tangle ocaml/leap/leap.ml :mkdirp yes
open Base

let leap_year year =
  let div4   = year %   4 = 0 in
  let div100 = year % 100 = 0 in
  let div400 = year % 400 = 0 in
  div4 && not (div100 && not div400);;
#+END_SRC

#+name:ocaml-leap-solution-interface
#+BEGIN_SRC ocaml :tangle ocaml/leap/leap.mli :mkdirp yes
val leap_year: int -> bool
#+END_SRC

#+name:ocaml-leap-metadata
#+BEGIN_SRC js :tangle ocaml/leap/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"leap",
    "id":"e02b0d61e88c451897a35598f9023b70",
    "url":"https://exercism.io/my/solutions/e02b0d61e88c451897a35598f9023b70",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

#+name:ocaml-leap-solution-submit
#+BEGIN_SRC sh
exercism submit ocaml/leap/leap.ml
#+END_SRC

#+RESULTS: ocaml-leap-solution-submit
: https://exercism.io/my/solutions/e02b0d61e88c451897a35598f9023b70

*** OCaml Leap Tests
#+name:ocaml-leap-tests
#+BEGIN_SRC ocaml :tangle ocaml/leap/test.ml :mkdirp yes
open OUnit2
open Leap

let ae exp got _test_ctxt = assert_equal exp got ~printer:string_of_bool

let tests = [
  "year not divisible by 4: common year" >::
    ae false (leap_year 2015);
  "year divisible by 4, not divisible by 100: leap year" >::
    ae true (leap_year 1996);
  "year divisible by 100, not divisible by 400: common year" >::
    ae false (leap_year 2100);
  "year divisible by 400: leap year" >::
    ae true (leap_year 2000);
  "year divisible by 200, not divisible by 400: common year" >::
    ae false (leap_year 1800);
]

let () =
  run_test_tt_main ("leap tests" >::: tests)
#+END_SRC

#+name:ocaml-leap-makefile
#+BEGIN_SRC make :tangle ocaml/leap/Makefile :mkdirp yes
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean
#+END_SRC

#+name:ocaml-leap-make
#+BEGIN_SRC sh :dir ocaml/leap :results output :exports results
make 2>&1
#+END_SRC

#+RESULTS: ocaml-leap-make
: dune clean
: dune runtest
:         test alias runtest
: .....
: Ran: 5 tests in: 0.10 seconds.
: OK

*** Ocaml Leap Dune Project
#+name:ocaml-leap-dune
#+BEGIN_SRC ocaml :tangle ocaml/leap/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+END_SRC

#+name:ocaml-leap-dune-project
#+BEGIN_SRC ocaml :tangle ocaml/leap/dune-project :mkdirp yes
(lang dune 1.1)
(version 1.4.0)
#+END_SRC
** OCaml Hamming
- https://exercism.io/my/solutions/0cdcb15b087c451a8e0e71ba614b6ca9

Calculate the Hamming difference between two DNA strands.

Inspired by "The Calculating Point Mutations problem at Rosalind
http://rosalind.info/problems/hamm/"

A mutation is simply a mistake that occurs during the creation or copying of a
nucleic acid, in particular DNA.  Because nucleic acids are vital to cellular
functions, mutations tend to cause a ripple effect throughout the cell.
Although mutations are technically mistakes, a very rare mutation may equip the
cell with a beneficial attribute.  In fact, the macro effects of evolution are
attributable by the accumulated result of beneficial microscopic mutations over
many generations.

The simplest and most common type of nucleic acid mutation is a point mutation,
which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands taken
from different genomes with a common ancestor, we get a measure of the minimum
number of point mutations that could have occurred on the evolutionary path
between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

#+begin_example
GAGCCTACTAACGGGAT
CATCGTAATGACGGCCT
^ ^ ^  ^ ^    ^^
#+end_example

The Hamming distance between these two DNA strands is 7.

The Hamming distance is only defined for sequences of equal length.  This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

*** OCaml Hamming Scripts

**** OCaml Hamming Download
#+name:ocaml-hamming-download
#+begin_src sh :results output
exercism download --exercise=hamming --track=ocaml
#+end_src

#+RESULTS: ocaml-hamming-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/hamming

**** OCaml Hamming Submit
#+name:ocaml-hamming-submit
#+begin_src sh :results output :dir ocaml/hamming
exercism submit hamming.ml
#+end_src

#+RESULTS: ocaml-hamming-submit
:     https://exercism.io/my/solutions/0cdcb15b087c451a8e0e71ba614b6ca9

**** OCaml Hamming Run Tests
#+name:ocaml-hamming-run-tests
#+begin_src sh :results output :exports both :dir ocaml/hamming
make 2>&1
#+end_src

#+RESULTS: ocaml-hamming-run-tests
: dune clean
: dune runtest
:         test alias runtest
: ...............
: Ran: 15 tests in: 0.11 seconds.
: OK

*** OCaml Hamming Source Files
**** OCaml Hamming Solution
#+name:ocaml-hamming-solution
#+begin_src ocaml :tangle ocaml/hamming/hamming.ml :mkdirp yes
open Base;;

type nucleotide = A | C | G | T;;

let hamming_distance nl1 nl2 =
  let ham = fun acc n1 n2 -> if phys_equal n1 n2 then acc else acc + 1 in
  try (Some (List.fold2_exn nl1 nl2 ~init:0 ~f:ham))
  with
  | _ -> None;;
#+end_src

**** OCaml Hamming Solution Interface
#+name:ocaml-hamming-solution-interface
#+begin_src ocaml :tangle ocaml/hamming/hamming.mli :mkdirp yes
type nucleotide = A | C | G | T

(** Compute the hamming distance between the two lists. *)
val hamming_distance : nucleotide list -> nucleotide list -> int option
#+end_src

**** OCaml Hamming Tests
#+name:ocaml-hamming-tests
#+begin_src ocaml :tangle ocaml/hamming/test.ml :mkdirp yes
open Base
open OUnit2
open Hamming

let printer = function
| None -> "None"
| Some x -> Int.to_string x

let ae exp got _test_ctxt = assert_equal ~printer exp got

let dna_of_string s =
  let f = function
    | 'A' -> A
    | 'C' -> C
    | 'G' -> G
    | 'T' -> T
    | _   -> failwith "Big news! New nucleotide discovered" in
  String.to_list s |> List.map ~f

let hamdist a b = hamming_distance (dna_of_string a) (dna_of_string b)

let tests = [
   "empty strands" >::
      ae (Some 0) (hamdist "" "");
   "identical strands" >::
      ae (Some 0) (hamdist "A" "A");
   "long identical strands" >::
      ae (Some 0) (hamdist "GGACTGA" "GGACTGA");
   "complete distance in single nucleotide strands" >::
      ae (Some 1) (hamdist "A" "G");
   "complete distance in small strands" >::
      ae (Some 2) (hamdist "AG" "CT");
   "small distance in small strands" >::
      ae (Some 1) (hamdist "AT" "CT");
   "small distance" >::
      ae (Some 1) (hamdist "GGACG" "GGTCG");
   "small distance in long strands" >::
      ae (Some 2) (hamdist "ACCAGGG" "ACTATGG");
   "non-unique character in first strand" >::
      ae (Some 1) (hamdist "AAG" "AAA");
   "non-unique character in second strand" >::
      ae (Some 1) (hamdist "AAA" "AAG");
   "same nucleotides in different positions" >::
      ae (Some 2) (hamdist "TAG" "GAT");
   "large distance" >::
      ae (Some 4) (hamdist "GATACA" "GCATAA");
   "large distance in off-by-one strand" >::
      ae (Some 9) (hamdist "GGACGGATTCTG" "AGGACGGATTCT");
   "disallow first strand longer" >::
      ae None (hamdist "AATG" "AAA");
   "disallow second strand longer" >::
      ae None (hamdist "ATA" "AGTG");
]

let () =
  run_test_tt_main ("hamming tests" >::: tests)
#+end_src

**** OCaml Hamming Build
{{{heading(Makefile)}}}

#+name:ocaml-hamming-makefile
#+begin_src make :tangle ocaml/hamming/Makefile :mkdirp yesn
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean
#+end_src

{{{heading(Dune)}}}

#+name:ocaml-hamming-dune
#+begin_src ocaml :tangle ocaml/hamming/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+end_src

{{{heading(Dune Project)}}}

#+name:ocaml-hamming-dune-project
#+begin_src ocaml :tangle ocaml/hamming/dune-project :mkdirp yes
(lang dune 1.1)
#+end_src

**** OCaml Hamming Readme
#+name:ocaml-hamming-readme
#+begin_src markdown :tangle ocaml/hamming/README.md :mkdirp yes
# Hamming

Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

# Implementation notes

The Hamming distance is only defined for sequences of equal length. This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`. Consult [opam](https://opam.ocaml.org) website for instructions on how to install `opam` for your OS. Once `opam` is installed open a terminal window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run Ocaml code interactively. The easiest way to install it is via opam:
```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

The Calculating Point Mutations problem at Rosalind [http://rosalind.info/problems/hamm/](http://rosalind.info/problems/hamm/)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

**** OCaml Hamming Metadata
#+name:ocaml-hamming-metadata
#+begin_src js :tangle ocaml/hamming/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"hamming",
    "id":"0cdcb15b087c451a8e0e71ba614b6ca9",
    "url":"https://exercism.io/my/solutions/0cdcb15b087c451a8e0e71ba614b6ca9",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

** OCaml Raindrops
Convert a number to a string, the contents of which depend on the number's
factors.

*** OCaml Raindrops Introduction
Convert a number to a string, the contents of which depend on the number's
factors.

- If the number has 3 as a factor, output 'Pling'.
- If the number has 5 as a factor, output 'Plang'.
- If the number has 7 as a factor, output 'Plong'.
- If the number does not have 3, 5, or 7 as a factor, just pass the number's
  digits straight through.


{{{heading(Examples)}}}

- 28's factors are 1, 2, 4, 7, 14, 28.
  - In raindrop-speak, this would be a simple "Plong".
- 30's factors are 1, 2, 3, 5, 6, 10, 15, 30.
  - In raindrop-speak, this would be a "PlingPlang".
- 34 has four factors: 1, 2, 17, and 34.
  - In raindrop-speak, this would be "34".


{{{heading(Getting Started)}}}

For installation and learning resources, refer to the [[*OCaml Getting Started][exercism help page]].

{{{heading(Installation)}}}

To work on the exercises, you will need ~Opam~ and ~Base~.  Consult [[https://opam.ocaml.org/][opam]]
website for instructions on how to install ~opam~ for your OS.  Once ~opam~ is
installed open a terminal window and run the following command to install
~base~:

: opam install base

To run the tests you will need ~OUnit~.  Install it using ~opam~:

: opam install ounit

{{{heading(Running Tests)}}}

A Makefile is provided with a default target to compile your solution and run
the tests.  At the command line, type:

: make

{{{heading(Interactive Shell)}}}

~utop~ is a command line program which allows you to run Ocaml code
interactively.  The easiest way to install it is via ~opam~:

: opam install utop

Consult [[https://github.com/diml/utop/blob/master/README.md][utop]] for more detail.

*** OCaml Raindrops Readme
#+name:ocaml-raindrops-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle ocaml/raindrops/README.md
# Raindrops

Convert a number to a string, the contents of which depend on the number's factors.

- If the number has 3 as a factor, output 'Pling'.
- If the number has 5 as a factor, output 'Plang'.
- If the number has 7 as a factor, output 'Plong'.
- If the number does not have 3, 5, or 7 as a factor,
  just pass the number's digits straight through.

## Examples

- 28's factors are 1, 2, 4, **7**, 14, 28.
  - In raindrop-speak, this would be a simple "Plong".
- 30's factors are 1, 2, **3**, **5**, 6, 10, 15, 30.
  - In raindrop-speak, this would be a "PlingPlang".
- 34 has four factors: 1, 2, 17, and 34.
  - In raindrop-speak, this would be "34".


## Getting Started
1. [Install the Exercism CLI](https://exercism.io/cli-walkthrough).

2. [Install OCaml](https://exercism.io/tracks/ocaml/installation).

3. For library documentation, follow [Useful OCaml resources](https://exercism.io/tracks/ocaml/resources).

## Running Tests
A `Makefile` is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on GitHub is
the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue or submit a PR. We welcome new
contributors!

## Source

A variation on a famous interview question intended to weed out potential candidates. [http://jumpstartlab.com](http://jumpstartlab.com)


#+end_src

*** OCaml Raindrops Scripts
**** OCaml Raindrops Download Script
#+name:ocaml-raindrops-download-script
#+begin_src sh :results output :exports none
exercism download --exercise=raindrops --track=ocaml
#+end_src

#+RESULTS: ocaml-raindrops-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/raindrops

**** OCaml Raindrops Run Tests Scripts
#+name:ocaml-raindrops-run-tests-script
#+header: :dir ocaml/raindrops
#+begin_src sh :results output :exports results
make
#+end_src

**** OCaml Raindrops Submit Script
#+name:ocaml-raindrops-submit-script
#+begin_src sh :results output :exports none
exercism submit ocaml/raindrops/raindrops.ml
#+end_src

#+RESULTS: ocaml-raindrops-submit-script
:     https://exercism.io/my/solutions/021bc609157b481983cfd7ce4fb39fa7
: 

#+name:ocaml-raindrops-exercism-metadata
#+header: :exports none :mkdirp yes
#+begin_src js :tangle ocaml/raindrops/.exercism/metadata.json
{
    "track":"ocaml",
    "exercise":"raindrops",
    "id":"021bc609157b481983cfd7ce4fb39fa7",
    "url":"https://exercism.io/my/solutions/021bc609157b481983cfd7ce4fb39fa7",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** OCaml Raindrops Toolchain
**** OCaml Raindrops Dune
#+name:ocaml-raindrops-dune
#+begin_src ocaml :tangle ocaml/raindrops/dune
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+end_src
**** OCaml Raindrops Dune Project
#+name:ocaml-raindrops-dune-project
#+begin_src ocaml :tangle ocaml/raindrops/dune-project
(lang dune 1.1)
#+end_src
**** OCaml Raindrops Makefile
#+name:ocaml-raindrops-makefile
#+begin_src make :tangle ocaml/raindrops/Makefile
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean

#+end_src

*** OCaml Raindrops Tests
#+name:ocaml-raindrops-tests
#+begin_src ocaml :tangle ocaml/raindrops/test.ml
open OUnit2
open Raindrops

let ae exp got _test_ctxt = assert_equal ~printer:(fun x -> x) exp got

let tests = [
   "the sound for 1 is 1" >::
      ae "1" (raindrop 1);
   "the sound for 3 is Pling" >::
      ae "Pling" (raindrop 3);
   "the sound for 5 is Plang" >::
      ae "Plang" (raindrop 5);
   "the sound for 7 is Plong" >::
      ae "Plong" (raindrop 7);
   "the sound for 6 is Pling as it has a factor 3" >::
      ae "Pling" (raindrop 6);
   "2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base" >::
      ae "8" (raindrop 8);
   "the sound for 9 is Pling as it has a factor 3" >::
      ae "Pling" (raindrop 9);
   "the sound for 10 is Plang as it has a factor 5" >::
      ae "Plang" (raindrop 10);
   "the sound for 14 is Plong as it has a factor of 7" >::
      ae "Plong" (raindrop 14);
   "the sound for 15 is PlingPlang as it has factors 3 and 5" >::
      ae "PlingPlang" (raindrop 15);
   "the sound for 21 is PlingPlong as it has factors 3 and 7" >::
      ae "PlingPlong" (raindrop 21);
   "the sound for 25 is Plang as it has a factor 5" >::
      ae "Plang" (raindrop 25);
   "the sound for 27 is Pling as it has a factor 3" >::
      ae "Pling" (raindrop 27);
   "the sound for 35 is PlangPlong as it has factors 5 and 7" >::
      ae "PlangPlong" (raindrop 35);
   "the sound for 49 is Plong as it has a factor 7" >::
      ae "Plong" (raindrop 49);
   "the sound for 52 is 52" >::
      ae "52" (raindrop 52);
   "the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7" >::
      ae "PlingPlangPlong" (raindrop 105);
   "the sound for 3125 is Plang as it has a factor 5" >::
      ae "Plang" (raindrop 3125);
]

let () =
  run_test_tt_main ("raindrops tests" >::: tests)

#+end_src

*** OCaml Raindrops Solution Code
**** OCaml Raindrops Interface
#+name:ocaml-raindrops-code
#+begin_src ocaml -n :tangle ocaml/raindrops/raindrops.mli :mkdirp yes
(*
    If the number contains 3 as a factor, output 'Pling'.
    If the number contains 5 as a factor, output 'Plang'.
    If the number contains 7 as a factor, output 'Plong'.
    If the number does not contain 3, 5, or 7 as a factor, just pass the number's digits straight through.
*)
val raindrop : int -> string
#+end_src

**** OCaml Raindrops Code
#+name:ocaml-raindrops-code
#+begin_src ocaml -n :tangle ocaml/raindrops/raindrops.ml
open Base

let raindrop num =
  let new_pl m =
    match m with
    | 3 -> "Pling"
    | 5 -> "Plang"
    | 7 -> "Plong"
    | _ -> ""
  in
  let div_by n m = n % m = 0 in
  let add_pl s pl =
    match s with
    | None -> Some pl
    | Some pl' -> Some (pl' ^ pl)
  in
  let ans s n m =
    if div_by n m
    then add_pl s (new_pl m)
    else s
  in
  let reveal s =
    match s with
    | None -> Int.to_string num
    | Some s -> s
  in
  reveal (ans (ans (ans None num 3) num 5) num 7);;
#+end_src

** OCaml Anagram
:PROPERTIES:
:exercise: side
:END:

*** OCaml Anagrom Introduction
Given a word and a list of possible anagrams, select the correct sublist.

Given "listen" and a list of candidates like "enlists" "google" "inlets"
"banana" the program should return a list containing "inlets".

{{{heading(Running Tests)}}}

A =Makefile= is provided with a default target to compile your solution and run
the tests.  At the command line, type:

: make

*** OCaml Anagram Readme
#+name:ocaml-anagram-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle ocaml/anagram/README.md
# Anagram

Given a word and a list of possible anagrams, select the correct sublist.

Given `"listen"` and a list of candidates like `"enlists" "google"
"inlets" "banana"` the program should return a list containing
`"inlets"`.


## Getting Started
1. [Install the Exercism CLI](https://exercism.io/cli-walkthrough).

2. [Install OCaml](https://exercism.io/tracks/ocaml/installation).

3. For library documentation, follow [Useful OCaml resources](https://exercism.io/tracks/ocaml/resources).

## Running Tests
A `Makefile` is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on GitHub is
the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue or submit a PR. We welcome new
contributors!

## Source

Inspired by the Extreme Startup game [https://github.com/rchatley/extreme_startup](https://github.com/rchatley/extreme_startup)


#+end_src

*** OCaml Anagram Scripts
**** OCaml Anagram Download Script
#+name:ocaml-anagram-download-script
#+begin_src sh
exercism download --exercise=anagram --track=ocaml
#+end_src

#+RESULTS: ocaml-anagram-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/anagram

**** OCaml Anagrom Run Test Script

**** OCaml Anagram Submit Script
#+name:ocaml-anagram-submit-script
#+begin_src sh
exercism submit ocaml/anagram/anagram.ml
#+end_src

#+RESULTS: ocaml-anagram-submit-script
: https://exercism.io/my/solutions/d11f308abfe94fc7b783c16b74775a42

#+name:ocaml-anagram-exercism-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle ocaml/anagram/.exercism/metadata.json
{
    "track":"ocaml",
    "exercise":"anagram",
    "id":"d11f308abfe94fc7b783c16b74775a42",
    "url":"https://exercism.io/my/solutions/d11f308abfe94fc7b783c16b74775a42",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** OCaml Anagram Build Files
**** OCaml Anagram Build Files---Makefile
#+name:ocaml-anagram-build-files-makefile
#+begin_src make :tangle ocaml/anagram/Makefile
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean

#+end_src
**** OCaml Anagram Build Files---Dune Project
#+name:ocaml-anagram-build-files-dune-project
#+begin_src ocaml :tangle ocaml/anagram/dune-project
(lang dune 1.1)
(version 1.4.0)
#+end_src
**** OCaml Anagram Build Files---Dune
#+name:ocaml-anagram-build-files-dune
#+begin_src ocaml :tangle ocaml/anagram/dune
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+end_src

*** OCaml Anagram Test
#+name:ocaml-anagram-test
#+begin_src ocaml :tangle ocaml/anagram/test.ml
open Base
open OUnit2
open Anagram

let ae exp got _test_ctxt =
  let printer = String.concat ~sep:";" in
  assert_equal exp got ~printer

let tests = [
  "no matches" >::
  ae [] (anagrams "diaper" ["hello"; "world"; "zombies"; "pants"]);
  "detects two anagrams" >::
  ae ["stream"; "maters"] (anagrams "master" ["stream"; "pigeon"; "maters"]);
  "does not detect anagram subsets" >::
  ae [] (anagrams "good" ["dog"; "goody"]);
  "detects anagram" >::
  ae ["inlets"] (anagrams "listen" ["enlists"; "google"; "inlets"; "banana"]);
  "detects three anagrams" >::
  ae ["gallery"; "regally"; "largely"] (anagrams "allergy" ["gallery"; "ballerina"; "regally"; "clergy"; "largely"; "leading"]);
  "does not detect non-anagrams with identical checksum" >::
  ae [] (anagrams "mass" ["last"]);
  "detects anagrams case-insensitively" >::
  ae ["Carthorse"] (anagrams "Orchestra" ["cashregister"; "Carthorse"; "radishes"]);
  "detects anagrams using case-insensitive subject" >::
  ae ["carthorse"] (anagrams "Orchestra" ["cashregister"; "carthorse"; "radishes"]);
  "detects anagrams using case-insensitive possible matches" >::
  ae ["Carthorse"] (anagrams "orchestra" ["cashregister"; "Carthorse"; "radishes"]);
  "does not detect an anagram if the original word is repeated" >::
  ae [] (anagrams "go" ["go Go GO"]);
  "anagrams must use all letters exactly once" >::
  ae [] (anagrams "tapper" ["patter"]);
  "words are not anagrams of themselves (case-insensitive)" >::
  ae [] (anagrams "BANANA" ["BANANA"; "Banana"; "banana"]);
]

let () =
  run_test_tt_main ("anagrams tests" >::: tests)
#+end_src

*** OCaml Anagram Solution Files
**** OCaml Anagram Interface
#+name:ocaml-anagram-interface
#+begin_src ocaml -n :tangle ocaml/anagram/anagram.mli
(** Anagram exercise *)

(** Returns all candidates that are anagrams of, but not equal to, [base].

    Comparisons are case insensitive.
*)
val anagrams : string -> string list -> string list
#+end_src

**** OCaml Anagram Solution Code
To check whether two strings are anagrams of each other, create lists of
caseless characters (=Char= s) but make sure they are not the same word first
(the same word is not an anagram of itself), then compare the two Char lists.

#+name:ocaml-anagram-solution
#+begin_src ocaml -n :tangle ocaml/anagram/anagram.ml
open Base

(* Turn each String s and the elements of sl into sorted Caseless Char lists;
   make sure they don't equal each other; then compare the lists for equality. *)
let anagrams s sl =
  (* Turn the String s into a sorted Caseless (e.g. lowercased) Char list *)
  let sort_str s =
    List.sort (List.map (String.to_list s) ~f:Char.lowercase) ~compare:Char.compare
  in
  let s_sorted = sort_str s
  in
  List.filter sl ~f:(fun s' ->
      let s_sorted' = sort_str s' in
      (* make sure they are not the same word *)
      (not (String.Caseless.equal s s')) && (List.equal Char.equal s_sorted s_sorted'));;
#+end_src

** OCaml Space Age
:PROPERTIES:
:exercise: side
:END:

*** OCaml Space Age Introduction
Given an age in seconds, calculate how old someone would be on:

- Earth: orbital period 365.25 Earth days, or 31557600 seconds
- Mercury: orbital period 0.2408467 Earth years
- Venus: orbital period 0.61519726 Earth years
- Mars: orbital period 1.8808158 Earth years
- Jupiter: orbital period 11.862615 Earth years
- Saturn: orbital period 29.447498 Earth years
- Uranus: orbital period 84.016846 Earth years
- Neptune: orbital period 164.79132 Earth years


So if you were told someone were 1,000,000,000 seconds old, you should be able
to say that they're 31.69 Earth-years old.

*** OCaml Space Age Scripts
**** OCaml Space Age Download Script
#+name:ocaml-space-age-download-script
#+begin_src sh
exercism download --exercise=space-age --track=ocaml
#+end_src

#+RESULTS: ocaml-space-age-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/space-age

**** OCaml Space Age Run Tests Script
#+name:ocaml-space-age-run-tests-script
#+header: :dir ocaml/space-age
#+header: :results output :exports results
#+begin_src sh
make 2>&1
#+end_src

#+RESULTS: ocaml-space-age-run-tests-script
: dune clean
: dune runtest
:         test alias runtest
: ........
: Ran: 8 tests in: 0.11 seconds.
: OK

**** OCaml Space Age Submit Script
#+name:ocaml-space-age-submit-script
#+begin_src sh
exercism submit ocaml/space-age/space_age.ml
#+end_src

#+RESULTS: ocaml-space-age-submit-script
: https://exercism.io/my/solutions/1d143cfd9df544a4a3d4c61e8692448d

#+name:ocaml-space-age-exercism-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle ocaml/space-age/.exercism/metadata.json
{
    "track":"ocaml",
    "exercise":"space-age",
    "id":"1d143cfd9df544a4a3d4c61e8692448d",
    "url":"https://exercism.io/my/solutions/1d143cfd9df544a4a3d4c61e8692448d",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** OCaml Space Age Readme
#+name:ocaml-space-age-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle ocaml/space-age/README.md
# Space Age

Given an age in seconds, calculate how old someone would be on:

   - Earth: orbital period 365.25 Earth days, or 31557600 seconds
   - Mercury: orbital period 0.2408467 Earth years
   - Venus: orbital period 0.61519726 Earth years
   - Mars: orbital period 1.8808158 Earth years
   - Jupiter: orbital period 11.862615 Earth years
   - Saturn: orbital period 29.447498 Earth years
   - Uranus: orbital period 84.016846 Earth years
   - Neptune: orbital period 164.79132 Earth years

So if you were told someone were 1,000,000,000 seconds old, you should
be able to say that they're 31.69 Earth-years old.

If you're wondering why Pluto didn't make the cut, go watch [this
youtube video](http://www.youtube.com/watch?v=Z_2gbGXzFbs).


## Getting Started
1. [Install the Exercism CLI](https://exercism.io/cli-walkthrough).

2. [Install OCaml](https://exercism.io/tracks/ocaml/installation).

3. For library documentation, follow [Useful OCaml resources](https://exercism.io/tracks/ocaml/resources).

## Running Tests
A `Makefile` is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on GitHub is
the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue or submit a PR. We welcome new
contributors!

## Source

Partially inspired by Chapter 1 in Chris Pine's online Learn to Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=01](http://pine.fm/LearnToProgram/?Chapter=01)


#+end_src

*** OCaml Space Age Build Files
**** OCaml Space Age Dune Project
#+name:ocaml-space-age-dune-project
#+begin_src ocaml :tangle ocaml/space-age/dune-project
(lang dune 1.1)
#+end_src

**** OCaml Space Age Dune File
#+name:ocaml-space-age-dune-file
#+begin_src ocaml :tangle ocaml/space-age/dune
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+end_src

**** OCaml Space Age Makefile
#+name:ocaml-space-age-makefile
#+begin_src make :tangle ocaml/space-age/Makefile
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean

#+end_src

*** OCaml Space Age Test File
#+name:ocaml-space-age-test-file
#+begin_src ocaml -n :tangle ocaml/space-age/test.ml
open Base
open OUnit2
open Space_age

let ae ~delta:delta exp got _ctxt =
  let msg = Printf.sprintf "Expected %f got %f, difference is greater than %f"
                    exp got delta in
  assert_bool msg (cmp_float ~epsilon:delta exp got)

let tests = [
   "age on Earth" >::
      ae ~delta:0.05 31.69 (age_on Earth 1000000000);
   "age on Mercury" >::
      ae ~delta:0.05 280.88 (age_on Mercury 2134835688);
   "age on Venus" >::
      ae ~delta:0.05 9.78 (age_on Venus 189839836);
   "age on Mars" >::
      ae ~delta:0.05 35.88 (age_on Mars 2129871239);
   "age on Jupiter" >::
      ae ~delta:0.05 2.41 (age_on Jupiter 901876382);
   "age on Saturn" >::
      ae ~delta:0.05 2.15 (age_on Saturn 2000000000);
   "age on Uranus" >::
      ae ~delta:0.05 0.46 (age_on Uranus 1210123456);
   "age on Neptune" >::
      ae ~delta:0.05 0.35 (age_on Neptune 1821023456);
]

let () =
  run_test_tt_main ("space-age tests" >::: tests)
#+end_src

*** OCaml Space Age Solution Files
**** OCaml Space Age Interface
#+name:ocaml-space-age-interface
#+begin_src ocaml :tangle ocaml/space-age/space_age.mli
(** Space-age exercise *)

type planet = Mercury | Venus | Earth | Mars
            | Jupiter | Saturn | Neptune | Uranus

(** Convert seconds to years on the specified planet *)
val age_on : planet -> int -> float
#+end_src

**** OCaml Space Age Solution
The new concepts used in this solution are:

{{{heading(List.Assoc find_exn)}}}

#+attr_texinfo: :options Base.List.Assoc find_exn assoc_list equal_fn key
#+begin_defmethod
Given an association list {{{var(assoc_list)}}} and a key {{{var(key)}}},
return the value associated with that {{{var(key)}}}.
#+end_defmethod

{{{heading(Poly equal)}}}

#+attr_texinfo: :options Base.Poly equal a' a'
#+begin_defmethod
Given some type, use ~Base.Poly.equal~ to compare two elements of that type for
equality.
#+end_defmethod

#+pindex:space_age.ml
#+caption:OCaml Space Age Solution
#+name:ocaml-space-age-solution
#+begin_src ocaml :tangle ocaml/space-age/space_age.ml

type planet = Mercury | Venus | Earth | Mars
            | Jupiter | Saturn | Neptune | Uranus

let earth_orbital_period = 31557600 (* 1 year = 31557600 seconds *)

let orbital_periods_assoc = [
  (Mercury, 0.2408467);
  (Venus, 0.61519726);
  (Earth, 1.0);
  (Mars, 1.8808158);
  (Jupiter, 11.862615);
  (Saturn, 29.447498);
  (Uranus, 84.016846);
  (Neptune, 164.79132);
]

let age_on pl sec =
  let age_on_earth s =
    (Float.of_int s) /. (Float.of_int earth_orbital_period)
  in
  (age_on_earth sec) /. (Base.List.Assoc.find_exn orbital_periods_assoc ~equal:Base.Poly.equal pl)
#+end_src

* Bash Exercism Track
** Running the Tests
Run the tests with
: bats whatever_test.sh
or
: ./whatever_test.sh.

** Bash Resources
- [[http://mywiki.wooledge.org/BashGuide][Bash Guide]]
- [[http://mywiki.wooledge.org/BashFAQ][Bash FAQ]]
- [[https://mywiki.wooledge.org/BashPitfalls][Bash Pitfalls]]
- [[http://gnu.org/s/bash/manual][GNU Bash Manual]]
- [[http://wiki.bash-hackers.org/][Bash-Hackers Wiki]]
- [[http://www.shellcheck.net/][Shellcheck provides shell script guidelines and help]]

** Bash Hello World
*** Bash Hello World Readme
#+name:bash-hello-world-readme
#+begin_src markdown :tangle bash/hello-world/README.md :mkdirp yes
  # Hello World

  The classical introductory exercise. Just say "Hello, World!".

  ["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
  the traditional first program for beginning programming in a new language
  or environment.

  The objectives are simple:

  - Write a function that returns the string "Hello, World!".
  - Run the test suite and make sure that it succeeds.
  - Submit your solution and check it at the website.

  If everything goes well, you will be ready to fetch your first real exercise.

  # Welcome to Bash!

  Unlike many other languages here, bash is a bit of a special snowflake.
  If you are on a Mac or other unix-y platform, you almost definitely
  already have bash. In fact, anything you type into the terminal is
  likely going through bash.

  The downside to this is that there isn't much of a development
  ecosystem around bash like there is for other languages, and there are
  multiple versions of bash that can be frustratingly incompatible. Luckily
  we shouldn't hit those differences for these basic examples, and if you
  can get the tests to pass on your machine, we are doing great.

  ## Installation

  As mentioned above, if you are on a unix-like OS (Mac OS X, Linux, Solaris,
  etc), you probably already have bash.

  ## Testing

  As there isn't much of a bash ecosystem, there also isn't really a de
  facto leader in the bash testing area. For these examples we are using
  [bats](https://github.com/sstephenson/bats). You should be able to
  install it from your favorite package manager, on OS X with homebrew
  this would look something like this:

  ```
  $ brew install bats
  ==> Downloading
  https://github.com/sstephenson/bats/archive/v0.4.0.tar.gz
  ==> Downloading from
  https://codeload.github.com/sstephenson/bats/tar.gz/v0.4.0
  ########################################################################
  100.0%
  ==> ./install.sh /opt/boxen/homebrew/Cellar/bats/0.4.0
  🍺  /opt/boxen/homebrew/Cellar/bats/0.4.0: 10 files, 60K, built in 2
  seconds
  ```



  Run the tests with:

  ```bash
  bats hello_world_test.sh
  ```

  After the first test(s) pass, continue by commenting out or removing
  the `skip` annotations prepending other tests.

  ## Source

  This is an exercise to introduce users to using Exercism
  [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)


  ## External utilities
  `Bash` is a language to write scripts that works closely with various
  system utilities, like [`sed`](https://www.gnu.org/software/sed/),
  [`awk`](https://www.gnu.org/software/gawk/),
  [`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html)
  and even other programming languages, like
  [`Python`](https://www.python.org/).  This track does not restrict the
  usage of these utilities, and as long as your solution is portable
  between systems and does not require installing third party
  applications, feel free to use them to solve the exercise.

  For an extra challenge, if you would like to have a better
  understanding of the language, try to re-implement the solution in
  pure `Bash`, without using any external tools.

  ## Submitting Incomplete Solutions
  It's possible to submit an incomplete solution so you can see how
  others have completed the exercise.
#+end_src

*** Bash Hello World Scripts
{{{heading(Download)}}}
#+name:bash-hello-world-download
#+begin_src sh :results output
exercism download --exercise=hello-world --track=bash
#+end_src

#+RESULTS: bash-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/bash/hello-world

{{{heading(Submit)}}}
#+name:bash-hello-world-submit
#+begin_src sh :results output
exercism submit bash/hello-world/hello_world.sh
#+end_src

#+RESULTS: bash-hello-world-submit
:     https://exercism.io/my/solutions/dd8bfeb136eb49cc97042313a2ee2477

*** Bash Hello World Solution
#+name:bash-hello-world-solution
#+begin_src sh :tangle bash/hello-world/hello_world.sh :mkdirp yes
#!/usr/bin/env bash

# This is a bash script template in order to help you quick start any script.
# It contains some sensible defaults, you can learn more by visiting:
# https://google.github.io/styleguide/shell.xml
#
# /!\ Please remove all the comments when you use this on other exercises

# This option will make the script exit when there is an error
set -o errexit
# This option will make the script exit when it tries to use an unset variable
set -o nounset

main() {
  # A string variable containing only the FIRST argument passed to the script,
  # you can use input="$@" to get a string with ALL arguments
  # input=$1

  # Add your code here
  echo "Hello, World!"
}

# Calls the main function passing all the arguments to it via '$@'
# The argument is in quotes to prevent whitespace issues
main "$@"
#+end_src

{{{heading(Run Tests)}}}
#+name:bash-hello-world-run-tests
#+begin_src sh :dir bash/hello-world :results output :exports both
bats hello_world_test.sh
#+end_src

#+RESULTS: bash-hello-world-run-tests
: 1..1
: ok 1 Say Hi!

#+name:bash-hello-world-exercism-metadata
#+begin_src js :tangle bash/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"bash",
    "exercise":"hello-world",
    "id":"dd8bfeb136eb49cc97042313a2ee2477",
    "url":"https://exercism.io/my/solutions/dd8bfeb136eb49cc97042313a2ee2477",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+end_src

*** Bash Hello World Test
#+name:bash-hello-world-test
#+begin_src sh :tangle bash/hello-world/hello_world_test.sh
#!/usr/bin/env bash

@test "Say Hi!" {
  run bash hello_world.sh

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, World!" ]
}

#+end_src
** Bash Two Fer
*** Bash Two Fer Readme
#+name:bash-two-fer-readme
#+begin_src markdown :tangle bash/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

```text
"One for X, one for me."
```

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."



Run the tests with:

```bash
bats two_fer_test.sh
```

After the first test(s) pass, continue by commenting out or removing the `skip` annotations prepending other tests.

## Source

[https://en.wikipedia.org/wiki/Two-fer](https://en.wikipedia.org/wiki/Two-fer)


## External utilities
`Bash` is a language to write scripts that works closely with various system utilities,
like [`sed`](https://www.gnu.org/software/sed/), [`awk`](https://www.gnu.org/software/gawk/), [`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html) and even other programming languages, like [`Python`](https://www.python.org/).
This track does not restrict the usage of these utilities, and as long as your solution is portable
between systems and does not require installing third party applications, feel free to use them to solve the exercise.

For an extra challenge, if you would like to have a better understanding of the language,
try to re-implement the solution in pure `Bash`, without using any external tools.

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Bash Two Fer Scripts
**** Bash Two Fer Download and Submit
#+name:bash-two-fer-download
#+begin_src sh :results output
exercism download --exercise=two-fer --track=bash
#+end_src

#+RESULTS: bash-two-fer-download
: /Users/pine/Dev/Programming/Languages/Exercism/bash/two-fer

#+name:bash-two-fer-submit
#+begin_src sh :results output
exercism submit bash/two-fer/two_fer.sh
#+end_src

#+RESULTS: bash-two-fer-submit
:     https://exercism.io/my/solutions/e55799ac20db44a4a2d544a1073c1ab6

*** Bash Two Fer Code
**** Bash Two Fer Solution
#+name:bash-two-fer-solution
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle bash/two-fer/two_fer.sh :mkdirp yes
two_fer() {
    input=${1:-you}
    echo "One for $input, one for me."
}

two_fer "$@"
#+end_src

{{{heading(Run Tests)}}}
#+name:bash-two-fer-run-tests
#+begin_src sh :dir bash/two-fer :results output :exports both
bats ./two_fer_test.sh
#+end_src

#+RESULTS: bash-two-fer-run-tests
: 1..3
: ok 1 no name given
: ok 2 a name given
: ok 3 another name given

#+name:bash-two-fer-exercism-metadata
#+begin_src js :tangle bash/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"bash",
    "exercise":"two-fer",
    "id":"e55799ac20db44a4a2d544a1073c1ab6",
    "url":"https://exercism.io/my/solutions/e55799ac20db44a4a2d544a1073c1ab6",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Bash Two Fer Test
#+name:bash-two-fer-test
#+header: :mkdirp yes :shebang "#!/usr/bin/env bats"
#+begin_src sh :tangle bash/two-fer/two_fer_test.sh

@test "no name given" {
  #skip
  run bash two_fer.sh
  [ "$status" -eq 0 ]
  [ "$output" == "One for you, one for me." ]
}

@test "a name given" {
  #skip
  run bash two_fer.sh Alice
  [ "$status" -eq 0 ]
  [ "$output" == "One for Alice, one for me." ]
}

@test "another name given" {
  #skip
  run bash two_fer.sh Bob
  [ "$status" -eq 0 ]
  [ "$output" == "One for Bob, one for me." ]
}
#+end_src

#+BEGIN_SRC sh :dir bash/two-fer :results output
./two_fer_test.sh
#+END_SRC

#+RESULTS:
: 1..3
: ok 1 no name given
: ok 2 a name given
: ok 3 another name given
** Bash Error Handling
{{{heading(Introduction)}}}

Implement various kinds of error handling and resource management.

An important point of programming is how to handle errors and close resources
even if errors occur.

This exercise requires you to handle various errors.  Because error handling is
rather programming language specific you'll have to refer to the tests for your
track to see what's exactly required.

Run the tests with:

: bats error_handling_test.sh

After the first test(s) pass, continue by commenting out or removing the skip
annotations prepending other tests.

{{{heading(External Utilities)}}}

Bash is a language to write scripts that works closely with various system
utilities, like ~sed~, ~awk~, ~date~ and even other programming languages, like
Python.  This track does not restrict the usage of these utilities, and as long
as your solution is portable between systems and does not require installing
third party applications, feel free to use them to solve the exercise.

For an extra challenge, if you would like to have a better understanding of the
language, try to re-implement the solution in pure Bash, without using any
external tools.
*** Bash Error Handling Readme
#+namd:bash-error-handling-readme
#+begin_src markdown :tangle bash/error-handling/README.md :mkdirp yes
  # Error Handling

  Implement various kinds of error handling and resource management.

  An important point of programming is how to handle errors and close
  resources even if errors occur.

  This exercise requires you to handle various errors. Because error handling
  is rather programming language specific you'll have to refer to the tests
  for your track to see what's exactly required.


  Run the tests with:

  ```bash
  bats error_handling_test.sh
  ```

  After the first test(s) pass, continue by commenting out or removing
  the `skip` annotations prepending other tests.



  ## External utilities
  `Bash` is a language to write scripts that works closely with various
  system utilities, like [`sed`](https://www.gnu.org/software/sed/),
  [`awk`](https://www.gnu.org/software/gawk/),
  [`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html)
  and even other programming languages, like
  [`Python`](https://www.python.org/).  This track does not restrict the
  usage of these utilities, and as long as your solution is portable
  between systems and does not require installing third party
  applications, feel free to use them to solve the exercise.

  For an extra challenge, if you would like to have a better understanding of the language,
  try to re-implement the solution in pure `Bash`, without using any external tools.

  ## Submitting Incomplete Solutions
  It's possible to submit an incomplete solution so you can see how
  others have completed the exercise.
#+end_src
*** Bash Error Handling Download and Submit Scripts
**** Bash Error Handling Download Script
#+name:bash-error-handling-download
#+begin_src sh :results output
exercism download --exercise=error-handling --track=bash
#+end_src

#+RESULTS: bash-error-handling-download
: /usr/local/dev/programming/Languages/Exercism/bash/error-handling

**** Bash Error Handling Submit Script
#+name:bash-error-handling-submit
#+begin_src sh :results output
exercism submit bash/error-handling/error_handling.sh
#+end_src

#+RESULTS: bash-error-handling-submit
:     https://exercism.io/my/solutions/a39a7939b2ae4e4fbe9d0a68740a46f4
: 

#+name:bash-error-handling-exercism-metadata
#+begin_src js :tangle bash/error-handling/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"bash",
    "exercise":"error-handling",
    "id":"a39a7939b2ae4e4fbe9d0a68740a46f4",
    "url":"https://exercism.io/my/solutions/a39a7939b2ae4e4fbe9d0a68740a46f4",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Bash Error Handling Code
n#+name:bash-error-handling-code
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle bash/error-handling/error_handling.sh :mkdirp yes
  set -o errexit

  main() {
      usage="Usage: ./error_handling <greetee>"
      (( $# != 1 )) && { echo $usage; exit 1; }

      input="$1"
      echo "Hello, $input"
  }

  main "$@"
#+end_src

{{{heading(Test the Code)}}}

#+name:bash-error-handling-code-test
#+begin_src sh :dir bash/error-handling :results output :exports both
bats error_handling_test.sh
#+end_src

#+RESULTS: bash-error-handling-code-test
: 1..5
: ok 1 correct arguments
: ok 2 one long argument
: ok 3 incorrect arguments
: ok 4 print usage banner with no value given
: ok 5 empty argument

*** Bash Error Handling Tests
#+name:bash-error-handling-tests
#+begin_src sh :tangle bash/error-handling/error_handling_test.sh :mkdirp yes
#!/usr/bin/env bash

@test "correct arguments" {
  #skip
  run bash error_handling.sh Alice

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, Alice" ]
}

@test "one long argument" {
  #skip
  run bash error_handling.sh "Alice and Bob"

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, Alice and Bob" ]
}

@test "incorrect arguments" {
  #skip
  run bash error_handling.sh Alice Bob

  [ "$status" -eq 1 ]
  [ "$output" = "Usage: ./error_handling <greetee>" ]
}

@test "print usage banner with no value given" {
  #skip
  run bash error_handling.sh

  [ "$status" -eq 1 ]
  [ "$output" = "Usage: ./error_handling <greetee>" ]
}

@test "empty argument" {
  #skip
  run bash error_handling.sh ""

  [ "$status" -eq 0 ]
  [ "$output" = "Hello, " ]
}
#+end_src
** Bash Reverse String
:PROPERTIES:
:exercise: side
:END:
*** Bash Reverse String Introduction
Reverse a string

For example: input: "cool" output: "looc"

Run the tests with:

: bats reverse_string_test.sh

After the first test(s) pass, continue by commenting out or removing the skip
annotations prepending other tests.

{{{heading(Source)}}}

[[https://medium.freecodecamp.org/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb][Introductory challenge to reverse an input string]]

{{{heading(External utilities)}}}

Bash is a language to write scripts that works closely with various system
utilities, like ~sed~, ~awk~, ~date and even other programming languages, like
~Python~.  This track does not restrict the usage of these utilities, and as
long as your solution is portable between systems and does not require
installing third party applications, feel free to use them to solve the
exercise.

For an extra challenge, if you would like to have a better understanding of the
language, try to re-implement the solution in pure Bash, without using any
external tools.

*** Bash Reverse String Scripts
**** Bash Reverse String Download Script
#+name:bash-reverse-string-download-script
#+begin_src sh
exercism download --exercise=reverse-string --track=bash
#+end_src

#+RESULTS: bash-reverse-string-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/bash/reverse-string

**** Bash Reverse String Test Script
#+name:bash-reverse-string-test
#+header: :dir bash/reverse-string
#+header: :results output :exports results
#+begin_src sh
bats ./reverse_string_test.sh
#+end_src

#+RESULTS: bash-reverse-string-test
: 1..6
: ok 1 an empty string
: ok 2 a word
: ok 3 a capitalised word
: ok 4 a sentence with punctuation
: ok 5 a palindrome
: ok 6 an even-sized word

**** Bash Reverse String Submit Script
#+name:bash-reverse-string-submit-script
#+begin_src sh
exercism submit bash/reverse-string/reverse_string.sh
#+end_src

#+RESULTS: bash-reverse-string-submit-script
: https://exercism.io/my/solutions/e6b653e726a841f88aade6841e113f94

#+name:bash-reverse-string-exercism-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle bash/reverse-string/.exercism/metadata.json
{
    "track":"bash",
    "exercise":"reverse-string",
    "id":"e6b653e726a841f88aade6841e113f94",
    "url":"https://exercism.io/my/solutions/e6b653e726a841f88aade6841e113f94",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Bash Reverse String README
#+name:bash-reverse-string-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle bash/reverse-string/README.md
# Reverse String

Reverse a string

For example:
input: "cool"
output: "looc"


Run the tests with:

```bash
bats reverse_string_test.sh
```

After the first test(s) pass, continue by commenting out or removing the
`[[ $BATS_RUN_SKIPPED == true ]] || skip` 
annotations prepending other tests.

To run all tests, including the ones with `skip` annotations, run:

```bash
BATS_RUN_SKIPPED=true bats reverse_string_test.sh
```

## Source

Introductory challenge to reverse an input string [https://medium.freecodecamp.org/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb](https://medium.freecodecamp.org/how-to-reverse-a-string-in-javascript-in-3-different-ways-75e4763c68cb)


## External utilities
`Bash` is a language to write "scripts" -- programs that can call
external tools, such as
[`sed`](https://www.gnu.org/software/sed/),
[`awk`](https://www.gnu.org/software/gawk/),
[`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html)
and even programs written in other programming languages, 
like [`Python`](https://www.python.org/).
This track does not restrict the usage of these utilities, and as long
as your solution is portable between systems and does not require
installation of third party applications, feel free to use them to solve
the exercise.

For an extra challenge, if you would like to have a better understanding
of the language, try to re-implement the solution in pure `Bash`,
without using any external tools. Note that there are some types of
problems that bash cannot solve, such as performing floating point
arithmetic and manipulating dates: for those, you must call out to an
external tool.

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others
have completed the exercise.

#+end_src

*** Bash Reverse String Test File
#+name:bash-reverse-string-test-file
#+begin_src sh :tangle bash/reverse-string/reverse_string_test.sh
#!/usr/bin/env bash

@test "an empty string" {
  #[[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash reverse_string.sh ""

  [[ $status -eq 0 ]]
  [[ $output = "" ]]
}

@test "a word" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash reverse_string.sh "robot"

  [[ $status -eq 0 ]]
  [[ $output = "tobor" ]]
}

@test "a capitalised word" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash reverse_string.sh "Ramen"

  [[ $status -eq 0 ]]
  [[ $output = "nemaR" ]]
}

@test "a sentence with punctuation" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash reverse_string.sh "I'm hungry!"

  [[ $status -eq 0 ]]
  [[ $output = "!yrgnuh m'I" ]]
}

@test "a palindrome" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash reverse_string.sh "racecar"

  [[ $status -eq 0 ]]
  [[ $output = "racecar" ]]
}

@test "an even-sized word" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash reverse_string.sh "drawer"

  [[ $status -eq 0 ]]
  [[ $output = "reward" ]]
}


#+end_src

*** Bash Reverse String Code
#+name:bash-reverse-string-code
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle bash/reverse-string/reverse_string.sh
set -o errexit
set -o nounset

reverseStr() {
    str=$1
    newstr=""
    len=${#1}

    for (( i=0 ; i<${len} ; i++ ))
    do
        let j="-i - 1"
        newstr=${newstr}${str:j:1}
    done
    echo ${newstr}
}

reverseStr "$@"
#+end_src
** Bash Raindrops
:PROPERTIES:
:exercise: core
:END:
Convert a number to a string, the contents of which depends on the number's
factors.
*** Bash Raindrops Introduction
Convert a number to a string, the contents of which depend on the number's
factors:

- If the number has 3 as a factor, output 'Pling'.
- If the number has 5 as a factor, output 'Plang'.
- If the number has 7 as a factor, output 'Plong'.
- If the number does not have 3, 5, or 7 as a factor, just pass the number's
  digits straight through.


{{{heading(Examples)}}}

- 28's factors are 1, 2, 4, *7*, 14, 28.
  - In raindrop-speak, this would be a simple "Plong".
- 30's factors are 1, 2, *3*, *5*, 6, 10, 15, 30.
  - In raindrop-speak, this would be a "PlingPlang".
- 34 has four factors: 1, 2, 17, and 34.
  - In raindrop-speak, this would be "34".


{{{heading(Running Tests)}}}

Run the tests with:

: bats raindrops_test.sh

After the first test(s) pass, continue by commenting out or removing the ~skip~
annotations prepending other tests.

*** Bash Raindrops Scripts
**** Bash Raindrops Download Script
#+name:bash-raindrops-download-script
#+begin_src sh
exercism download --exercise=raindrops --track=bash
#+end_src

#+RESULTS: bash-raindrops-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/bash/raindrops

**** Bash Raindrops Run Tests Script
#+name:bash-raindrops-run-tests-script
#+header: :dir bash/raindrops
#+header: :results output :exports results
#+begin_src sh 2>&1
bats raindrops_test.sh
#+end_src

#+RESULTS: bash-raindrops-run-tests-script
#+begin_example
1..18
ok 1 the sound for 1 is 1
ok 2 the sound for 3 is Pling
ok 3 the sound for 5 is Plang
ok 4 the sound for 7 is Plong
ok 5 the sound for 6 is Pling as it has a factor 3
ok 6 2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base
ok 7 the sound for 9 is Pling as it has a factor 3
ok 8 the sound for 10 is Plang as it has a factor 5
ok 9 the sound for 14 is Plong as it has a factor of 7
ok 10 the sound for 15 is PlingPlang as it has factors 3 and 5
ok 11 the sound for 21 is PlingPlong as it has factors 3 and 7
ok 12 the sound for 25 is Plang as it has a factor 5
ok 13 the sound for 27 is Pling as it has a factor 3
ok 14 the sound for 35 is PlangPlong as it has factors 5 and 7
ok 15 the sound for 49 is Plong as it has a factor 7
ok 16 the sound for 52 is 52
ok 17 the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7
ok 18 the sound for 3125 is Plang as it has a factor 5
#+end_example

**** Bash Raindrops Submit Script
#+name:bash-raindrops-submit-script
#+begin_src sh
exercism submit bash/raindrops/raindrops.sh
#+end_src

#+RESULTS: bash-raindrops-submit-script
: https://exercism.io/my/solutions/027afe521f0141c9ba5138ac8b05efd2

#+name:bash-raindrops-exercism-metadata
#+header: :exports none :mkdirp yes
#+begin_src js :tangle bash/raindrops/.exercism/metadata.json
{
    "track":"bash",
    "exercise":"raindrops",
    "id":"027afe521f0141c9ba5138ac8b05efd2",
    "url":"https://exercism.io/my/solutions/027afe521f0141c9ba5138ac8b05efd2",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

*** Bash Raindrops Readme
#+name:bash-raindrops-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle bash/raindrops/README.md
# Raindrops

Convert a number to a string, the contents of which depend on the number's factors.

- If the number has 3 as a factor, output 'Pling'.
- If the number has 5 as a factor, output 'Plang'.
- If the number has 7 as a factor, output 'Plong'.
- If the number does not have 3, 5, or 7 as a factor,
  just pass the number's digits straight through.

## Examples

- 28's factors are 1, 2, 4, **7**, 14, 28.
  - In raindrop-speak, this would be a simple "Plong".
- 30's factors are 1, 2, **3**, **5**, 6, 10, 15, 30.
  - In raindrop-speak, this would be a "PlingPlang".
- 34 has four factors: 1, 2, 17, and 34.
  - In raindrop-speak, this would be "34".


Run the tests with:

```bash
bats raindrops_test.sh
```

After the first test(s) pass, continue by commenting out or removing the
`[[ $BATS_RUN_SKIPPED == true ]] || skip` 
annotations prepending other tests.

To run all tests, including the ones with `skip` annotations, run:

```bash
BATS_RUN_SKIPPED=true bats raindrops_test.sh
```

## Source

A variation on a famous interview question intended to weed out potential candidates. [http://jumpstartlab.com](http://jumpstartlab.com)


## External utilities
`Bash` is a language to write "scripts" -- programs that can call
external tools, such as
[`sed`](https://www.gnu.org/software/sed/),
[`awk`](https://www.gnu.org/software/gawk/),
[`date`](https://www.gnu.org/software/coreutils/manual/html_node/date-invocation.html)
and even programs written in other programming languages, 
like [`Python`](https://www.python.org/).
This track does not restrict the usage of these utilities, and as long
as your solution is portable between systems and does not require
installation of third party applications, feel free to use them to solve
the exercise.

For an extra challenge, if you would like to have a better understanding
of the language, try to re-implement the solution in pure `Bash`,
without using any external tools. Note that there are some types of
problems that bash cannot solve, such as performing floating point
arithmetic and manipulating dates: for those, you must call out to an
external tool.

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others
have completed the exercise.

#+end_src

*** Bash Raindrops Test File
#+name:bash-raindrops-test-file
#+begin_src sh -n :tangle bash/raindrops/raindrops_test.sh
#!/usr/bin/env bash

@test "the sound for 1 is 1" {
  #[[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 1
  [[ $status -eq 0 ]]
  [[ $output == "1" ]]
}

@test "the sound for 3 is Pling" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 3
  [[ $status -eq 0 ]]
  [[ $output == "Pling" ]]
}

@test "the sound for 5 is Plang" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 5
  [[ $status -eq 0 ]]
  [[ $output == "Plang" ]]
}

@test "the sound for 7 is Plong" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 7
  [[ $status -eq 0 ]]
  [[ $output == "Plong" ]]
}

@test "the sound for 6 is Pling as it has a factor 3" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 6
  [[ $status -eq 0 ]]
  [[ $output == "Pling" ]]
}

@test "2 to the power 3 does not make a raindrop sound as 3 is the exponent not the base" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 8
  [[ $status -eq 0 ]]
  [[ $output == "8" ]]
}

@test "the sound for 9 is Pling as it has a factor 3" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 9
  [[ $status -eq 0 ]]
  [[ $output == "Pling" ]]
}

@test "the sound for 10 is Plang as it has a factor 5" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 10
  [[ $status -eq 0 ]]
  [[ $output == "Plang" ]]
}

@test "the sound for 14 is Plong as it has a factor of 7" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 14
  [[ $status -eq 0 ]]
  [[ $output == "Plong" ]]
}

@test "the sound for 15 is PlingPlang as it has factors 3 and 5" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 15
  [[ $status -eq 0 ]]
  [[ $output == "PlingPlang" ]]
}

@test "the sound for 21 is PlingPlong as it has factors 3 and 7" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 21
  [[ $status -eq 0 ]]
  [[ $output == "PlingPlong" ]]
}

@test "the sound for 25 is Plang as it has a factor 5" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 25
  [[ $status -eq 0 ]]
  [[ $output == "Plang" ]]
}

@test "the sound for 27 is Pling as it has a factor 3" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 27
  [[ $status -eq 0 ]]
  [[ $output == "Pling" ]]
}

@test "the sound for 35 is PlangPlong as it has factors 5 and 7" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 35
  [[ $status -eq 0 ]]
  [[ $output == "PlangPlong" ]]
}

@test "the sound for 49 is Plong as it has a factor 7" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 49
  [[ $status -eq 0 ]]
  [[ $output == "Plong" ]]
}

@test "the sound for 52 is 52" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 52
  [[ $status -eq 0 ]]
  [[ $output == "52" ]]
}

@test "the sound for 105 is PlingPlangPlong as it has factors 3, 5 and 7" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 105
  [[ $status -eq 0 ]]
  [[ $output == "PlingPlangPlong" ]]
}

@test "the sound for 3125 is Plang as it has a factor 5" {
  # [[ $BATS_RUN_SKIPPED == true  ]] || skip
  run bash raindrops.sh 3125
  [[ $status -eq 0 ]]
  [[ $output == "Plang" ]]
}


#+end_src

*** Bash Raindrops Solution File
#+name:bash-raindrops-solution-file
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh -n :tangle bash/raindrops/raindrops.sh
set -o errexit
set -o nounset

raindrops() {
    local -i num=$1 div rem

    local -a raindrop
    raindrop[3]="Pling"
    raindrop[5]="Plang"
    raindrop[7]="Plong"

    local raindrops=""

    for div in 3 5 7
    do
        if !(( num % div ))
        then
            raindrops=${raindrops}${raindrop[$div]}
        fi
    done

    if [[ -z ${raindrops} ]]
    then
        raindrops=$num
    fi

    echo "${raindrops}"
}

raindrops "$@"
#+end_src

**** Mentor Discussion
#+attr_texinfo: :author glennj
#+begin_quote
Good job!

I have 2 small, non-showstopping comments.

line 29: you should get into the habit of quoting your variables. Using braces
is not quoting. And even though you know the contents of the variable, it is a
good habit:

: echo "$raindrops"

I find your comparison on lines 17-18 awkward: using the ~rem~ variable's
=integer= attribute to implicitly perform the arithmetic is a bit obscure.  Try
using an arithmetic expression instead:

: if (( ... )); then
#+end_quote
* Emacs Lisp Track
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][Emacs manual]] on the Web
- [[https://www.emacswiki.org][Emacs Wiki]]

Emacs Lisp is the extension language of the Emacs text editor.  You can easily
create you own extensions, which include preference files, but also
full-fledged applications that use Emacs as a running environment in a fully
integrated way.

{{{heading(About Emacs Lisp)}}}

Emacs Lisp is the language at the core of Emacs, the iconic text editor that is
at the beginning of the Free Software movement.  Emacs is made of more than a
million lines of Emacs Lisp, and all the applications that run inside Emacs
(IDEs for various programming languages, games, planners, etc.) are written in
Emacs Lisp.  User preferences are also lists of Emacs Lisp expressions.

Knowing Emacs Lisp is the first step into Lisp, the second oldest programming
language still used (just turned 60 in 2018) and also a language that still
influences so many other programming languages.

** About Emacs Lisp for Exercism
*** Running the Tests
Elisp tests are run using ~ERT~, an Emacs Lisp library for regression/unit
testing.  Tests can be run several ways:

1. Interactively and individually, with ~M-x ert RET test-name RET~
2. Interactively and all at once, with ~M-x ert RET t RET~
3. From the terminal, in batch mode, with
   : emacs -batch -l ert -l my-test.el -f ert-run-tests-batch-and-exit
4. Other options can be found in the docs, ~C-h i m ert RET~


Interactive testing is great while you're working on an exercise, but batch
mode testing is preferable for when you want to check that an exercise is ready
for submission.  The above command is a bit unwieldy, so if you like:

1. Create a file on your ~$PATH~ called ~ert-run~
2. The contents of the file should be as follows:
   #+begin_src emacs-lisp
   #!/usr/bin/env bash
   emacs -batch -l ert -l $1 -f ert-run-tests-batch-and-exit
   #+end_src
3. Make the file executable with ~chmod +x ert-run~


You should be able to simply call ~ert-run exercise-test.el~ and run the tests
in batch mode.

*** Working on Exercises
Since Emacs is, itself, an elisp interpreter, your working code is always in
its native execution environment.  You can evaluate any form by pressing ~C-x
e~ at the end of the form, or a selection with ~M-x eval-region~ or the whole
buffer with ~M-x eval-buffer~.  This can be extremely useful for quickly
debugging your code.

*** Suggestions on Developing Code
Since both your code and tests are valid elisp, it is suggested to work with
your exercise code in a buffer pane side-by side with its test, like so:

Split the frame vertically with ~C-x 3~, switch to the new window with ~C-x o~,
and open the file with ~C-x C-f /path/to/file~.

** Emacs Lisp Hello World
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** Emacs Lisp Hello World Readme
#+name:elisp-hello-world-readme
#+begin_src markdown :tangle elisp/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.
## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src
*** Emacs Lisp Hello World Scripts

**** Emacs Lisp Hello World Download
#+name:elisp-hello-world-download
#+begin_src sh :results output
exercism download --exercise=hello-world --track=elisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Languages/Exercism/elisp/hello-world

**** Emacs Lisp Hello World Submit
#+name:elisp-hello-world-submit
#+begin_src sh :results output
exercism submit elisp/hello-world/hello-world.el
#+end_src

#+RESULTS: elisp-hello-world-submit
:     https://exercism.io/my/solutions/894f5e31a6fd4db3a967b6a19580a171

#+name:elisp-hello-world-exercism-metadata
#+begin_src js :tangle elisp/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"elisp",
    "exercise":"hello-world",
    "id":"894f5e31a6fd4db3a967b6a19580a171",
    "url":"https://exercism.io/my/solutions/894f5e31a6fd4db3a967b6a19580a171",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+end_src

*** Emacs Lisp Hello World Code
#+name:elisp-hello-world-code
#+begin_src emacs-lisp :tangle elisp/hello-world/hello-world.el :mkdirp yes
  ;;; hello-world.el --- Hello World Exercise (exercism)

  ;;; Commentary:

  ;;; Code:
  (defun hello ()
    (print "Hello, World!"))

  (provide 'hello-world)
  ;;; hello-world.el ends here
#+end_src

{{{heading(Test the Code)}}}

#+name:elisp-hello-world-test-code
#+begin_src sh :dir elisp/hello-world :results output :exports both
emacs -batch -l ert -l hello-world-test.el -f ert-run-tests-batch-and-exit
#+end_src

#+RESULTS: elisp-hello-world-test-code
: 
: "Hello, World!"

*** Emacs Lisp Hello World Test
#+name:elisp-hello-world-test
#+begin_src emacs-lisp :tangle elisp/hello-world/hello-world-test.el :mkdirp yes
;;; hello-world-test.el --- Tests for Hello World (exercism)

;;; Commentary:
;; Common test data version: 1.1.0 be3ae66

;;; Code:

(load-file "hello-world.el")

(ert-deftest hello-world-test ()
  (should (equal (hello) "Hello, World!")))

(provide 'hello-world-test)

;;; hello-world-test.el ends here
#+end_src

** Emacs Lisp Two Fer
Two-fer or 2-fer is short for two for one. One for you and one for me.

: "One for X, one for me."

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

*** Emacs Lisp Two Fer Readme
#+name:elisp-two-fer-readme
#+begin_src markdown :tangle elisp/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

```text
"One for X, one for me."
```

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

## Source

[https://en.wikipedia.org/wiki/Two-fer](https://en.wikipedia.org/wiki/Two-fer)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Emacs Lisp Two Fer Scripts

**** Emacs Lisp Two Fer Download
#+name:elisp-two-fer-download
#+begin_src sh :results output
exercism download --exercise=two-fer --track=elisp
#+end_src

#+RESULTS: elisp-two-fer-download
: /Users/pine/Dev/Programming/Languages/Exercism/elisp/two-fer

**** Emacs Lisp Two Fer Submit
#+name:elisp-two-fer-submit
#+begin_src sh :result output
exercism submit elisp/two-fer/two-fer.el
#+end_src

#+RESULTS: elisp-two-fer-submit
: https://exercism.io/my/solutions/65d4cc560fef45a695f56a2a1609b9e1

*** Emacs Lisp Two Fer Code
**** Emacs Lisp Two Fer Solution
#+name:elisp-two-fer-solution
#+begin_src emacs-lisp :tangle elisp/two-fer/two-fer.el :mkdirp yes
;;; two-fer.el --- Two-fer Exercise (exercism)

;;; Commentary: Two-fer or 2-fer is short for two for one. One for you
;;; and one for me.<

;;; Code:
(defun two-fer (&optional name)
  "Prints a two-fer message, possibly using 'you' if argument is missing."
  (format "One for %s, one for me." (or name "you")))

(provide 'two-fer)
;;; two-fer.el ends here
#+end_src

#+name:elisp-two-fer-run-tests
#+begin_src sh :dir elisp/two-fer :results output :exports both
emacs -batch -l ert -l two-fer-test.el -f ert-run-tests-batch-and-exit 2>&1
#+end_src

#+name:elisp-two-fer-exercism-metadata
#+begin_src js :tangle elisp/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"elisp",
    "exercise":"two-fer",
    "id":"65d4cc560fef45a695f56a2a1609b9e1",
    "url":"https://exercism.io/my/solutions/65d4cc560fef45a695f56a2a1609b9e1",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Emacs Lisp Two Fer Tests
#+name:elisp-two-fer-tests
#+begin_src emacs-lisp :tangle elisp/two-fer/two-fer-test.el :mkdirp yes
;;; two-fer-test.el --- Tests for Two-fer (exercism)

;;; Commentary:
;; Common test data version: 1.2.0 4fc1acb

;;; Code:

(load-file "two-fer.el")

(ert-deftest no-name-given ()
  (should (equal (two-fer) "One for you, one for me.")))

(ert-deftest a-name-given ()
  (should (equal (two-fer "Alice") "One for Alice, one for me.")))

(ert-deftest another-name-given ()
  (should (equal (two-fer "Bob") "One for Bob, one for me.")))

(provide 'two-fer-test)

;;; two-fer-test.el ends here

#+end_src

** Emacs Lisp Bob
Bob is a lackadaisical teenager.  In conversation, his responses are very
limited.

Bob answers 'Sure.' if you ask him any question, such as "How are you?".

He answers 'Whoa, chill out!' if you YELL AT HIM (in all capitals).

He answers 'Calm down, I know what I'm doing!' if you yell a question at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Implement a function response-for that takes a string as argument and returns
the appropriate response.

*** Emacs Lisp Bob Readme
#+name:elisp-bob-readme
#+begin_src markdown :tangle elisp/bob/README.md :mkdirp yes
# Bob

Bob is a lackadaisical teenager. In conversation, his responses are
very limited.

Bob answers 'Sure.' if you ask him any question, such as "How are
you?".

He answers 'Whoa, chill out!' if you YELL AT HIM (in all capitals).

He answers 'Calm down, I know what I'm doing!' if you yell a question
at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Implement a function `response-for` that takes a string as argument
and returns the appropriate response.

## Source

Inspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to
Program tutorial. [http://pine.fm/LearnToProgram/?Chapter=06](http://pine.fm/LearnToProgram/?Chapter=06)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how
others have completed the exercise.
#+end_src

*** Emacs Lisp Bob Scripts
**** Emacs Lisp Bob Download Script
#+name:elisp-bob-download-script
#+begin_src sh
exercism download --exercise=bob --track=elisp
#+end_src

#+RESULTS: elisp-bob-download-script
: /Users/pine/Dev/Programming/Languages/Exercism/elisp/bob

**** Emacs Lisp Bob Submit Script
#+name:elisp-bob-submit-script
#+begin_src sh
exercism submit elisp/bob/bob.el
#+end_src

#+RESULTS: elisp-bob-submit-script
: https://exercism.io/my/solutions/938923eec9a843fb88ce497bc1998bca

*** Emacs Lisp Bop Source and Tests
**** Emacs Lisp Bob Source
Two things to note:

   #+cindex:@code{case-fold-search}
1. Eliminate global state change by localizing variable ~case-fold-search~
   being set to ~nil~.

   #+cindex:@code{string-match}
   #+cindex:@code{string-match-p}
   #+cindex:@code{match-data}
   #+cindex:@code{save-match-data}
2. Eliminate global state change of ~match-data~ by using ~string-match-p~ in
   this case since ~match-data~ is not being used.  If ~match-data~ were being
   used, then consider using the function ~save-match-data~.

#+name:elisp-bob-source
#+begin_src emacs-lisp :tangle elisp/bob/bob.el :mkdirp yes
  ;;; bob.el --- Bob exercise (exercism)

  ;;; Commentary:Function to elicit correct response for Bob given some
  ;;; statement or question.

  ;;; Code:
  (defun response-for (response)
    "Evaluate input statement to determinte Bob's correct response."
    (let ((case-fold-search nil))
      (cond ((string-match-p "^[[:upper:]\s]+\\?$" response) "Calm down, I know what I'm doing!")
            ((string-match-p "\\`[^\n]+\\?\s*\\'" response) "Sure.")
            ((string-match-p "\\`[[:space:]]*\\'" response) "Fine. Be that way!")
            ((string-match-p ".[[:upper:]].*!$\\|\\`[^[:lower:][:digit:]]+\\'" response) "Whoa, chill out!")
            (t "Whatever."))))

  (provide 'bob)
  ;;; bob.el ends here
#+end_src

{{{heading(Test Results)}}}

#+name:elisp-bob-run-tests
#+begin_src sh :dir elisp/bob :results output :exports both
emacs -batch -l ert -l bob-test.el -f ert-run-tests-batch-and-exit 2> output.log
cat output.log
#+end_src

#+name:elisp-bob-exercism-metadata.js
#+begin_src js :tangle elisp/bob/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"elisp",
    "exercise":"bob",
    "id":"938923eec9a843fb88ce497bc1998bca",
    "url":"https://exercism.io/my/solutions/938923eec9a843fb88ce497bc1998bca",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Emacs Lisp Bob Tests
#+name:elisp-bob-tests
#+begin_src emacs-lisp :tangle elisp/bob/bob-test.el
;;; bob-test.el --- ERT tests for Bob (exercism)

;;; Commentary:
;; Common test data version: 1.2.0 6dc2014

;;; Code:

(load-file "bob.el")


(ert-deftest responds-to-stating-something ()
  (should (string= "Whatever." (response-for "Tom-ay-to, tom-aaaah-to."))))

(ert-deftest responds-to-shouting ()
  (should
   (string= "Whoa, chill out!" (response-for "WATCH OUT!"))))

(ert-deftest responds-to-shouting-gibberish ()
  (should
   (string= "Whoa, chill out!" (response-for "FCECDFCAAB"))))

(ert-deftest responds-to-asking-a-question ()
  (should
   (string= "Sure." (response-for "Does this cryogenic chamber make me look fat?"))))

(ert-deftest responds-to-asking-a-numeric-question ()
  (should
   (string= "Sure." (response-for "You are, what, like 15?"))))

(ert-deftest responds-to-asking-gibberish ()
  (should
   (string= "Sure." (response-for "fffbbcbeab?"))))

(ert-deftest responds-to-talking-forcefully ()
  (should
   (string= "Whatever." (response-for "Let's go make out behind the gym!"))))

(ert-deftest responds-to-using-acronyms-in-regular-speech ()
  (should
   (string= "Whatever." (response-for "It's OK if you don't want to go to the DMV."))))

(ert-deftest responds-to-forceful-question ()
  (should
   (string= "Calm down, I know what I'm doing!" (response-for "WHAT THE HELL WERE YOU THINKING?"))))

(ert-deftest responds-to-shouting-numbers ()
  (should
   (string= "Whoa, chill out!" (response-for "1, 2, 3, GO!"))))

(ert-deftest responds-to-only-numbers ()
  (should
   (string= "Whatever." (response-for "1, 2, 3"))))

(ert-deftest responds-to-questions-with-only-numbers ()
  (should
   (string= "Sure." (response-for "4?"))))

(ert-deftest responds-to-shouting-with-special-chars ()
  (should
   (string= "Whoa, chill out!" (response-for "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"))))

(ert-deftest responds-to-shouting-with-no-exclamation-mark ()
  (should
   (string= "Whoa, chill out!" (response-for "I HATE YOU"))))

(ert-deftest responds-to-statement-containing-question-mark ()
  (should
   (string= "Whatever." (response-for "Ending with ? means a question."))))

(ert-deftest responds-to-non-letters-with-question ()
  (should
   (string= "Sure." (response-for ":) ?"))))

(ert-deftest responds-to-prattling-on ()
  (should
   (string= "Sure." (response-for "Wait! Hang on. Are you going to be OK?"))))

(ert-deftest responds-to-silence ()
  (should
   (string= "Fine. Be that way!" (response-for ""))))

(ert-deftest responds-to-prolonged-silence ()
  (should
   (string= "Fine. Be that way!" (response-for "    "))))

(ert-deftest responds-to-alternate-silence ()
  (should
   (string= "Fine. Be that way!" (response-for "\t\t\t\t\t\t\t\t\t\t"))))

(ert-deftest responds-to-multiple-line-question ()
  (should
   (string= "Whatever." (response-for "\nDoes this cryogenic chamber make me look fat?\nno"))))

(ert-deftest responds-to-starting-with-whitespace ()
  (should
   (string= "Whatever." (response-for "         hmmmmmmm..."))))

(ert-deftest responds-to-ending-with-whitespace ()
  (should
   (string= "Sure." (response-for "Okay if like my  spacebar  quite a bit?   "))))

(ert-deftest responds-to-other-whitespace ()
  (should
   (string= "Fine. Be that way!" (response-for "\n\r \t"))))

(ert-deftest responds-to-non-question-ending-with-whitespace ()
  (should
   (string= "Whatever." (response-for "This is a statement ending with whitespace      "))))

(provide 'bob-test)
;;;bob-test.el ends here

#+end_src

** Emacs Lisp Hamming
*** Emacs Lisp Hamming Introduction
#+cindex:hamming difference
Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or copying of a
nucleic acid, in particular DNA.  Because nucleic acids are vital to cellular
functions, mutations tend to cause a ripple effect throughout the cell.
Although mutations are technically mistakes, a very rare mutation may equip the
cell with a beneficial attribute.  In fact, the macro effects of evolution are
attributable by the accumulated result of beneficial microscopic mutations over
many generations.

The simplest and most common type of nucleic acid mutation is a point mutation,
which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands taken
from different genomes with a common ancestor, we get a measure of the minimum
number of point mutations that could have occurred on the evolutionary path
between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

#+begin_example
GAGCCTACTAACGGGAT
CATCGTAATGACGGCCT
^ ^ ^  ^ ^    ^^
#+end_example

The Hamming distance between these two DNA strands is 7.

*** Emacs Lisp Hamming Implementation Notes
The Hamming distance is only defined for sequences of equal length.  This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

{{{heading(Source)}}}

The Calculating Point Mutations problem at [[http://rosalind.info/problems/hamm/][Rosalind]].

*** Emacs Lisp Hamming Scripts
**** Emacs Lisp Hamming Download Script
#+name:elisp-hamming-download-script
#+begin_src sh
exercism download --exercise=hamming --track=elisp
#+end_src

#+RESULTS: elisp-hamming-download-script
: /usr/local/dev/programming/Languages/Exercism/elisp/hamming

**** Emacs Lisp Hamming Submit Script
#+name:elisp-hamming-submit-script
#+begin_src sh
exercism submit elisp/hamming/hamming.el
#+end_src

#+RESULTS: elisp-hamming-submit-script
: https://exercism.io/my/solutions/fed4aef682fe4010a9d5455d9c76bc22

*** Emacs Lisp Hamming Readme
#+name:elisp-hamming-readme
#+begin_src markdown :tangle elisp/hamming/README.md :mkdirp yes
# Hamming

Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'.

It is found by comparing two DNA strands and counting how many of the
nucleotides are different from their equivalent in the other string.

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

# Implementation notes

The Hamming distance is only defined for sequences of equal length. This means
that based on the definition, each language could deal with getting sequences
of equal length differently.

## Source

The Calculating Point Mutations problem at Rosalind [http://rosalind.info/problems/hamm/](http://rosalind.info/problems/hamm/)

## Submitting Incomplete Solutions

It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Emacs Lisp Hamming Source and Tests Code
**** Emacs Lisp Hamming Solution Code
Note that in order for "ert" to work with the ~seq-count~ and ~seq-mapn~
functions, the ~seq~ library must be loaded first.

#+name:elisp-hamming-hamming.el
#+begin_src emacs-lisp :tangle elisp/hamming/hamming.el :mkdirp yes
  ;;; hamming.el --- Hamming (exercism)

  ;;; Commentary:

  ;;; Code:

(require 'seq)

(defun calc-hamming (str1 str2)
  "Functionally calculate the hamming distance between STR1 and STR2."
  (- (length str1)
     (seq-count #'identity (seq-mapn #'char-equal str1 str2))))

(defun hamming-distance (str1 str2)
  "Calculate the hamming distance between two strings, STR1 and STR2."
  (if (equal (length str1) (length str2))
      (calc-hamming str1 str2)
    (error "Strings of unequal length")))

(provide 'hamming)
  ;;; hamming ends here
#+end_src

#+name:elisp-hamming-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle elisp/hamming/.exercism/metadata.json
  {
      "track":"elisp",
      "exercise":"hamming",
      "id":"fed4aef682fe4010a9d5455d9c76bc22",
      "url":"https://exercism.io/my/solutions/fed4aef682fe4010a9d5455d9c76bc22",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

***** Mentor Comment
Can you try to implement calc-hamming with seq-mapn and seq-count?

Example uses of them:

#+begin_src emacs-lisp
(seq-mapn #'= "123" "321")
;; => (nil t nil)

(seq-count #'identity '(nil t nil t nil))
;; => 2
#+end_src

***** Review of ~seq-mapn~
#+cindex:@code{seq-mapn}
~seq-mapn~ FUNCTION &rest SEQUENCES

This function returns the result of applying FUNCTION to each element of
SEQUENCES.  The arity of FUNCTION must match the number of sequences.  Mapping
stops at the end of the shortest sequence, and the returned value is a list.

***** Review of ~seq-count~
#+cindex:@code{seq-count}
~seq-count~ PREDICATE SEQUENCE

This function returns the number of elements in SEQUENCE for which PREDICATE
returns non-‘nil’.

***** Review of ~identity~
#+cindex:@code{identity}
~identity~ ARG

This function returns ARG and has no side effects.

**** Emacs Lisp Test Code
#+name:elisp-hamming-test-code
#+begin_src emacs-lisp :tangle elisp/hamming/hamming-test.el
;;; hamming-test.el --- Tests for hamming (exercism)

;;; Commentary:
;; Common test data version: 2.0.1 f79dfd7

;;; Code:

(load-file "hamming.el")

(declare-function hamming-distance "hamming.el")

(ert-deftest empty-strands ()
  (should (= 0 (hamming-distance "" ""))))

(ert-deftest identical-strands ()
  (should (= 0 (hamming-distance "A" "A"))))

(ert-deftest long-identical-strands ()
  (should (= 0 (hamming-distance "GGACTGA" "GGACTGA"))))

(ert-deftest complete-distance-in-single-nucleotide-strands ()
  (should (= 1 (hamming-distance "A" "G"))))

(ert-deftest complete-distance-in-small-strands ()
  (should (= 2 (hamming-distance "AG" "CT"))))

(ert-deftest small-distance-in-small-strands ()
  (should (= 1 (hamming-distance "AT" "CT"))))

(ert-deftest small-distance ()
  (should (= 1 (hamming-distance "GGACG" "GGTCG"))))

(ert-deftest small-distance-in-long-strands ()
  (should (= 2 (hamming-distance "ACCAGGG" "ACTATGG"))))

(ert-deftest non-unique-character-in-first-strand ()
  (should (= 1 (hamming-distance "AAA" "AAG"))))

(ert-deftest same-nucleotides-in-different-positions ()
  (should (= 2 (hamming-distance "TAG" "GAT"))))

(ert-deftest large-distance ()
  (should (= 4 (hamming-distance "GATACA" "GCATAA"))))

(ert-deftest large-distance-in-off-by-one-strand ()
  (should (= 9 (hamming-distance "GGACGGATTCTG" "AGGACGGATTCT"))))

(ert-deftest disallow-first-strand-longer ()
  (should-error (hamming-distance "AATG" "AAA")))

(ert-deftest disallow-second-strand-longer ()
  (should-error (hamming-distance "ATA" "AGTG")))

(provide 'hamming-test)
;;; hamming-test.el ends here

#+end_src

**** Emacs Lisp Hamming Run Tests
#+name:elisp-hamming-run-tests
#+header: :shebang "#!/usr/bin/env bash" :dir elisp/hamming
#+header: :results output :exports results
#+begin_src sh :tangle elisp/hamming/hamming-test.sh
emacs -batch -l ert -l hamming-test.el -f ert-run-tests-batch-and-exit
#+end_src

#+RESULTS: elisp-hamming-run-tests

** Emacs Lisp Difference of Squares
:PROPERTIES:
:exercise: side
:END:
*** Emacs Lisp Difference of Squares Introduction
Find the difference between the square of the sum and the sum of the squares of
the first N natural numbers.

The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)² =
55² = 3025.

The sum of the squares of the first ten natural numbers is 1² + 2² + ... + 10²
= 385.

Hence the difference between the square of the sum of the first ten natural
numbers and the sum of the squares of the first ten natural numbers is 3025 -
385 = 2640.

*** Emacs Lisp Difference of Squares Scripts
**** Emacs Lisp Difference of Squares Download Script
#+name:elisp-difference-of-squares-download-scripts
#+begin_src sh
exercism download --exercise=difference-of-squares --track=elisp
#+end_src

**** Emacs Lisp Difference of Squares Run Tests
#+name:elisp-difference-of-squares-run-tests
#+header: :shebang "#!/usr/bin/env bash"
#+header: :dir elisp/difference-of-squares
#+header: :results output :exports results
#+begin_src sh :tangle elisp/difference-of-squares/run-tests.sh
emacs -batch -l ert -l difference-of-squares-test.el -f ert-run-tests-batch-and-exit 2>&1
#+end_src

#+RESULTS: elisp-difference-of-squares-run-tests
#+begin_example
Loading /Users/pine/Dev/Programming/Languages/Exercism/elisp/difference-of-squares/difference-of-squares.el (source)...
Running 9 tests (2019-07-26 22:58:58-0700)
   passed  1/9  difference-of-squares-to-10
   passed  2/9  difference-of-squares-to-100
   passed  3/9  difference-of-squares-to-5
   passed  4/9  square-of-sum-to-10
   passed  5/9  square-of-sum-to-100
   passed  6/9  square-of-sum-to-5
   passed  7/9  sum-of-squares-to-10
   passed  8/9  sum-of-squares-to-100
   passed  9/9  sum-of-squares-to-5

Ran 9 tests, 9 results as expected (2019-07-26 22:58:58-0700)

#+end_example

#+name:elisp-difference-of-squares-exercism-metadata
#+header: :mkdirp yes :exports none
#+begin_src js :tangle elisp/difference-of-squares/.exercism/metadata.json
{
    "track":"elisp",
    "exercise":"difference-of-squares",
    "id":"e9094dee41a2499ca0c560985f8b8fd4",
    "url":"https://exercism.io/my/solutions/e9094dee41a2499ca0c560985f8b8fd4",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+end_src

**** Emacs Lisp Difference of Squares Submit Script
#+name:elisp-difference-of-squares-submit-script
#+begin_src sh
exercism submit elisp/difference-of-squares/difference-of-squares.el
#+end_src

#+RESULTS: elisp-difference-of-squares-submit-script
: https://exercism.io/my/solutions/e9094dee41a2499ca0c560985f8b8fd4

*** Emacs Lisp Difference of Squares Readme
#+name:elisp-difference-of-squares-readme
#+header: :mkdirp yes
#+begin_src markdown :tangle elisp/difference-of-squares/README.md
# Difference Of Squares

Find the difference between the square of the sum and the sum of the squares of the first N natural numbers.

The square of the sum of the first ten natural numbers is
(1 + 2 + ... + 10)² = 55² = 3025.

The sum of the squares of the first ten natural numbers is
1² + 2² + ... + 10² = 385.

Hence the difference between the square of the sum of the first
ten natural numbers and the sum of the squares of the first ten
natural numbers is 3025 - 385 = 2640.
## Source

Problem 6 at Project Euler [http://projecteuler.net/problem=6](http://projecteuler.net/problem=6)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Emacs Lisp Difference of Squares Tests
#+begin_src emacs-lisp :tangle elisp/difference-of-squares/difference-of-squares-test.el
;;; difference-of-squares-test.el --- Tests for difference-of-squares (exercism)

;;; Commentary:

;;; Code:

(load-file "difference-of-squares.el")

(ert-deftest square-of-sum-to-5 ()
  (should (= 225 (square-of-sum 5))))

(ert-deftest sum-of-squares-to-5 ()
  (should (= 55 (sum-of-squares 5))))

(ert-deftest difference-of-squares-to-5 ()
  (should (= 170 (difference 5))))


(ert-deftest square-of-sum-to-10 ()
  (should (= 3025 (square-of-sum 10))))

(ert-deftest sum-of-squares-to-10 ()
  (should (= 385 (sum-of-squares 10))))

(ert-deftest difference-of-squares-to-10 ()
  (should (= 2640 (difference 10))))


(ert-deftest square-of-sum-to-100 ()
  (should (= 25502500 (square-of-sum 100))))

(ert-deftest sum-of-squares-to-100 ()
  (should (= 338350 (sum-of-squares 100))))

(ert-deftest difference-of-squares-to-100 ()
  (should (= 25164150 (difference 100))))


(provide 'difference-of-squares-test)
;;; difference-of-squares-test.el ends here

#+end_src

*** Emacs Lisp Difference of Squares Solution
#+name:elisp-difference-of-squares-solution
#+begin_src elisp -n :tangle elisp/difference-of-squares/difference-of-squares.el
;;; difference-of-squares.el --- Difference of Squares (exercism)
(defun square-of-sum (n)
;;; Commentary:
  "Find the square of the sums of the first N natural numbers."
;;; Code:
  (expt (sum n) 2))

(defun sum-of-squares (n)
  "Find the sum of the squares of the first N natural numbers."
  (if (zerop n)
      0
    (+ (* n n) (sum-of-squares (1- n)))))

(defun sum (n)
  "Find the sum of the first N natural numbers."
  (if (zerop n)
      0
    (+ n (sum (1- n)))))

(defun difference (n)
  "Find the difference between the square of the sum and the sum of the squares."
  (- (square-of-sum n) (sum-of-squares n)))

(provide 'difference-of-squares)
;;; difference-of-squares.el ends here
#+end_src

* Common Lisp Track
:PROPERTIES:
:mentors:  5
:students: 1916
:exercises: 43
:as-of:    2020-10-19
:joined:   2020-10-19
:END:
{{{heading(About Common lisp)}}}

[[file:/usr/local/dev/Languages/Exercism/resources/png/common-lisp.png]]

Common  Lisp is  an offshoot  of the  long-running family  of Lisp  programming
languages. It's a multi-paradigm programming language that allows you to choose
the approach and paradigm according to your application domain.

Common  Lisp has  fast prototyping  capabilities, and  exceptional support  for
object oriented programming. It also boasts  a macro system which allows you to
adapt  the language  to your  needs, and  a run-time  environment which  allows
modification of running applications.

To learn more about Common Lisp, take a look at [[https://common-lisp.net/][the Common Lisp Homepage]].
** Common Lisp on Exercism
*** Installing Common Lisp
{{{heading(What's Needed)}}}

The basic items needed for developing in Common Lisp are:

- A Lisp "Implementation", which will allow you to compile and execute code, as
  well as supply a REPL.

- A text editor with facilities for Lisp code.

- The often-used reference for the Common Lisp language, the [[https://exercism.io/tracks/common-lisp/installation]["Common Lisp
  Hyperspec]]"


{{{heading(Fast Start)}}}

Newbies to CL,  particularly ones with previous experience with  Emacs, can get
an  easy  & quick  start  by  installing  Portacle,  the Portable  Common  Lisp
Environment. Free and full featured, it works in all common platforms and comes
pre-configured "out of the box". This will supply:

- A Lisp implementation: SBCL, including Quicklisp and ASDF.
- A Text editor: Emacs ... with lots of add-ons for writing with Lisp code:
- SLIME, the  "Superior Lisp  Interaction Mode  for Emacs"  turns Emacs  into a
  Common Lisp IDE
- ParEdit, which makes working with parentheses easy.


Everything  comes  already configured  out  of  the  box. Install  Portacle  by
downloading from the [[https://portacle.github.io/][front page]].


{{{heading(Traditional Start)}}}

If  you  prefer  installing  components  separately,  besides  installing  your
favorite editor for Lisp code, these would be the steps:

1. Install a lisp implementation such as:
   - [[http://www.sbcl.org/][SBCL]] or
   - [[http://clisp.org/][CLisp]].

   Both can be installed via Homebrew on Mac OS X.

2. Install [[http://www.quicklisp.org/beta/#installation][QuickLisp]] for Lisp library management:
   - Download it using ~curl~:
     : curl -O https://beta.quicklisp.org/quicklisp.lisp

   - Now  launch  lisp, and  copy-paste  the  following expressions  to  finish
     QuickLisp installation:

   #+begin_example
   > (load "quicklisp.lisp")         ;; this will load the downloaded lisp file
   > (quicklisp-quickstart:install)  ;; this will install quicklisp
   > (ql:add-to-init-file)           ;; this will add quicklisp setup to your init file (recommended)
#+end_example

3. Load QuickLisp
   See  the  documentation   of  your  lisp  implementation  on   how  to  load
   ~quicklisp.lisp~ into lisp.

   - [[https://www.quicklisp.org/beta/#loading][QuickLisp documentation]]
   - To  load  Quicklisp  into  your  Common Lisp  session  after  the  initial
     installation, load  the file  ~quicklisp/setup.lisp~ with the  Common Lisp
     ~load~ function.
     : (load "~/quicklisp/setup.lisp")
     The path must be adjusted if Quicklisp is loaded in a different location.
   - The function ~ql:add-to-init-file~  will add code to do this  to your init
     file  automatically, so  Quicklisp  will load  whenever  your Common  Lisp
     session starts.

4. Load Software
   To load software, use:
   : (ql:quickload system-name)
   Quicklisp will  automatically download any  supporting software it  needs to
   load the system.

   To find out what's available in Quicklisp, use:
   : (ql:system-apropos substring)

5. Install SLIME
   To install and configure SLIME, use:
   : (ql:quickload "quicklisp-slime-helper")
   Then follow the directions it displays. ~quicklisp-slime-helper~ will create
   a file you can load in Emacs that configures the right load-path for loading
   Quicklisp's installation of SLIME.

6. Update Software
   : (ql:update-dist "quicklisp")

*** Running the Tests
- https://exercism.io/tracks/common-lisp/tests


Start up  your Lisp  implementation in  the directory of  the exercise  you are
working  on (or  change  the  current directory  for  an  already running  Lisp
implementation to that directory).

Load the  test file into your  running Lisp implementation, for  example,
: (load "point-mutations-test").
This will run the  tests the first time automatically.  After  that you can run
the test suite in the REPL with
: (lisp-unit:run-tests :all :point-mutations-test).

**** Making your first Common Lisp solution

To create lisp  code that can be  loaded with ~(load "hamming")~  for the first
exercise, put this code in ~hamming.lisp~:

#+begin_src lisp
(defpackage #:hamming
  (:use #:cl)
  (:export #:distance))

(in-package #:hamming)

(defun distance (dna1 dna2)
  "Number of positional differences in two equal length dna strands."
  ;;; your solution here
  )
#+end_src

**** How to run the tests
If you have a  running Lisp implementation you can load the  test file with the
command: ~(load "hamming-tests")~.

If instead you'd  like to do it from  the command line the command  you need to
run depends upon the implementation. Please refer to the documentation for your
implementation.  Here  we'll give  examples  of  how to  do  it  in two  common
implementations: =Clisp= and =SBCL=.

It  is  important  to  make  sure  that the  command  you  run  will  load  the
implementation's ~init~ file, which is  needed to ensure ~QuickLisp~ is loaded,
then loads the test file, then exits back the command line.

{{{heading(Clisp)}}}

Either of the following commands will work:
#+begin_src lisp
clisp -i ~/.clisprc.lisp hamming-test.lisp
clisp -i hamming-test.lisp -x '(ext:exit)'
#+end_src

{{{heading(SBCL)}}}
: sbcl --load hamming-test.lisp --quit

*** Learning and Using Common Lisp
Exercism provides exercises and feedback but  can be difficult to jump into for
those learning Common Lisp for the first time. These resources can help you get
started:

- [[http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/][A Road to Common  Lisp]] :: a blog post explaining one  person's road to Common
  Lisp and their opinions on how to get started with it.

- [[http://www.gigamonkeys.com/book/][Practical Common Lisp]] :: a complete  book for learning Common Lisp, available
  free online

- [[http://cliki.net/Getting%20Started][Cliki.net Getting Start Started Page]] :: by various contributors

- [[https://en.wikibooks.org/wiki/Common_Lisp/First_steps][Common Lisp First Steps]] ::  by various contributors

- [[http://learnxinyminutes.com/docs/common-lisp/][Learn X in Y minutes: where X = Common Lisp]] :: by Paul Nathan

- [[http://www.cs.northwestern.edu/academics/courses/325/readings/readings.php][Northwestern University EECS 325 Readings]] :: by Chris Riesbeck


There are many more excellent resources, most of them crosslinked in one of the
learning section.

{{{heading(Important Resources)}}}

- [[http://www.lispworks.com/documentation/common-lisp.html][The Common Lisp HyperSpec]] :: by X3J13 committee. The Common Lisp Standard

- [[http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html][Common Lisp the Language, 2nd Edition]] :: by Guy Steele

- [[http://cdr.eurolisp.org/][Common  Lisp Document  Repository]] ::  a collection  of emergent  and de-facto
  standards

- [[http://common-lisp.net/][Common-Lisp.net]] :: project hosting and gateway

- [[http://www.cliki.net/][The Common Lisp Wiki]] :: Wiki


{{{heading(Free Books)}}}

There are  many other great  books you  can find links  to. These are  the most
popularly linked introductory works.

- [[http://www.gigamonkeys.com/book/][Practical Common Lisp]] :: by Peter Seibel

- [[http://www-cgi.cs.cmu.edu/afs/cs.cmu.edu/user/dst/www/LispBook/index.html][Common Lisp: A Gentle Introduction to Symbolic Computation]] :: by
  David S. Touretzky

- [[http://www.cse.buffalo.edu/~shapiro/Commonlisp/][Common Lisp: An Interactive Approach]] :: by Stuart C. Shapiro

- [[http://successful-lisp.blogspot.com/][Successful Lisp: How to Understand and Use Common Lisp]] :: by David B. Lamkins


Following these are two more advanced  books, but beginners shouldn't be afraid
of them, they're quite accessible and "classics".

- [[http://www.paulgraham.com/onlisptext.html][On Lisp]] :: by Paul Graham

- [[http://mitpress.mit.edu/sicp/][Structure and Interpretation of Computer Programs]] :: by Abelson, Sussman, and
  Sussman


{{{heading(Quck Reference)}}}

- [[http://lispcookbook.github.io/cl-cookbook/][The Common Lisp  Cookbook]] :: by various contributors, includes  quick help on
  often used commands or features.

- [[http://clqr.boundp.org/][Common Lisp Quick Reference]] :: is a print-it-yourself booklet for having a
  quick reference handy.

- [[http://jtra.cz/stuff/lisp/sclr/index.html][Simplified  Common Lisp  Reference]]  :: gives  a quick  glance  at often  used
  commands, ideal for newcomers.
** Common Lisp Hello World
{{{heading(Introduction)}}}

The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

{{{subheading(Setup)}}}

Check out [[https://exercism.io/tracks/common-lisp/installation][Installing Common Lisp]] for instructions to get started or take a look
at the guides available in the track's side bar.

{{{subheading(Formatting)}}}

While  Common Lisp  doesn't  care about  indentation and  layout  of code,  nor
whether  you  use spaces  or  tabs,  this  is  an important  consideration  for
submissions to exercism.io. Excercism.io's code  widget cannot handle mixing of
tab and space characters  well so using only spaces is  recommended to make the
code more readable to the human  reviewers. Please review your editors settings
on  how to  accomplish this.  Below are  instructions for  popular editors  for
Common LiWhile Common  Lisp doesn't care about indentation and  layout of code,
nor whether  you use  spaces or  tabs, this is  an important  consideration for
submissions to exercism.io. Excercism.io's code  widget cannot handle mixing of
tab and space characters  well so using only spaces is  recommended to make the
code more readable to the human  reviewers. Please review your editors settings
on  how to  accomplish this.  Below are  instructions for  popular editors  for
Common Lisp.

*** Using Emacs
Emacs is very well suited for editing  Common Lisp and has many powerful add-on
packages available. The only  thing that one needs to do with  a stock emacs to
make it work well with exercism.io is to evaluate the following code:

#+begin_src elisp :results silent :exports results
(setq-default indent-tabs-mode nil)
#+end_src

{{{subheading(SLIME)}}}

One suggested  add-on for  Emacs and  Common Lisp is  SLIME which  offers tight
integration with the REPL; making iterative coding and testing very easy.

*** Common Lisp Hello World Readme
#+name:common-lisp-hello-world-readme
#+begin_src markdown :tangle common-lisp/hello-world/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

This is an exercise to introduce users to using Exercism [http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

*** Common Lisp Hello World Metadata
#+name:common-lisp-hello-world-exercism-metadata
#+begin_src js :tangle common-lisp/hello-world/.exercism/metadata.json :mkdirp yes
  {
      "track":"common-lisp",
      "exercise":"hello-world",
      "id":"79b68b2b43324642b307180cc701827c",
      "url":"https://exercism.io/my/solutions/79b68b2b43324642b307180cc701827c",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":true
  }
#+end_src
*** Common Lisp Hello World Scripts
**** Common Lisp Hello World Download Script

#+begin_src sh :results output :exports never
exercism download --exercise=hello-world --track=common-lisp
#+end_src

#+RESULTS:
: /Users/lolh-mbp/.exercism/common-lisp/hello-world

**** Common Lisp Hello World Submit Script

#+begin_src sh :results output :exports never
exercism submit common-lisp/hello-world/hello-world.lisp
#+end_src

#+RESULTS:
:     https://exercism.io/my/solutions/79b68b2b43324642b307180cc701827c
: 

*** Common Lisp Hello World Code
#+caption:Common Lisp Hello World
#+name:common-lisp-hello-world-code
#+begin_src lisp :tangle common-lisp/hello-world/hello-world.lisp :mkdirp yes
  (in-package #:cl-user)
  (defpackage #:hello-world
    (:use #:cl)
    (:export #:hello))
  (in-package #:hello-world)

  (defun hello ()
      (print "Hello, World!"))
#+end_src

*** Common Lisp Hello World Tests
#+caption:Common Lisp Hello World Test
#+name:common-lisp-hello-world-test
#+begin_src lisp :tangle common-lisp/hello-world/hello-world-test.lisp :mkdirp yes
;;;
;;; hello-world v1.1.0
;;;
(ql:quickload "lisp-unit")
#-xlisp-test (load "hello-world")

(defpackage #:hello-world-test
  (:use #:common-lisp #:lisp-unit))
(in-package #:hello-world-test)

(define-test
  say-hi!
  (assert-equal
    "Hello, World!"
    (hello-world:hello)))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all))
#+end_src

**** Common Lisp Hello World Test Result
 #+caption:Common Lisp Hello World Test Results
 #+name:common-lisp-hello-world-run-test
 #+header: :dir common-lisp/hello-world
 #+header: :results output :exports results
 #+begin_src sh
 ccl --batch --load hello-world-test.lisp
 #+end_src
** Common Lisp Two Fer
- https://github.com/exercism/problem-specifications/issues/757


{{{heading(Introduction)}}}

Two-fer or 2-fer is short for two for one. One for you and one for me.

Given a name, return a string with the message:
: One for X, one for me.
Where X is the given name.

However, if the name is missing, return the string:
: One for you, one for me.

Here are some examples:

|--------+-----------------------------|
| Name   | String to Return            |
|--------+-----------------------------|
| Alice  | One for Alice, one for me.  |
| Bob    | One for Bob, one for me.    |
|        | One for you, one for me.    |
| Zaphod | One for Zaphod, one for me. |
|--------+-----------------------------|
*** Common Lisp Two Fer README

#+caption: Common Lisp Two Fer Readme
#+name:common-lisp-two-fer-README
#+header: :mkdirp yes
#+begin_src markdown :tangle common-lisp/two-fer/README.md
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    |String to return 
|:-------|:------------------
|Alice   |One for Alice, one for me. 
|Bob     |One for Bob, one for me.
|        |One for you, one for me.
|Zaphod  |One for Zaphod, one for me.

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

#+header: :mkdirp yes
#+begin_src js :tangle common-lisp/two-fer/.exercism/metadata.json
  {
      "track":"common-lisp",
      "exercise":"two-fer",
      "id":"b7cb659356a94cd8a4be295158f0d251",
      "url":"https://exercism.io/my/solutions/b7cb659356a94cd8a4be295158f0d251",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** Common Lisp Two Fer Scripts
**** Common Lisp Two Fer Download Script

#+begin_src sh :results output :exports never
exercism download --exercise=two-fer --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/two-fer

**** Common Lisp Two Fer Submit Script

#+begin_src sh :results output :exports never
/usr/local/bin/exercism submit common-lisp/two-fer/two-fer.lisp
#+end_src

#+RESULTS:
:     https://exercism.io/my/solutions/b7cb659356a94cd8a4be295158f0d251
: 

*** Common Lisp Two Fer Code

#+caption: Common Lisp Two-Fer Code
#+name:common-lisp-two-fer-code
#+header: :mkdirp yes
#+begin_src lisp :tangle common-lisp/two-fer/two-fer.lisp
  (in-package #:cl-user)
  (defpackage #:two-fer
    (:use #:cl)
    (:export #:twofer))
  (in-package #:two-fer)

  ;; Use default value syntax
  (defun twofer (&optional (name "you"))
    (format nil "One for ~A, one for me." name))
#+end_src

#+caption: Common Lisp Two-Fer Test Run
#+name:common-lisp-two-fer-run-test
#+header: :dir common-lisp/two-fer
#+begin_src sh :results output :exports results
ccl --batch --load two-fer-test.lisp
#+end_src

#+RESULTS: common-lisp-two-fer-run-test
#+begin_example
To load "lisp-unit":
  Load 1 ASDF system:
    lisp-unit
; Loading "lisp-unit"

NO-NAME-GIVEN-NIL: 1 assertions passed, 0 failed.

NO-NAME-GIVEN: 1 assertions passed, 0 failed.

A-NAME-GIVEN: 1 assertions passed, 0 failed.

ANOTHER-NAME-GIVEN: 1 assertions passed, 0 failed.

Unit Test Summary
 | 4 assertions total
 | 4 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

Clozure Common Lisp Version 1.12  DarwinX8664

For more information about CCL, please see http://ccl.clozure.com.

CCL is free software.  It is distributed under the terms of the Apache
Licence, Version 2.0.
? 
#+end_example

*** Common Lisp Two Fer Test

#+caption:Common Lisp Two-Fer Test
#+name:common-lisp-two-fer-test
#+header: :mkdirp yes
#+begin_src lisp :tangle common-lisp/two-fer/two-fer-test.lisp
;;;
;;; two-fer v1.2.0
;;;
(ql:quickload "lisp-unit")
#-xlisp-test (load "two-fer")

(defpackage #:two-fer-test
  (:use #:common-lisp #:lisp-unit))
(in-package #:two-fer-test)

(define-test
    no-name-given-nil
    (assert-equal
     "One for you, one for me."
     (two-fer:twofer nil)))


(define-test
  a-name-given
  (assert-equal
    "One for Alice, one for me."
    (two-fer:twofer "Alice")))


(define-test
    another-name-given
    (assert-equal
     "One for Bob, one for me."
     (two-fer:twofer "Bob")))

(define-test
    no-name-given
    (assert-equal
     "One for you, one for me."
     (two-fer:twofer)))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all))
#+end_src
** Common Lisp Hamming
   :PROPERTIES:
   :source:   http://rosalind.info/problems/hamm/
   :started:  2020-10-22
   :END:

"Calculate the Hamming difference between two DNA strands."

{{{heading(Introduction)}}}

Your body is made up of cells  that contain DNA. Those cells regularly wear out
and need  replacing, which  they achieve  by dividing  into daughter  cells. In
fact, the average human body experiences about 10 quadrillion cell divisions in
a lifetime!

When  cells divide,  their DNA  replicates too.  Sometimes during  this process
mistakes  happen and  single  pieces  of DNA  get  encoded  with the  incorrect
information. If we compare two strands of DNA and count the differences between
them we  can see  how many  mistakes occurred.  This is  known as  the "Hamming
Distance".

We read DNA using the letters C,A,G and T. Two strands might look like this:

#+begin_example
GAGCCTACTAACGGGAT
CATCGTAATGACGGCCT
^ ^ ^  ^ ^    ^^
#+end_example

They have 7 differences, and therefore the Hamming Distance is 7.

The Hamming Distance is useful for lots of things in science, not just biology,
so it's a nice phrase to be familiar with :)

{{{heading(Implementation Notes)}}}

The  Hamming distance  is only  defined for  sequences of  equal length,  so an
attempt to calculate it between sequences of different lengths should not work.
The general handling of this situation (e.g., raising an exception vs returning
a special value) may differ between languages.

*** Common Lisp Hamming Metadata
**** Common Lisp Hamming README
 #+header: :mkdirp yes
 #+begin_src markdown :tangle common-lisp/hamming/README.md
 # Hamming

 Calculate the Hamming Distance between two DNA strands.

 Your body is made up of cells that contain DNA. Those cells regularly wear out and need replacing, which they achieve by dividing into daughter cells. In fact, the average human body experiences about 10 quadrillion cell divisions in a lifetime!

 When cells divide, their DNA replicates too. Sometimes during this process mistakes happen and single pieces of DNA get encoded with the incorrect information. If we compare two strands of DNA and count the differences between them we can see how many mistakes occurred. This is known as the "Hamming Distance".

 We read DNA using the letters C,A,G and T. Two strands might look like this:

     GAGCCTACTAACGGGAT
     CATCGTAATGACGGCCT
     ^ ^ ^  ^ ^    ^^

 They have 7 differences, and therefore the Hamming Distance is 7.

 The Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :)

 # Implementation notes

 The Hamming distance is only defined for sequences of equal length, so
 an attempt to calculate it between sequences of different lengths should
 not work. The general handling of this situation (e.g., raising an
 exception vs returning a special value) may differ between languages.

 ## Setup

 Check out [Installing Common
 Lisp](https://exercism.io/tracks/common-lisp/installation) for
 instructions to get started or take a look at the guides available in
 the [track's side bar](https://exercism.io/my/tracks/common-lisp).

 ## Formatting

 While Common Lisp doesn't care about indentation and layout of code,
 nor whether you use spaces or tabs, this is an important consideration
 for submissions to exercism.io. Excercism.io's code widget cannot
 handle mixing of tab and space characters well so using only spaces is recommended to make
 the code more readable to the human reviewers. Please review your
 editors settings on how to accomplish this. Below are instructions for
 popular editors for Common Lisp.

 ### VIM

 Use the following commands to ensure VIM uses only spaces for
 indentation:

 ```vimscript
 :set tabstop=2
 :set shiftwidth=2
 :set expandtab
 ```

 (or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
 be added to your `~/.vimrc` file to use it all the time.

 ### Emacs

 Emacs is very well suited for editing Common Lisp and has many
 powerful add-on packages available. The only thing that one needs to
 do with a stock emacs to make it work well with exercism.io is to
 evaluate the following code:

 `(setq-default indent-tabs-mode nil)`

 This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
 order to have it set whenever Emacs is launched.

 One suggested add-on for Emacs and Common Lisp is
 [SLIME](https://github.com/slime/slime) which offers tight integration
 with the REPL; making iterative coding and testing very easy.

 ## Source

 The Calculating Point Mutations problem at Rosalind [http://rosalind.info/problems/hamm/](http://rosalind.info/problems/hamm/)

 ## Submitting Incomplete Solutions
 It's possible to submit an incomplete solution so you can see how others have completed the exercise.
 #+end_src
**** Common Lisp Hamming Exercism Metadata
#+header: :mkdirp yes
#+begin_src js :tangle common-lisp/hamming/.exercism/metadata.json
  {
      "track":"common-lisp",
      "exercise":"hamming",
      "id":"0c129229bba340559a7e83864964570d",
      "url":"https://exercism.io/my/solutions/0c129229bba340559a7e83864964570d",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
*** Common Lisp Hamming Scripts
**** Common Lisp Hamming Download Script
#+header: :exports never
#+begin_src sh
exercism download --exercise=hamming --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/hamming

**** Common Lisp Hamming Submit Script
#+header: :exports never
#+begin_src sh
exercism submit common-lisp/hamming/hamming.lisp
#+end_src

#+RESULTS:
: https://exercism.io/my/solutions/0c129229bba340559a7e83864964570d

*** Common Lisp Hamming Code
#+caption: Common Lisp Hamming Code
#+name: common-lisp-hamming-code
#+begin_src lisp :tangle common-lisp/hamming/hamming.lisp
  (defpackage #:hamming
    (:use #:cl)
    (:export #:distance))

  (in-package #:hamming)

  (defun distance (dna1 dna2)
    "Number of positional differences in two equal length dna strands."
    (when (= (length dna1) (length dna2))
      (labels ((dist (d1 d2 diff)
                 (if (string= "" d1)
                     diff
                     (dist (subseq d1 1) (subseq d2 1)
                           (+ diff
                              (if (string= d1 d2 :start1 0 :end1 1 :start2 0 :end2 1)
                                  0 1))))))
        (dist dna1 dna2 0))))
#+end_src

#+header: :exports results :results output
#+header: :dir common-lisp/hamming
#+begin_src sh
  ccl --load hamming-test.lisp
#+end_src

#+RESULTS:
#+begin_example
To load "lisp-unit":
  Load 1 ASDF system:
    lisp-unit
; Loading "lisp-unit"

LARGER-DISTANCE: 1 assertions passed, 0 failed.

NO-DIFFERENCE-BETWEEN-IDENTICAL-STRANDS: 1 assertions passed, 0 failed.

INVALID-TO-GET-DISTANCE-FOR-DIFFERENT-LENGTH-STRINGS: 3 assertions passed, 0 failed.

SMALL-HAMMING-DISTANCE-IN-MIDDLE-SOMEWHERE: 1 assertions passed, 0 failed.

NO-DIFFERENCE-BETWEEN-EMPTY-STRANDS: 1 assertions passed, 0 failed.

COMPLETE-HAMMING-DISTANCE-IN-SMALL-STRAND: 1 assertions passed, 0 failed.

Unit Test Summary
 | 8 assertions total
 | 8 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

Clozure Common Lisp Version 1.12  DarwinX8664

For more information about CCL, please see http://ccl.clozure.com.

CCL is free software.  It is distributed under the terms of the Apache
Licence, Version 2.0.
? 
#+end_example

*** Common Lisp Hamming Tests
#+caption: Common Lisp Hamming Tests
#+name:common-lisp-hamming-tests
#+header: :mkdirp yes
#+begin_src lisp :tangle common-lisp/hamming/hamming-test.lisp
(ql:quickload "lisp-unit")
#-xlisp-test (load "hamming")

(defpackage #:hamming-test
  (:use #:common-lisp #:lisp-unit))

(in-package #:hamming-test)

(define-test no-difference-between-empty-strands
  (assert-equal 0 (hamming:distance "" "")))

(define-test no-difference-between-identical-strands
  (assert-equal 0 (hamming:distance "GGACTGA" "GGACTGA")))

(define-test complete-hamming-distance-in-small-strand
  (assert-equal 3 (hamming:distance "ACT" "GGA")))

(define-test small-hamming-distance-in-middle-somewhere
  (assert-equal 1 (hamming:distance "GGACG" "GGTCG")))

(define-test larger-distance
  (assert-equal 2 (hamming:distance "ACCAGGG" "ACTATGG")))

(define-test invalid-to-get-distance-for-different-length-strings
  (assert-equal nil (hamming:distance "AGACAACAGCCAGCCGCCGGATT" "AGGCAA"))
  (assert-equal nil (hamming:distance "AGACAACAGCCAGCCGCCGGATT" "AGACATCTTTCAGCCGCCGGATTAGGCAA"))
  (assert-equal nil (hamming:distance "AGG" "AGACAACAGCCAGCCGCCGGATT")))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :hamming-test))
#+end_src
** Common Lisp RNA Transcription
   :PROPERTIES:
   :source:   Hyperphysics http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html
   :date:     2020-11-03
   :cite:     https://exercism.io/my/solutions/5b24c439b938451d99e8422df554c0b8
   :END:
#+texinfo: @heading Introduction
Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

#+texinfo: @subheading DNA Nucleotides

The four nucleotides found in DNA are:

- adenine (A)
- cytosine (C)
- guanine (G)
- thymine (T)


#+texinfo: @subheading RNA Nucleotides

The four nucleotides found in RNA are:

- adenine (A)
- cytosine (C)
- guanine (G)
- uracil (U)


#+texinfo: @subheading Forming RNA from DNA

Given a  DNA strand,  its transcribed  RNA strand is  formed by  replacing each
nucleotide with its complement:

- G -> C
- C -> G
- T -> A
- A -> U
*** RNA Transcription README
#+header: :tangle common-lisp/rna-transcription/README.md
#+header: :mkdirp yes
#+begin_src markdown
# RNA Transcription

Given a DNA strand, return its RNA complement (per RNA transcription).

Both DNA and RNA strands are a sequence of nucleotides.

The four nucleotides found in DNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and thymine (**T**).

The four nucleotides found in RNA are adenine (**A**), cytosine (**C**),
guanine (**G**) and uracil (**U**).

Given a DNA strand, its transcribed RNA strand is formed by replacing
each nucleotide with its complement:

,* `G` -> `C`
,* `C` -> `G`
,* `T` -> `A`
,* `A` -> `U`

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

Hyperphysics [http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html](http://hyperphysics.phy-astr.gsu.edu/hbase/Organic/transcription.html)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src
*** RNA Transcription Scripts and Metadata
**** RNA Transcription Download Script
#+begin_src sh :mkdirp yes
exercism download --exercise=rna-transcription --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/rna-transcription

**** RNA Transcription Upload Script
#+begin_src sh
exercism submit common-lisp/rna-transcription/rna-transcription.lisp
#+end_src

#+RESULTS:
: https://exercism.io/my/solutions/5b24c439b938451d99e8422df554c0b8

**** RNA Transcription Metadata
#+header: :tangle common-lisp/rna-transcription/.exercism/metadata.json
#+header: :mkdirp yes
#+begin_src js
  {
      "track":"common-lisp",
      "exercise":"rna-transcription",
      "id":"5b24c439b938451d99e8422df554c0b8",
      "url":"https://exercism.io/my/solutions/5b24c439b938451d99e8422df554c0b8",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** RNA Transcriptions Code
#+header: :tangle common-lisp/rna-transcription/rna-transcription.lisp
#+begin_src lisp
  (in-package #:cl-user)
  (defpackage #:rna-transcription
    (:use #:cl)
    (:export #:to-rna))
  (in-package #:rna-transcription)

  (defun to-rna (str)
    "Transcribe a string representing DNA nucleotides to RNA.

  Given a  DNA strand,  its transcribed  RNA strand is  formed by  replacing each
  nucleotide with its complement:

  - G -> C
  - C -> G
  - T -> A
  - A -> U"

  (setq complements '(("G" . #\C) ("C" . #\G) ("T" . #\A) ("A" . #\U)))
  (map 'string
        (lambda (dna-nucleotide)
          (cdr (assoc dna-nucleotide complements :test #'string=)))
        str))
#+end_src

#+header: :dir common-lisp/rna-transcription
#+header: :shebang "#!/usr/bin/env sh"
#+header: :results output :exports results
#+begin_src sh
  ccl -Qb -l rna-transcription-test.lisp
#+end_src

#+RESULTS:
#+begin_example
TRANSCRIBES-CYTIDINE-TO-GUANOSINE: 1 assertions passed, 0 failed.

IT-TRANSCRIBES-ALL-NUCLEOTIDES: 1 assertions passed, 0 failed.

IT-TRANSCRIBES-THYMIDINE-TO-ADENOSINE: 1 assertions passed, 0 failed.

IT-VALIDATES-DNA-STRANDS: 1 assertions passed, 0 failed.

TRANSCRIBES-ADENOSINE-TO-URACILE: 1 assertions passed, 0 failed.

TRANSCRIBES-GUANOSINE-TO-CYTIDINE: 1 assertions passed, 0 failed.

Unit Test Summary
 | 6 assertions total
 | 6 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

Clozure Common Lisp Version 1.12  DarwinX8664

For more information about CCL, please see http://ccl.clozure.com.

CCL is free software.  It is distributed under the terms of the Apache
Licence, Version 2.0.
? 
#+end_example

*** RNA Transcriptions Tests
#+header: :tangle common-lisp/rna-transcription/rna-transcription-test.lisp
#+begin_src lisp
(ql:quickload "lisp-unit" :silent t)
#-xlisp-test (load "rna-transcription")

(defpackage :rna-transcription-test
  (:use #:common-lisp #:lisp-unit))

(in-package #:rna-transcription-test)

(define-test transcribes-cytidine-to-guanosine
  (assert-equal "G" (rna-transcription:to-rna "C")))

(define-test transcribes-guanosine-to-cytidine
  (assert-equal "C" (rna-transcription:to-rna "G")))

(define-test transcribes-adenosine-to-uracile
  (assert-equal "U" (rna-transcription:to-rna "A")))

(define-test it-transcribes-thymidine-to-adenosine
  (assert-equal "A" (rna-transcription:to-rna "T")))

(define-test it-transcribes-all-nucleotides
  (assert-equal "UGCACCAGAAUU" (rna-transcription:to-rna "ACGTGGTCTTAA")))

(define-test it-validates-dna-strands
  (assert-error 'error (rna-transcription:to-rna "XCGFGGTDTTAA")))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :rna-transcription-test))
#+end_src
** Common Lisp Leap
*** Common Lisp Readme
#+header: :tangle common-lisp/leap/README.md
#+header: :mkdirp yes
#+begin_src markdown
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src
*** Common Lisp Scripts
**** Common Lisp Download Script
#+begin_src sh :results output
exercism download --exercise=leap --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/leap

**** Common Lisp Upload Script
#+begin_src sh :results output
exercism submit common-lisp/leap/leap.lisp
#+end_src

#+RESULTS:
:     https://exercism.io/my/solutions/22252ed48dc049aa873121316fad0645
: 

*** Common Lisp Code
#+header: :tangle common-lisp/leap/leap.lisp
#+header: :mkdirp yes
#+begin_src lisp
    (defpackage #:leap
      (:use #:common-lisp)
      (:export #:leap-year-p))
    (in-package #:leap)

    (defun leap-year-p (year)
      (let ((div4   (zerop (mod year 4)))
            (div100 (zerop (mod year 100)))
            (div400 (zerop (mod year 400))))
        (and div4
             (not (and div100
                       (not div400))))))
#+end_src

#+caption: Common Lisp Leap Results
#+name: leap-run-test-results
#+header: :dir common-lisp/leap
#+header: :results output
#+header: :exports results
#+begin_src sh
ccl -l leap-test.lisp -e '(quit)'
#+end_src

#+RESULTS: leap-run-test-results
#+begin_example
To load "lisp-unit":
  Load 1 ASDF system:
    lisp-unit
; Loading "lisp-unit"

CENTURY: 1 assertions passed, 0 failed.

ANY-OLD-YEAR: 1 assertions passed, 0 failed.

EXCEPTIONAL-CENTURY: 1 assertions passed, 0 failed.

NON-LEAP-EVEN-YEAR: 1 assertions passed, 0 failed.

VANILLA-LEAP-YEAR: 1 assertions passed, 0 failed.

Unit Test Summary
 | 5 assertions total
 | 5 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

#+end_example

*** Common Lisp Tests
#+header: :tangle common-lisp/leap/leap-test.lisp
#+header: :mkdirp yes
#+begin_src lisp
(ql:quickload "lisp-unit" :silent t)
#-xlisp-test (load "leap")

(defpackage #:leap-test
  (:use #:common-lisp #:lisp-unit))

(in-package #:leap-test)

(define-test vanilla-leap-year
  (assert-true (leap:leap-year-p 1996)))

(define-test any-old-year
  (assert-false (leap:leap-year-p 1997)))

(define-test non-leap-even-year
  (assert-false (leap:leap-year-p 1998)))

(define-test century
  (assert-false (leap:leap-year-p 1900)))

(define-test exceptional-century
  (assert-true (leap:leap-year-p 2400)))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :leap-test))

#+end_src

*** Common Lisp Metadata

#+header: :tangle common-lisp/leap/.exercism/metadata.json
#+header: :mkdirp yes
#+begin_src js
  {
      "track":"common-lisp",
      "exercise":"leap",
      "id":"22252ed48dc049aa873121316fad0645",
      "url":"https://exercism.io/my/solutions/22252ed48dc049aa873121316fad0645",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
** Common Lisp Anagram
   :PROPERTIES:
   :cite:     https://exercism.io/my/solutions/6ee4f173fe4546698be15def9e94d81c
   :date-started: 2020-11-06
   :END:
*** Common Lisp Anagram Readme
#+name:Common Lisp Anagram README
#+header: :mkdirp yes :tangle common-lisp/anagram/README.md
#+begin_src markdown
# Anagram

Given a word and a list of possible anagrams, select the correct sublist.

Given `"listen"` and a list of candidates like `"enlists" "google"
"inlets" "banana"` the program should return a list containing
`"inlets"`.

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

Inspired by the Extreme Startup game [https://github.com/rchatley/extreme_startup](https://github.com/rchatley/extreme_startup)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src
*** Common Lisp Anagram Scripts
**** Common Lisp Anagram Download Script
#+begin_src sh :results output :mkdirp yes
exercism download --exercise=anagram --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/anagram

**** Common Lisp Anagram Upload Script
#+begin_src sh :results output
exercism submit common-lisp/anagram/anagram.lisp
#+end_src

#+RESULTS:
:     https://exercism.io/my/solutions/6ee4f173fe4546698be15def9e94d81c
: 

*** Common Lisp Anagram Code
#+caption:Common Lisp Anagram Code
#+name:common-lisp-anagram-code
#+header: :mkdirp yes :tangle common-lisp/anagram/anagram.lisp
#+begin_src lisp
  (in-package #:cl-user)
  (defpackage #:anagram
    (:use #:common-lisp)
    (:export #:anagrams-for))

  (in-package #:anagram)

  (defun anagrams-for (subject candidates)
    "Returns a sublist of candidates which are anagrams of the subject."
   (let* ((subject-dc (string-downcase subject))
          (subject-dc-sorted (sort (copy-seq subject-dc) #'char<)))
      (remove-if-not
       (lambda (candidate)
         (let* ((candidate-dc (string-downcase candidate))
                (candidate-dc-sorted (sort (copy-seq candidate-dc) #'char<)))
           (unless (string= subject-dc candidate-dc)
             (string= subject-dc-sorted candidate-dc-sorted))))
         candidates)))
#+end_src

#+caption:Common Lisp Anagram Test Results
#+name:common-lisp-anagram-test-results
#+header: :results output :exports results
#+header: :dir common-lisp/anagram
#+begin_src sh
ccl -l anagram-test.lisp -e '(quit)'
#+end_src

#+RESULTS: common-lisp-anagram-test-results
#+begin_example
CASE-INSENSITIVE-ANAGRAMS: 1 assertions passed, 0 failed.

WORD-IS-NOT-OWN-ANAGRAM: 1 assertions passed, 0 failed.

MULTIPLE-ANAGRAMS: 1 assertions passed, 0 failed.

DETECT-ANAGRAM: 1 assertions passed, 0 failed.

DOES-NOT-CONFUSE-DIFFERENT-DUPLICATES: 1 assertions passed, 0 failed.

DETECT-SIMPLE-ANAGRAM: 1 assertions passed, 0 failed.

ELIMINATE-ANAGRAM-SUBSETS: 1 assertions passed, 0 failed.

NO-MATCHES: 1 assertions passed, 0 failed.

WORD-IS-NOT-OWN-ANAGRAM-CASE-INSENSITIVELY: 1 assertions passed, 0 failed.

Unit Test Summary
 | 9 assertions total
 | 9 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

#+end_example

*** Common Lisp Anagram Tests
#+caption: Common Lisp Anagram Code Tests
#+name:common-lisp-anagram-code-tests
#+header: :mkdirp yes :tangle common-lisp/anagram/anagram-test.lisp
#+header: :dir common-lisp/anagram
#+begin_src lisp
(ql:quickload "lisp-unit" :silent t)
#-xlisp-test (load "anagram")

(defpackage #:anagram-test
  (:use #:common-lisp #:lisp-unit))

(in-package #:anagram-test)

(define-test no-matches
  (assert-equal '()
      (anagram:anagrams-for
       "diaper"
       '("hello" "world" "zombies" "pants"))))

(define-test detect-simple-anagram
  (assert-equal '("tan")
      (anagram:anagrams-for "ant" '("tan" "stand" "at"))))

(define-test does-not-confuse-different-duplicates
  (assert-equal '() (anagram:anagrams-for "galea" '("eagle"))))

(define-test eliminate-anagram-subsets
  (assert-equal '() (anagram:anagrams-for "good" '("dog" "goody"))))

(define-test detect-anagram
  (assert-equal '("inlets")
      (anagram:anagrams-for
       "listen"
       '("enlists" "google" "inlets" "banana"))))

(define-test multiple-anagrams
  (assert-equal '("gallery" "regally" "largely")
      (anagram:anagrams-for
       "allergy"
       '("gallery" "ballerina" "regally" "clergy" "largely" "leading"))))

(define-test case-insensitive-anagrams
  (assert-equal '("Carthorse")
      (anagram:anagrams-for
       "Orchestra"
       '("cashregister" "Carthorse" "radishes"))))

(define-test word-is-not-own-anagram
  (assert-equal '()
      (anagram:anagrams-for "banana" '("banana"))))

(define-test word-is-not-own-anagram-case-insensitively
  (assert-equal '()
      (anagram:anagrams-for "bananarama" '("BananaRama"))))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :anagram-test))

#+end_src
*** Common Lisp Anagram Metadata
#+header: :mkdirp yes :tangle common-lisp/anagram/.exercism/metadata.json
#+begin_src js
  {
      "track":"common-lisp",
      "exercise":"anagram",
      "id":"6ee4f173fe4546698be15def9e94d81c",
      "url":"https://exercism.io/my/solutions/6ee4f173fe4546698be15def9e94d81c",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
** Common Lisp Beer Song
*** Common Lisp Beer Song Readme
#+header: :mkdirp yes
#+header: :tangle common-lisp/beer-song/README.md
#+begin_src markdown
# Beer Song

Recite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall.

Note that not all verses are identical.

```text
99 bottles of beer on the wall, 99 bottles of beer.
Take one down and pass it around, 98 bottles of beer on the wall.

98 bottles of beer on the wall, 98 bottles of beer.
Take one down and pass it around, 97 bottles of beer on the wall.

97 bottles of beer on the wall, 97 bottles of beer.
Take one down and pass it around, 96 bottles of beer on the wall.

96 bottles of beer on the wall, 96 bottles of beer.
Take one down and pass it around, 95 bottles of beer on the wall.

95 bottles of beer on the wall, 95 bottles of beer.
Take one down and pass it around, 94 bottles of beer on the wall.

94 bottles of beer on the wall, 94 bottles of beer.
Take one down and pass it around, 93 bottles of beer on the wall.

93 bottles of beer on the wall, 93 bottles of beer.
Take one down and pass it around, 92 bottles of beer on the wall.

92 bottles of beer on the wall, 92 bottles of beer.
Take one down and pass it around, 91 bottles of beer on the wall.

91 bottles of beer on the wall, 91 bottles of beer.
Take one down and pass it around, 90 bottles of beer on the wall.

90 bottles of beer on the wall, 90 bottles of beer.
Take one down and pass it around, 89 bottles of beer on the wall.

89 bottles of beer on the wall, 89 bottles of beer.
Take one down and pass it around, 88 bottles of beer on the wall.

88 bottles of beer on the wall, 88 bottles of beer.
Take one down and pass it around, 87 bottles of beer on the wall.

87 bottles of beer on the wall, 87 bottles of beer.
Take one down and pass it around, 86 bottles of beer on the wall.

86 bottles of beer on the wall, 86 bottles of beer.
Take one down and pass it around, 85 bottles of beer on the wall.

85 bottles of beer on the wall, 85 bottles of beer.
Take one down and pass it around, 84 bottles of beer on the wall.

84 bottles of beer on the wall, 84 bottles of beer.
Take one down and pass it around, 83 bottles of beer on the wall.

83 bottles of beer on the wall, 83 bottles of beer.
Take one down and pass it around, 82 bottles of beer on the wall.

82 bottles of beer on the wall, 82 bottles of beer.
Take one down and pass it around, 81 bottles of beer on the wall.

81 bottles of beer on the wall, 81 bottles of beer.
Take one down and pass it around, 80 bottles of beer on the wall.

80 bottles of beer on the wall, 80 bottles of beer.
Take one down and pass it around, 79 bottles of beer on the wall.

79 bottles of beer on the wall, 79 bottles of beer.
Take one down and pass it around, 78 bottles of beer on the wall.

78 bottles of beer on the wall, 78 bottles of beer.
Take one down and pass it around, 77 bottles of beer on the wall.

77 bottles of beer on the wall, 77 bottles of beer.
Take one down and pass it around, 76 bottles of beer on the wall.

76 bottles of beer on the wall, 76 bottles of beer.
Take one down and pass it around, 75 bottles of beer on the wall.

75 bottles of beer on the wall, 75 bottles of beer.
Take one down and pass it around, 74 bottles of beer on the wall.

74 bottles of beer on the wall, 74 bottles of beer.
Take one down and pass it around, 73 bottles of beer on the wall.

73 bottles of beer on the wall, 73 bottles of beer.
Take one down and pass it around, 72 bottles of beer on the wall.

72 bottles of beer on the wall, 72 bottles of beer.
Take one down and pass it around, 71 bottles of beer on the wall.

71 bottles of beer on the wall, 71 bottles of beer.
Take one down and pass it around, 70 bottles of beer on the wall.

70 bottles of beer on the wall, 70 bottles of beer.
Take one down and pass it around, 69 bottles of beer on the wall.

69 bottles of beer on the wall, 69 bottles of beer.
Take one down and pass it around, 68 bottles of beer on the wall.

68 bottles of beer on the wall, 68 bottles of beer.
Take one down and pass it around, 67 bottles of beer on the wall.

67 bottles of beer on the wall, 67 bottles of beer.
Take one down and pass it around, 66 bottles of beer on the wall.

66 bottles of beer on the wall, 66 bottles of beer.
Take one down and pass it around, 65 bottles of beer on the wall.

65 bottles of beer on the wall, 65 bottles of beer.
Take one down and pass it around, 64 bottles of beer on the wall.

64 bottles of beer on the wall, 64 bottles of beer.
Take one down and pass it around, 63 bottles of beer on the wall.

63 bottles of beer on the wall, 63 bottles of beer.
Take one down and pass it around, 62 bottles of beer on the wall.

62 bottles of beer on the wall, 62 bottles of beer.
Take one down and pass it around, 61 bottles of beer on the wall.

61 bottles of beer on the wall, 61 bottles of beer.
Take one down and pass it around, 60 bottles of beer on the wall.

60 bottles of beer on the wall, 60 bottles of beer.
Take one down and pass it around, 59 bottles of beer on the wall.

59 bottles of beer on the wall, 59 bottles of beer.
Take one down and pass it around, 58 bottles of beer on the wall.

58 bottles of beer on the wall, 58 bottles of beer.
Take one down and pass it around, 57 bottles of beer on the wall.

57 bottles of beer on the wall, 57 bottles of beer.
Take one down and pass it around, 56 bottles of beer on the wall.

56 bottles of beer on the wall, 56 bottles of beer.
Take one down and pass it around, 55 bottles of beer on the wall.

55 bottles of beer on the wall, 55 bottles of beer.
Take one down and pass it around, 54 bottles of beer on the wall.

54 bottles of beer on the wall, 54 bottles of beer.
Take one down and pass it around, 53 bottles of beer on the wall.

53 bottles of beer on the wall, 53 bottles of beer.
Take one down and pass it around, 52 bottles of beer on the wall.

52 bottles of beer on the wall, 52 bottles of beer.
Take one down and pass it around, 51 bottles of beer on the wall.

51 bottles of beer on the wall, 51 bottles of beer.
Take one down and pass it around, 50 bottles of beer on the wall.

50 bottles of beer on the wall, 50 bottles of beer.
Take one down and pass it around, 49 bottles of beer on the wall.

49 bottles of beer on the wall, 49 bottles of beer.
Take one down and pass it around, 48 bottles of beer on the wall.

48 bottles of beer on the wall, 48 bottles of beer.
Take one down and pass it around, 47 bottles of beer on the wall.

47 bottles of beer on the wall, 47 bottles of beer.
Take one down and pass it around, 46 bottles of beer on the wall.

46 bottles of beer on the wall, 46 bottles of beer.
Take one down and pass it around, 45 bottles of beer on the wall.

45 bottles of beer on the wall, 45 bottles of beer.
Take one down and pass it around, 44 bottles of beer on the wall.

44 bottles of beer on the wall, 44 bottles of beer.
Take one down and pass it around, 43 bottles of beer on the wall.

43 bottles of beer on the wall, 43 bottles of beer.
Take one down and pass it around, 42 bottles of beer on the wall.

42 bottles of beer on the wall, 42 bottles of beer.
Take one down and pass it around, 41 bottles of beer on the wall.

41 bottles of beer on the wall, 41 bottles of beer.
Take one down and pass it around, 40 bottles of beer on the wall.

40 bottles of beer on the wall, 40 bottles of beer.
Take one down and pass it around, 39 bottles of beer on the wall.

39 bottles of beer on the wall, 39 bottles of beer.
Take one down and pass it around, 38 bottles of beer on the wall.

38 bottles of beer on the wall, 38 bottles of beer.
Take one down and pass it around, 37 bottles of beer on the wall.

37 bottles of beer on the wall, 37 bottles of beer.
Take one down and pass it around, 36 bottles of beer on the wall.

36 bottles of beer on the wall, 36 bottles of beer.
Take one down and pass it around, 35 bottles of beer on the wall.

35 bottles of beer on the wall, 35 bottles of beer.
Take one down and pass it around, 34 bottles of beer on the wall.

34 bottles of beer on the wall, 34 bottles of beer.
Take one down and pass it around, 33 bottles of beer on the wall.

33 bottles of beer on the wall, 33 bottles of beer.
Take one down and pass it around, 32 bottles of beer on the wall.

32 bottles of beer on the wall, 32 bottles of beer.
Take one down and pass it around, 31 bottles of beer on the wall.

31 bottles of beer on the wall, 31 bottles of beer.
Take one down and pass it around, 30 bottles of beer on the wall.

30 bottles of beer on the wall, 30 bottles of beer.
Take one down and pass it around, 29 bottles of beer on the wall.

29 bottles of beer on the wall, 29 bottles of beer.
Take one down and pass it around, 28 bottles of beer on the wall.

28 bottles of beer on the wall, 28 bottles of beer.
Take one down and pass it around, 27 bottles of beer on the wall.

27 bottles of beer on the wall, 27 bottles of beer.
Take one down and pass it around, 26 bottles of beer on the wall.

26 bottles of beer on the wall, 26 bottles of beer.
Take one down and pass it around, 25 bottles of beer on the wall.

25 bottles of beer on the wall, 25 bottles of beer.
Take one down and pass it around, 24 bottles of beer on the wall.

24 bottles of beer on the wall, 24 bottles of beer.
Take one down and pass it around, 23 bottles of beer on the wall.

23 bottles of beer on the wall, 23 bottles of beer.
Take one down and pass it around, 22 bottles of beer on the wall.

22 bottles of beer on the wall, 22 bottles of beer.
Take one down and pass it around, 21 bottles of beer on the wall.

21 bottles of beer on the wall, 21 bottles of beer.
Take one down and pass it around, 20 bottles of beer on the wall.

20 bottles of beer on the wall, 20 bottles of beer.
Take one down and pass it around, 19 bottles of beer on the wall.

19 bottles of beer on the wall, 19 bottles of beer.
Take one down and pass it around, 18 bottles of beer on the wall.

18 bottles of beer on the wall, 18 bottles of beer.
Take one down and pass it around, 17 bottles of beer on the wall.

17 bottles of beer on the wall, 17 bottles of beer.
Take one down and pass it around, 16 bottles of beer on the wall.

16 bottles of beer on the wall, 16 bottles of beer.
Take one down and pass it around, 15 bottles of beer on the wall.

15 bottles of beer on the wall, 15 bottles of beer.
Take one down and pass it around, 14 bottles of beer on the wall.

14 bottles of beer on the wall, 14 bottles of beer.
Take one down and pass it around, 13 bottles of beer on the wall.

13 bottles of beer on the wall, 13 bottles of beer.
Take one down and pass it around, 12 bottles of beer on the wall.

12 bottles of beer on the wall, 12 bottles of beer.
Take one down and pass it around, 11 bottles of beer on the wall.

11 bottles of beer on the wall, 11 bottles of beer.
Take one down and pass it around, 10 bottles of beer on the wall.

10 bottles of beer on the wall, 10 bottles of beer.
Take one down and pass it around, 9 bottles of beer on the wall.

9 bottles of beer on the wall, 9 bottles of beer.
Take one down and pass it around, 8 bottles of beer on the wall.

8 bottles of beer on the wall, 8 bottles of beer.
Take one down and pass it around, 7 bottles of beer on the wall.

7 bottles of beer on the wall, 7 bottles of beer.
Take one down and pass it around, 6 bottles of beer on the wall.

6 bottles of beer on the wall, 6 bottles of beer.
Take one down and pass it around, 5 bottles of beer on the wall.

5 bottles of beer on the wall, 5 bottles of beer.
Take one down and pass it around, 4 bottles of beer on the wall.

4 bottles of beer on the wall, 4 bottles of beer.
Take one down and pass it around, 3 bottles of beer on the wall.

3 bottles of beer on the wall, 3 bottles of beer.
Take one down and pass it around, 2 bottles of beer on the wall.

2 bottles of beer on the wall, 2 bottles of beer.
Take one down and pass it around, 1 bottle of beer on the wall.

1 bottle of beer on the wall, 1 bottle of beer.
Take it down and pass it around, no more bottles of beer on the wall.

No more bottles of beer on the wall, no more bottles of beer.
Go to the store and buy some more, 99 bottles of beer on the wall.
```

## For bonus points

Did you get the tests passing and the code clean? If you want to, these
are some additional things you could try:

,* Remove as much duplication as you possibly can.
,* Optimize for readability, even if it means introducing duplication.
,* If you've removed all the duplication, do you have a lot of
  conditionals? Try replacing the conditionals with polymorphism, if it
  applies in this language. How readable is it?

Then please share your thoughts in a comment on the submission. Did this
experiment make the code better? Worse? Did you learn anything from it?

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

Learn to Program by Chris Pine [http://pine.fm/LearnToProgram/?Chapter=06](http://pine.fm/LearnToProgram/?Chapter=06)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src
*** Common Lisp Beer Song Scripts and Metadata
**** Common Lisp Beer Song Download Script
#+begin_src sh :mkdirp yes
exercism download --exercise=beer-song --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/beer-song

**** Common Lisp Beer Song Upload Script
#+begin_src sh :dir common-lisp/beer-song
exercism submit beer-song.lisp
#+end_src

#+RESULTS:
: https://exercism.io/my/solutions/5e1c5241d7054d43bef690f3671d02b2

**** Common Lisp Beer Song Metadata
#+begin_src js :tangle common-lisp/beer-song/.exercism/metadata.json :mkdirp yes
  {
      "track":"common-lisp",
      "exercise":"beer-song",
      "id":"5e1c5241d7054d43bef690f3671d02b2",
      "url":"https://exercism.io/my/solutions/5e1c5241d7054d43bef690f3671d02b2",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
*** Common Lisp Code
#+header: :mkdirp yes
#+header: :tangle common-lisp/beer-song/beer-song.lisp
#+begin_src lisp
  (in-package #:cl-user)
  (defpackage #:beer
    (:use #:common-lisp)
    (:export #:verse #:sing))

  (in-package #:beer)

  #|

  [ n==0: No more | n>=1: n ] bottle[s] of beer[.|] [|on the wall[.|,]]

  [ n==0: Go to the store | n>=1: Take [it | one] down ]
  and
  [ n==0: buy some more | n>=1: pass it around ]

  |#

  (defun bottles (n o p z)
    " n: number of bottles; 0 <= n <= 99
      o: on the wall; nil: no, t: yes
      p: punctuation; 0=`,' 1=`.~&'
      z: 0=capitalize; 1=lower case"
    (concatenate 'string
                 (format nil "~[~@(~a~)~;~a~]" z (format nil "~[no more ~:;~d ~]" n n))
                 (format nil "bottle~p of beer" n)
                 (format nil "~:[~; on the wall~]" o)
                 (format nil "~[, ~;.~&~]" p)))

  (defun take (n)
    (let ((o (cond
               ((= n 0) "")
               ((= n 1) "it")
               (t "one"))))
      (concatenate 'string
                   (format nil "~[Go to the store~:;Take ~]" n)
                   (format nil "~[~a~:;~a down~] and " n o)
                   (format nil "~[buy some more~:;pass it around~], " n))))

  (defun verse (n)
    "Returns a string verse for a given number."
    (let ((nxt (if (> n 0) (1- n) 99)))
      (concatenate 'string
                   (bottles n t 0 0)
                   (bottles n nil 1 1)
                   (take n)
                   (bottles nxt t 1 1))))

  (defun sing (start &optional (end 0))
    "Returns a string of verses for a given range of numbers."
    (loop for num from start downto end
          with sang = (make-array 1 :element-type 'character :fill-pointer 0 :adjustable t)
          do (format sang "~a~%" (verse num))
          finally (return sang)))
#+end_src

#+name: common-lisp-beer-song-run-tests
#+header: :results output
#+header: :dir common-lisp/beer-song
#+begin_src sh
ccl -Q -l beer-song-test.lisp -e '(quit)'
#+end_src

#+RESULTS: common-lisp-beer-song-run-tests
#+begin_example
TEST-VERSE: 3 assertions passed, 0 failed.

TEST-SONG: 2 assertions passed, 0 failed.

Unit Test Summary
 | 5 assertions total
 | 5 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

#+end_example

*** Common Lisp Tests
#+header: :mkdirp yes
#+header: :tangle common-lisp/beer-song/beer-song-test.lisp
#+begin_src lisp
(ql:quickload "lisp-unit" :silent t)
#-xlisp-test (load "beer-song")

(defpackage #:beer-song-test
  (:use #:common-lisp #:lisp-unit))

(in-package #:beer-song-test)

(defparameter +verse-8+
  (format nil
          "8 bottles of beer on the wall, 8 bottles of beer.~&~
           Take one down and pass it around, 7 bottles of beer on the wall.~&"))
(defparameter +verse-2+
  (format nil
          "2 bottles of beer on the wall, 2 bottles of beer.~&~
           Take one down and pass it around, 1 bottle of beer on the wall.~&"))
(defparameter +verse-1+
  (format nil
          "1 bottle of beer on the wall, 1 bottle of beer.~&~
           Take it down and pass it around, no more bottles of beer on the wall.~&"))
(defparameter +verse-0+
  (format nil
          "No more bottles of beer on the wall, no more bottles of beer.~&~
           Go to the store and buy some more, 99 bottles of beer on the wall.~&"))

(defparameter +song-8-6+
  (format nil
          "8 bottles of beer on the wall, 8 bottles of beer.~&~
           Take one down and pass it around, 7 bottles of beer on the wall.~&~
           ~%~
           7 bottles of beer on the wall, 7 bottles of beer.~&~
           Take one down and pass it around, 6 bottles of beer on the wall.~&~
           ~%~
           6 bottles of beer on the wall, 6 bottles of beer.~&~
           Take one down and pass it around, 5 bottles of beer on the wall.~&~
           ~%"))
(defparameter +song-3-0+
  (format nil
          "3 bottles of beer on the wall, 3 bottles of beer.~&~
           Take one down and pass it around, 2 bottles of beer on the wall.~&~
           ~%~
           2 bottles of beer on the wall, 2 bottles of beer.~&~
           Take one down and pass it around, 1 bottle of beer on the wall.~&~
           ~%~
           1 bottle of beer on the wall, 1 bottle of beer.~&~
           Take it down and pass it around, no more bottles of beer on the wall.~&~
           ~%~
           No more bottles of beer on the wall, no more bottles of beer.~&~
           Go to the store and buy some more, 99 bottles of beer on the wall.~&~
           ~%"))

(define-test test-verse
  (assert-equal +verse-8+ (beer:verse 8))
  (assert-equal +verse-2+ (beer:verse 2))
  (assert-equal +verse-1+ (beer:verse 1)))

(define-test test-song
  (assert-equal +song-8-6+ (beer:sing 8 6))
  (assert-equal +song-3-0+ (beer:sing 3)))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :beer-song-test))

#+end_src
** Common Lisp Roman Numerals
*** Common Lisp Roman Numerals Readme
#+header: :mkdirp yes
#+header: :tangle common-lisp/roman-numerals/README.md
#+begin_src markdown
# Roman Numerals

Write a function to convert from normal numbers to Roman Numerals.

The Romans were a clever bunch. They conquered most of Europe and ruled
it for hundreds of years. They invented concrete and straight roads and
even bikinis. One thing they never discovered though was the number
zero. This made writing and dating extensive histories of their exploits
slightly more challenging, but the system of numbers they came up with
is still in use today. For example the BBC uses Roman numerals to date
their programmes.

The Romans wrote numbers using letters - I, V, X, L, C, D, M. (notice
these letters have lots of straight lines and are hence easy to hack
into stone tablets).

```text
 1  => I
10  => X
 7  => VII
```

There is no need to be able to convert numbers larger than about 3000.
(The Romans themselves didn't tend to go any higher)

Wikipedia says: Modern Roman numerals ... are written by expressing each
digit separately starting with the left most digit and skipping any
digit with a value of zero.

To see this in practice, consider the example of 1990.

In Roman numerals 1990 is MCMXC:

1000=M
900=CM
90=XC

2008 is written as MMVIII:

2000=MM
8=VIII

See also: http://www.novaroma.org/via_romana/numbers.html

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

The Roman Numeral Kata [http://codingdojo.org/cgi-bin/index.pl?KataRomanNumerals](http://codingdojo.org/cgi-bin/index.pl?KataRomanNumerals)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src
*** Common Lisp Roman Numerals Scripts and Metadata
**** Common Lisp Roman Numerals Download Script
#+begin_src sh
exercism download --exercise=roman-numerals --track=common-lisp
#+end_src

**** Common Lisp Roman Numerals Upload Script
#+begin_src sh
exercism submit common-lisp/roman-numerals/roman-numerals.lisp
#+end_src

#+RESULTS:
: https://exercism.io/my/solutions/472ca4efdd4e428db07d9ea2d9a8ca00

**** Common Lisp Roman Numerals Metadata
#+header: :tangle common-lisp/roman-numerals/.exercism/metadata.json
#+header: :mkdirp yes
#+begin_src js
  {
      "track":"common-lisp",
      "exercise":"roman-numerals",
      "id":"472ca4efdd4e428db07d9ea2d9a8ca00",
      "url":"https://exercism.io/my/solutions/472ca4efdd4e428db07d9ea2d9a8ca00",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
*** Common Lisp Roman Numerals Code
#+header: :mkdirp yes
#+header: :tangle common-lisp/roman-numerals/roman-numerals.lisp
#+begin_src lisp
  (defpackage #:roman
    (:use #:cl)
    (:export #:romanize))

  (in-package #:roman)

  (defconstant +ROMAN-NUMERALS+
    '(("I" 1)
      ("V" 5)
      ("X" 10)
      ("L" 50)
      ("C" 100)
      ("D" 500)
      ("M" 1000)))

  ;; (defun m
  (defun repeat (d pos ds)
    "Return a string  of multiple characters of one  Roman numeral, e.g.
  'III' or  'CC', where  'd' represents  the length  of the  string, and
  'pos' represents  its place  value in the  parameter '+ROMAN-NUMERALS+'.
  However, make sure the string is reduced, e.g., from 'IIII' to 'IV' or
  'VIIII' to 'IX'."
    (if (or (< pos 0) (> pos 6))
        ""
        (let ((r (car (elt +ROMAN-NUMERALS+ pos))); current Roman numeral
              (a "")); variable to hold the string
          ;; This if checks if the current value needs to be simplified;
          ;; it  needs to  be simplified  if 'd'  equals 4  in positions
          ;; between 0 and 4.
          (if
           (and (< pos 5) (= d 4))
           ;; 'r' is  a single  instance of  the current  Roman numeral,
           ;; preceded  by either  the  next higher  value  or the  next
           ;; higher value after that, depending on whether the value is
           ;; a 4 or a 9. It is a  4 if the next higher digit is a zero,
           ;; while it is a 9 if the next higher digit is a 1.
           (format nil "~a~a"
                   (car (elt +ROMAN-NUMERALS+
                         (+ pos
                            (if (= (elt ds (1+ pos)) 1) 2 1))))
                   r)
           ;; this   'do-loop'  applies   in  all   instances  when   no
           ;; simplification is needed.
           (dotimes (it d a)
             (setf a (concatenate 'string a r)))))))

  (defun d2r (ds)
    "Transform a list of digits  ('ds') representing Roman numerals into
  a string of Roman numerals, simplified.

  'ds' is a list of six  digits, each element representing the magnitude
  of the Roman numeral at that place, i.e. (2 3 0 4 1 2)."
    (loop for d in ds with roman = "" with pos = 0
          do
             ;; 'repeat' produces a string of Roman numerals of the same
             ;; value, simplified.
             (setf roman (concatenate 'string roman (repeat d pos ds)))
             ;; this  removes  the  next  digit if  a  simplified  Roman
             ;; numeral was just produced.
             (when (and (= d 4) (< pos 5)) (setf (elt ds (1+ pos)) 0))
             (incf pos)
          finally (return (reverse roman))))

  (defun romanize (number)
    "Turn a decimal number into a string of Roman digits.

  Loop through the list of Roman digit and decimal values, divide the
  current number by the decimal value to obtain how many Roman digits
  the current number represents, store that number in a list with its
  position representing its base value, and its value representing how
  many, then loop again, using the remainder as the new number. At the
  completion of the loop, transform the list of digits into Roman
  digits."
    (loop for (nil val) in (reverse +ROMAN-NUMERALS+) ; only need the
                                                    ; Roman digit's
                                                    ; decimal value;
                                                    ; start with the
                                                    ; highest value and
                                                    ; work down.
          with ds  = () ; will  hold the result  of the loop; will  be a
                       ; list    of    decimal    values    representing
                       ; placeholders  (which Roman  digit)  and no.  of
                       ; Roman digits
          with num = number ; let's be functional about this
          do
             ;; truncate of the division produces the number of Roman
             ;; digits this number represents; mod (the remainder of the
             ;; division) represents the value of the number in the next
             ;; iteration
             (multiple-value-bind (quo rem) (truncate num val)
               (setf ds (cons quo ds)
                     num rem))
          finally (return  (d2r ds))))  ; transform  the list  of digits
                                        ; into Roman digits
#+end_src

#+header: :dir common-lisp/roman-numerals
#+header: :results output :exports results
#+begin_src sh
ccl -Q -l roman-numerals-test.lisp -e '(quit)'
#+end_src

#+RESULTS:
#+begin_example
To load "lisp-unit":
  Load 1 ASDF system:
    lisp-unit
; Loading "lisp-unit"

TEST-48: 1 assertions passed, 0 failed.

TEST-9: 1 assertions passed, 0 failed.

TEST-27: 1 assertions passed, 0 failed.

TEST-59: 1 assertions passed, 0 failed.

TEST-4: 1 assertions passed, 0 failed.

TEST-5: 1 assertions passed, 0 failed.

TEST-575: 1 assertions passed, 0 failed.

TEST-1: 1 assertions passed, 0 failed.

TEST-6: 1 assertions passed, 0 failed.

TEST-2: 1 assertions passed, 0 failed.

TEST-3000: 1 assertions passed, 0 failed.

TEST-1024: 1 assertions passed, 0 failed.

TEST-911: 1 assertions passed, 0 failed.

TEST-141: 1 assertions passed, 0 failed.

TEST-93: 1 assertions passed, 0 failed.

TEST-402: 1 assertions passed, 0 failed.

TEST-3: 1 assertions passed, 0 failed.

TEST-163: 1 assertions passed, 0 failed.

Unit Test Summary
 | 18 assertions total
 | 18 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

#+end_example

*** Common Lisp Roman Numerals Tests
#+header: :mkdirp yes
#+header: :tangle common-lisp/roman-numerals/roman-numerals-test.lisp
#+begin_src lisp
(ql:quickload "lisp-unit")
#-xlisp-test (load "roman-numerals")

(defpackage #:roman-test
  (:use #:cl #:lisp-unit))

(in-package #:roman-test)

(define-test test-1
  (assert-equal "I" (roman:romanize 1)))

(define-test test-2
  (assert-equal "II" (roman:romanize 2)))

(define-test test-3
  (assert-equal "III" (roman:romanize 3)))

(define-test test-4
  (assert-equal "IV" (roman:romanize 4)))

(define-test test-5
  (assert-equal "V" (roman:romanize 5)))

(define-test test-6
  (assert-equal "VI" (roman:romanize 6)))

(define-test test-9
  (assert-equal "IX" (roman:romanize 9)))

(define-test test-27
  (assert-equal "XXVII" (roman:romanize 27)))

(define-test test-48
  (assert-equal "XLVIII" (roman:romanize 48)))

(define-test test-59
  (assert-equal "LIX" (roman:romanize 59)))

(define-test test-93
  (assert-equal "XCIII" (roman:romanize 93)))

(define-test test-141
  (assert-equal "CXLI" (roman:romanize 141)))

(define-test test-163
  (assert-equal "CLXIII" (roman:romanize 163)))

(define-test test-402
  (assert-equal "CDII" (roman:romanize 402)))

(define-test test-575
  (assert-equal "DLXXV" (roman:romanize 575)))

(define-test test-911
  (assert-equal "CMXI" (roman:romanize 911)))

(define-test test-1024
  (assert-equal "MXXIV" (roman:romanize 1024)))

(define-test test-3000
  (assert-equal "MMM" (roman:romanize 3000)))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :roman-test))

#+end_src
** Common Lisp Word Count
   :PROPERTIES:
   :site:     https://exercism.io/my/solutions/14be464bd8ed4d109d986f50f3816626
   :date:     2020-11-23
   :END:
*** Common Lisp Word Count README and Metadata
#+header: :tangle common-lisp/word-count/README.md :mkdirp yes
#+begin_src makedown
# Word Count

Given a phrase, count the occurrences of each _word_ in that phrase.

For the purposes of this exercise you can expect that a _word_ will always be one of:

1. A _number_ composed of one or more ASCII digits (ie "0" or "1234") OR
2. A _simple word_ composed of one or more ASCII letters (ie "a" or "they") OR
3. A _contraction_ of two _simple words_ joined by a single apostrophe (ie "it's" or "they're")

When counting words you can assume the following rules:

1. The count is _case insensitive_ (ie "You", "you", and "YOU" are 3 uses of the same word)
2. The count is _unordered_; the tests will ignore how words and counts are ordered
3. Other than the apostrophe in a _contraction_ all forms of _punctuation_ are ignored
4. The words can be separated by _any_ form of whitespace (ie "\t", "\n", " ")

For example, for the phrase `"That's the password: 'PASSWORD 123'!", cried the Special Agent.\nSo I fled.` the count would be:

```text
that's: 1
the: 2
password: 2
123: 1
cried: 1
special: 1
agent: 1
so: 1
i: 1
fled: 1
```

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

This is a classic toy problem, but we were reminded of it by seeing it in the Go Tour.

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+end_src

#+header: :tangle common-lisp/word-count/.exercism/metadata.json :mkdirp yes
#+begin_src js
  {
      "track":"common-lisp",
      "exercise":"word-count",
      "id":"14be464bd8ed4d109d986f50f3816626",
      "url":"https://exercism.io/my/solutions/14be464bd8ed4d109d986f50f3816626",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
*** Common Lisp Word Count Scripts
**** Common Lisp Word Count Download Script
#+begin_src sh
exercism download --exercise=word-count --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/word-count

**** Common Lisp Word Count Upload Script
#+begin_src sh
exercism submit common-lisp/word-count/word-count.lisp
#+end_src

#+RESULTS:
: https://exercism.io/my/solutions/14be464bd8ed4d109d986f50f3816626

*** Common Lisp Word Count Code
#+caption:Common Lisp Word Count Code
#+name:common-lisp-word-count-code
#+begin_src lisp :tangle common-lisp/word-count/word-count.lisp :mkdirp yes
  (defpackage #:make-split-words
    (:use #:cl)
    (:export #:make-words))
  (in-package #:make-split-words)

  (defparameter *words* ())

  (defun split-words (sentence cur)
    (cond ((zerop (length sentence)) *words*)
          ((= cur (length sentence))
           (push (string-right-trim '(#\') sentence) *words*))
          ((or
            (alphanumericp (char sentence cur))
            (and (plusp cur)
                 (char= #\' (char sentence cur))))
           (split-words sentence (1+ cur)))
          (t
           (if (zerop cur)
               (split-words (subseq sentence 1) 0)
               (progn
                 (push (string-right-trim '(#\') (subseq sentence 0 cur)) *words*)
                 (split-words (subseq sentence cur) 0))))))

  (defun make-words (sentence)
    (setq *words* ())
    (split-words (string-downcase sentence) 0)
    (reverse *words*))

  (defpackage #:word-count
    (:use #:cl #:make-split-words)
    (:export #:count-words))
  (in-package #:word-count)

  (defun count-words (sentence)
    (let ((words (make-words sentence))
          (set ())
          (el ()))
      (dolist (word words set)
        (let ((el (assoc word set :test #'string=)))
          (if el
              (incf (cdr el))
              (setf set (acons word 1 set)))))))
#+end_src

#+header: :dir common-lisp/word-count
#+begin_src sh :results output :exports results
ccl -Q -l word-count-test.lisp -e '(quit)'
#+end_src

#+RESULTS:
#+begin_example
WITH-APOSTROPHES: 1 assertions passed, 0 failed.

IGNORE-PUNCTUATION: 1 assertions passed, 0 failed.

HANDLES-EXPANDED-LISTS: 1 assertions passed, 0 failed.

INCLUDE-NUMBERS: 1 assertions passed, 0 failed.

ALTERNATING-WORD-SEPARATORS-NOT-DETECTED-AS-A-WORD: 1 assertions passed, 0 failed.

MULTIPLE-SPACES-NOT-DETECTED-AS-A-WORD: 1 assertions passed, 0 failed.

COUNT-ONE-WORD: 1 assertions passed, 0 failed.

HANDLES-CRAMPED-LISTS: 1 assertions passed, 0 failed.

NORMALIZE-CASE: 1 assertions passed, 0 failed.

SUBSTRINGS-FROM-THE-BEGINNING: 1 assertions passed, 0 failed.

MULTIPLE-OCCURRENCES-OF-A-WORD: 1 assertions passed, 0 failed.

WITH-QUOTATIONS: 1 assertions passed, 0 failed.

COUNT-ONE-OF-EACH-WORD: 1 assertions passed, 0 failed.

Unit Test Summary
 | 13 assertions total
 | 13 passed
 | 0 failed
 | 0 execution errors
 | 0 missing tests

#+end_example

*** Common Lisp Word Count Tests
#+caption:Common Lisp Word Count Test Code
#+name:common-lisp-word-count-test-code
#+begin_src lisp :tangle common-lisp/word-count/word-count-test.lisp :mkdirp yes
;;;
;;; word-count v1.4.0
;;;
;;; For each word in the input, count the number of times it appears in the
;;; entire sentence.
;;;
(ql:quickload "lisp-unit" :silent t)
#-xlisp-test (load "word-count")

(defpackage #:word-count-test
  (:use #:common-lisp #:lisp-unit))
(in-package #:word-count-test)

(defun assert-alist-equal (expected actual)
  "The association lists must have the same length and the keys and
   values of the items must match. But the order is not
   important. Equality is tested with equal"
  (assert-equal
   (sort (copy-seq expected) #'string< :key #'car)
   (sort (copy-seq actual) #'string< :key #'car)))

(define-test
  count-one-word
  (assert-alist-equal
    '(("word" . 1))
    (word-count:count-words "word")))


(define-test
  count-one-of-each-word
  (assert-alist-equal
    '(("one" . 1) ("of" . 1) ("each" . 1))
    (word-count:count-words "one of each")))


(define-test
  multiple-occurrences-of-a-word
  (assert-alist-equal
    '(("one" . 1) ("fish" . 4) ("two" . 1) ("red" . 1) ("blue" . 1))
    (word-count:count-words "one fish two fish red fish blue fish")))


(define-test
  handles-cramped-lists
  (assert-alist-equal
    '(("one" . 1) ("two" . 1) ("three" . 1))
    (word-count:count-words "one,two,three")))


(define-test
  handles-expanded-lists
  (assert-alist-equal
    '(("one" . 1) ("two" . 1) ("three" . 1))
    (word-count:count-words "one,
two,
three")))


(define-test
  ignore-punctuation
  (assert-alist-equal
    '(("car" . 1) ("carpet" . 1) ("as" . 1) ("java" . 1) ("javascript" . 1))
    (word-count:count-words "car: carpet as java: javascript!!&@$%^&")))


(define-test
  include-numbers
  (assert-alist-equal
    '(("testing" . 2) ("1" . 1) ("2" . 1))
    (word-count:count-words "testing, 1, 2 testing")))


(define-test
  normalize-case
  (assert-alist-equal
    '(("go" . 3) ("stop" . 2))
    (word-count:count-words "go Go GO Stop stop")))


(define-test
  with-apostrophes
  (assert-alist-equal
    '(("first" . 1) ("don't" . 2) ("laugh" . 1) ("then" . 1) ("cry" . 1))
    (word-count:count-words "First: don't laugh. Then: don't cry.")))


(define-test
  with-quotations
  (assert-alist-equal
    '(("joe" . 1) ("can't" . 1) ("tell" . 1) ("between" . 1) ("large" . 2)
      ("and" . 1))
    (word-count:count-words "Joe can't tell between 'large' and large.")))


(define-test
  substrings-from-the-beginning
  (assert-alist-equal
    '(("joe" . 1) ("can't" . 1) ("tell" . 1) ("between" . 1) ("app" . 1)
      ("apple" . 1) ("and" . 1) ("a" . 1))
    (word-count:count-words "Joe can't tell between app, apple and a.")))


(define-test
  multiple-spaces-not-detected-as-a-word
  (assert-alist-equal
    '(("multiple" . 1) ("whitespaces" . 1))
    (word-count:count-words " multiple   whitespaces")))


(define-test
  alternating-word-separators-not-detected-as-a-word
  (assert-alist-equal
    '(("one" . 1) ("two" . 1) ("three" . 1))
    (word-count:count-words ",
,one,
 ,two
 'three'")))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all))

#+end_src
** Common Lisp Twelve Days
*** Common Lisp Twelve Days Readme and Meta
#+header: :mkdirp yes :tangle common-lisp/twelve-days/README.md
#+begin_src markdown
# Twelve Days

Output the lyrics to 'The Twelve Days of Christmas'.

```text
On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.

On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.

On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.

On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.
```

## Setup

Check out [Installing Common
Lisp](https://exercism.io/tracks/common-lisp/installation) for
instructions to get started or take a look at the guides available in
the [track's side bar](https://exercism.io/my/tracks/common-lisp).

## Formatting

While Common Lisp doesn't care about indentation and layout of code,
nor whether you use spaces or tabs, this is an important consideration
for submissions to exercism.io. Excercism.io's code widget cannot
handle mixing of tab and space characters well so using only spaces is recommended to make
the code more readable to the human reviewers. Please review your
editors settings on how to accomplish this. Below are instructions for
popular editors for Common Lisp.

### VIM

Use the following commands to ensure VIM uses only spaces for
indentation:

```vimscript
:set tabstop=2
:set shiftwidth=2
:set expandtab
```

(or as a oneliner `:set tabstop=2 shiftwidth=2 expandtab`). This can
be added to your `~/.vimrc` file to use it all the time.

### Emacs

Emacs is very well suited for editing Common Lisp and has many
powerful add-on packages available. The only thing that one needs to
do with a stock emacs to make it work well with exercism.io is to
evaluate the following code:

`(setq-default indent-tabs-mode nil)`

This can be placed in your `~/.emacs` (or `~/.emacs.d/init.el`) in
order to have it set whenever Emacs is launched.

One suggested add-on for Emacs and Common Lisp is
[SLIME](https://github.com/slime/slime) which offers tight integration
with the REPL; making iterative coding and testing very easy.

## Source

Wikipedia [http://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song)](http://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_(song))

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src
**** Common Lisp Twelve Days Exercism Metadata
#+header: :mkdirp yes :tangle common-lisp/twelve-days/.exercism/metadata
#+begin_src js
  {
      "track":"common-lisp",
      "exercise":"twelve-days",
      "id":"76d50a3a72f4491cb24d98b5f5e36b7f",
      "url":"https://exercism.io/my/solutions/76d50a3a72f4491cb24d98b5f5e36b7f",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src
*** Common Lisp Twelve Days Scripts
**** Common Lisp Twelve Days Download Script
#+begin_src sh
exercism download --exercise=twelve-days --track=common-lisp
#+end_src

#+RESULTS:
: /usr/local/dev/programming/Exercism/common-lisp/twelve-days

**** Common Lisp Twelve Days Upload Script
#+begin_src sh
exercism submit common-lisp/twelve-days/twelve-days.lisp
#+end_src
*** Common Lisp Twelve Days Code
#+header: :mkdirp yes :tangle common-lisp/twelve-days/twelve-days.lisp
#+begin_src lisp
  (in-package #:cl-user)
  (defpackage #:twelve-days
    (:use #:cl)
    (:export #:recite))

  (in-package #:twelve-days)

  (defconstant +GIFTS+
    '("a Partridge in a Pear Tree"
      "two Turtle Doves"
      "three French Hens"
      "four Calling Birds"
      "five Gold Rings"
      "six Geese-a-Laying"
      "seven Swans-a-Swimming"
      "eight Maids-a-Milking"
      "nine Ladies Dancing"
      "ten Lords-a-Leaping"
      "eleven Pipers Piping"
      "twelve Drummers Drumming"))

  (defun gift (day)
    "Given a number representing a day, return the corresponding gift
  for that day."
    (nth (1- day) +GIFTS+))

  (defun dayth (day)
    "Given  a number  representing  a  day, return  its  nth  form as  a
    string."
    "first")

  (defun recite (&optional begin end)
    "Returns a string of the requested verses for the 12 Days of Christmas."
    "")

#+end_src

#+header: :results output
#+header: :dir common-lisp/twelve-days
#+begin_src sh
ccl -l twelve-days-test.lisp -e '(quit)'
#+end_src

*** Common Lisp Twelve Days Tests
#+header: :mkdirp yes :tangle common-lisp/twelve-days/twelve-days-test.lisp
#+begin_src lisp
(ql:quickload "lisp-unit")
#-xlisp-test (load "twelve-days")

(defpackage #:twelve-days-test
  (:use #:common-lisp #:lisp-unit))

(in-package #:twelve-days-test)

(defvar verse1  "On the first day of Christmas my true love gave to me: a Partridge in a Pear Tree.")
(defvar verse2  "On the second day of Christmas my true love gave to me: two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse3  "On the third day of Christmas my true love gave to me: three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse4  "On the fourth day of Christmas my true love gave to me: four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse5  "On the fifth day of Christmas my true love gave to me: five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse6  "On the sixth day of Christmas my true love gave to me: six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse7  "On the seventh day of Christmas my true love gave to me: seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse8  "On the eighth day of Christmas my true love gave to me: eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse9  "On the ninth day of Christmas my true love gave to me: nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse10 "On the tenth day of Christmas my true love gave to me: ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse11 "On the eleventh day of Christmas my true love gave to me: eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")
(defvar verse12 "On the twelfth day of Christmas my true love gave to me: twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.")

(defun verse-mash (&rest verses)
  (format nil "~{~&~A~}" verses))

(define-test first_day_a_partridge_in_a_pear_tree
  (assert-equal verse1 (twelve-days:recite 1)))

(define-test second_day_two_turtle_doves
  (assert-equal verse2 (twelve-days:recite 2)))

(define-test third_day_three_french_hens
  (assert-equal verse3 (twelve-days:recite 3)))

(define-test fourth_day_four_calling_birds
  (assert-equal verse4 (twelve-days:recite 4)))

(define-test fifth_day_five_gold_rings
  (assert-equal verse5 (twelve-days:recite 5)))

(define-test sixth_day_six_geese_a_laying
  (assert-equal verse6 (twelve-days:recite 6)))

(define-test seventh_day_seven_swans_a_swimming
  (assert-equal verse7 (twelve-days:recite 7)))

(define-test eighth_day_eight_maids_a_milking
  (assert-equal verse8 (twelve-days:recite 8)))

(define-test ninth_day_nine_ladies_dancing
  (assert-equal verse9 (twelve-days:recite 9)))

(define-test tenth_day_ten_lords_a_leaping
  (assert-equal verse10 (twelve-days:recite 10)))

(define-test eleventh_day_eleven_pipers_piping
  (assert-equal verse11 (twelve-days:recite 11)))

(define-test twelfth_day_twelve_drummers_drumming
  (assert-equal verse12 (twelve-days:recite 12)))

(define-test recites_first_three_verses_of_the_song
  (assert-equal (verse-mash verse1 verse2 verse3)
                (twelve-days:recite 1 3)))

(define-test recites_three_verses_from_the_middle_of_the_song
  (assert-equal (verse-mash verse4 verse5 verse6)
                (twelve-days:recite 4 6)))

(define-test recites_the_whole_song
  (assert-equal (verse-mash verse1 verse2 verse3 verse4 verse5 verse6
                            verse7 verse8 verse9 verse10 verse11 verse12)
                (twelve-days:recite 1 12))
  (assert-equal (verse-mash verse1 verse2 verse3 verse4 verse5 verse6
                            verse7 verse8 verse9 verse10 verse11 verse12)
                (twelve-days:recite)))

#-xlisp-test
(let ((*print-errors* t)
      (*print-failures* t))
  (run-tests :all :twelve-days-test))

#+end_src

* Exercism Makefile
#+name:Exercism-Makefile
#+begin_src makefile :tangle Makefile
ORG := Exercism
BASE_DIR := $(shell cat ~/.config/exercism/user.json | sed -n '/workspace/ s///p' | tr -d '": ')
LANGUAGES = javascript typescript python perl5 ocaml bash elisp common-lisp
HTML_SRC = *.html
TEXINFO_SRC = *.{texi,info,pdf}
DVI_SRC = *.{aux,log,toc}

open-org:
	ecg $(ORG).org

.phony : texinfo-clean
texinfo-clean :
	cd $(BASE_DIR) && rm -vrf $(TEXINFO_SRC)
	rm -vrf $(TEXINFO_SRC)

.phony : html-clean
html-clean :
	cd $(BASE_DIR) && rm -vrf $(HTML_SRC)
	rm -vrf $(HTML_SRC)

.phony : dist-clean
dist-clean :
	cd $(BASE_DIR) && rm -vrf $(LANGUAGES) README.md $(DVI_SRC)
	rm -vrf $(LANGUAGES) README.md $(DVI_SRC)

.phony : world-clean
world-clean : dist-clean html-clean texinfo-clean
	rm Makefile

#+end_src

* Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Function Index
:PROPERTIES:
:index:    fn
:unnumbered: t
:END:

* Program Index
:PROPERTIES:
:unnumbered: t
:index:    pg
:END:

* Export Settings                                                  :noexport:
** Options
#+options: H:4
#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:t tex:t
** HTML Export
#+html_doctype: html5
#+html_container: div
#+description:Exercises from Exercism.io Python language
#+keywords:exercism.io exercises Python
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head:
#+html_head_extra:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.2.2)
#+latex_header:
** TEXINFO Export                                                 :noexport:
#+TEXINFO_FILENAME:Exercism.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:Languages
#+TEXINFO_DIR_TITLE:Exercism
#+TEXINFO_DIR_DESC:Learning new languages through exercises
#+TEXINFO_PRINTED_TITLE:Exercism Exercises
** MACROS                                                         :noexport:
#+macro: heading @@texinfo:@heading @@$1
#+macro: subheading @@texinfo:@subheading @@$1
#+macro: var @@texinfo:@var{@@$1@@texinfo:}@@
* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+[dD]ate:Last updated %:y-%02m-%02d %02H:%02M$"
# indent-tabs-mode: nil
# End:

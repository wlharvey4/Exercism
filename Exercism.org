# -*- mode:org; fill-column:79; -*-
#+Title:Exercism Exercises
#+Author:Pinecone062
#+Date:Last updated 2019-05-22 13:04
#+Macro: version Version 0.1.8
{{{title}}} {{{version}}} {{{date}}}
* Exercism Home
:PROPERTIES:
:unnumbered: t
:END:
- https://github.com/exercism

** Exercism Readme

#+name:Exercism-Readme
#+BEGIN_SRC txt :tangle README.md
  # Welcome to Exercism

  This is the central point of contact for Exercism.

  ## Where to open issues

  The project is divided across many repositories.

  #### The website or product

  If you have any issues or questions regarding **the website
  (https://exercism.io)** please [open an issue in this
  repository](https://github.com/exercism/exercism/issues). To report
  errors in the website copy or submit fixes for typos or other
  improvements, please see the
  [exercism/website-copy](https://github.com/exercism/website-copy/issues)
  repository.

  #### The Command-Line Client (CLI)

  For problems with the **Command-Line Client (CLI)**, open an issue in
  [exercism/cli](https://github.com/exercism/cli/issues).

  #### Exercises in a particular programming language

  The exercises are all in separate, language-specific
  repositories. These repositories are tagged with the topic
  [`#exercism-track`](https://github.com/search?q=topic%3Aexercism-track+org%3Aexercism&type=Repositories). From
  there, search for the track (programming language) you are
  participating in.

  ,**Unsure? Open your issue here**

  If you aren't sure where to open it, then pick this repository. It's
  as good a starting point as any!

  ## Feeling uncomfortable?

  If you need to report a code of conduct violation, please email us at team@exercism.io.

  ## Where to find the code

  The code for the website lives in [exercism/website](http://github.com/exercism/website).

  The code for the old website is in this repository, in the
  [v1.exercism.io](https://github.com/exercism/exercism/tree/v1.exercism.io)
  branch.

  ## Who's behind Exercism?

  Read about our Team on the site: https://exercism.io/team
#+end_src

** Exercism CLI
- https://github.com/exercism/cli

To install manually, download the appropriate version of exercism based on your
processor architecture at the [[https://github.com/exercism/cli/releases/latest][releases page]], then extract the archive and put
the binary in your path.

Check the installed version with:

#+BEGIN_SRC sh :results output :exports both
exercism version
#+END_SRC

#+RESULTS:
: exercism version 3.0.11

In order to configure the CLI, paste in the following text into your terminal:
: exercism configure --token=b4b5ab41-b448-4762-a5ce-452ccd2eff08

 You should see a notification from the CLI that a configuration file has been
 written.

#+begin_src txt
You have configured the Exercism command-line client:

Config dir:                       ~/.config/exercism
Token:         (-t, --token)      b4b5ab41-b448-4762-a5ce-452ccd2eff08
Workspace:     (-w, --workspace)  <path-to>/Exercism
API Base URL:  (-a, --api)        https://api.exercism.io/v1
#+end_src

** Exercism Tangle
This code extracts all of the Exercism files to disk upon Export.
#+name:exercism-tangle
#+BEGIN_SRC emacs-lisp :results output :exports both
(org-babel-tangle-file "Exercism.org")
#+END_SRC
* Python Exercism Track
- http://exercism.io/languages/python
- https://github.com/exercism/python

The Python code in this repo is meant to follow the [[https://www.python.org/dev/peps/pep-0008/][PEP8 style guide]] (a
stylized version http://pep8.org).

This repo uses [[http://flake8.readthedocs.org/en/latest/][flake8]] with default settings to enforce the coding standard.

** Python Exercism README
#+name:Readme-Python-track
#+begin_src txt :tangle python/README.md :mkdirp yes
# Exercism Python Track

[![Build Status](https://travis-ci.org/exercism/python.svg?branch=master)](https://travis-ci.org/exercism/python) [![Requirements Status](https://pyup.io/repos/github/exercism/python/shield.svg)](https://pyup.io/repos/github/exercism/python/)
[![Join the chat at https://gitter.im/exercism/python](https://badges.gitter.im/exercism/python.svg)](https://gitter.im/exercism/python?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Exercism exercises in Python


## Contributing Guide

Please see the [contributing guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md)


## Working on the Exercises

We welcome both improvements to the existing exercises and new exercises.
A list of missing exercise can be found here: https://github.com/exercism/python/issues/417#issuecomment-366040062


### Conventions

- We use minimalistic stub files for all exercises ([#272](https://github.com/exercism/python/issues/272)).
- We use `unittest` (Python Standard Library) and no 3rd-party-framework.
- We use the parameter order `self.assertEqual(actual, expected)` ([#440](https://github.com/exercism/python/issues/440)).
- We use context managers (`with self.assertRaises(\<exception type\>):`) for testing for exceptions ([#477](https://github.com/exercism/python/issues/477)).
- We use an established utility method to confirm that expected exceptions contain a non-empty message. This method must be included for any test class with an exception-based test case ([#1080](https://github.com/exercism/python/issues/1080#issuecomment-442068539)).
- We use `assertIs(actual, True)` and `assertIs(actual, False)` rather than `assertTrue(actual)` or `assertFalse(actual)` ([#419](https://github.com/exercism/python/pull/419)).
- We use a comment string in the test file to reference the version of the exercise's `canonical-data.json` that tests were adapted from (wording can be found in: [#784](https://github.com/exercism/python/issues/784)).


### Testing

All exercises must be compatible with Python versions 2.7 and 3.4 upwards.

To test a single exercise (e.g., with Python 2.7):
```
python2.7 test/check-exercises.py [exercise-name]
```

To test all exercises (e.g., with Python 3):
```
python3 test/check-exercises.py
```


### Code Style

The Python code in this repo is meant to follow the [PEP8 style guide](https://www.python.org/dev/peps/pep-0008/) (a stylized version http://pep8.org).

This repo uses [flake8](http://flake8.readthedocs.org/en/latest/) with default settings to enforce the coding standard.


### CI build

This repo uses `travis-ci` in the following configuration: [travis.yml](https://github.com/exercism/python/blob/master/.travis.yml)

It will automatically check the code style, the problem configuration, and run the unittests with all supported Python versions.


## Pull Requests

We :heart: pull requests!
We even :sparkling_heart: them if they contain well written commit messages!

Please write the first line of your commit message in the following style:

```exercise-name: Change some things```

Please try to follow the [The seven rules of a great Git commit message](https://chris.beams.io/posts/git-commit/#seven-rules) like to capitalize the subject line and use the imperative mood. If there are more details to add, put those into the body of the commit message.

If you're interested, Tim Pope even has an [entire blog post](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) on good commit messages.

If you're new to Git, take a look at [this short guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md#git-basics).

## License
This repository uses the [MIT License](/LICENSE).
#+end_src

** Python Hello World
Write a function that returns the string "Hello, World!"

You can tell Python to run the ~pytest~ module (allowing the same command to be
used regardless of Python version):

: python -m pytest hello_world_test.py

Changed computer or want to re-download the exercise after updating to the
latest version? Use this command:

: exercism download --exercise=hello-world --track=python

: Downloaded to
: /usr/local/dev/programming/Exercism/python/hello-world

*** Python Hello World Solution

#+name:hello_world.py
#+begin_src python -n :tangle python/hello-world/hello_world.py :mkdirp yes
def hello():
    return "Hello, World!"
#+end_src

#+name:python-hello-world-metadata
#+BEGIN_SRC js :tangle python/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"hello-world",
    "id":"86a587c4d6e34a078741d6be1edce608",
    "url":"https://exercism.io/my/solutions/86a587c4d6e34a078741d6be1edce608",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** Python Hello World Test

#+name:Python-Hello-World-Test
#+begin_src python :tangle python/hello-world/hello_world_test.py :mkdirp yes
import unittest

import hello_world

# Tests adapted from `problem-specifications//canonical-data.json` @ v1.1.0

class HelloWorldTest(unittest.TestCase):
    def test_hello(self):
        self.assertEqual(hello_world.hello(), 'Hello, World!')


if __name__ == '__main__':
    unittest.main()
#+end_src

#+name:python-hello-world-test
#+begin_src sh :dir python/hello-world :results output :exports both
python3 -m pytest hello_world_test.py
#+end_src

#+RESULTS: python-hello-world-test
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/hello-world
: collected 1 item
: 
: hello_world_test.py .                                                    [100%]
: 
: =========================== 1 passed in 0.10 seconds ===========================

** Python Two Fer
Two-fer or 2-fer is short for two for one. One for you and one for me.

: "One for X, one for me."

When X is a name or "you".

If the given name is "Alice", the result should be "One for Alice, one for me."
If no name is given, the result should be "One for you, one for me."

To run the tests:
: python3 -m pytest two_fer_test.py

*** Python Two Fer Solution
#+name:Two-Fer-Solution
#+begin_src python -n :tangle python/two-fer/two_fer.py :mkdirp yes
def two_fer(name="you"):
    return f"One for {name}, one for me."
#+end_src

#+begin_src sh :dir python/two-fer :results output
python3 -m pytest two_fer_test.py
#+end_src

#+RESULTS:
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/two-fer
: collected 3 items
: 
: two_fer_test.py ...                                                      [100%]
: 
: =========================== 3 passed in 0.02 seconds ===========================

#+name:python-two-fer-metadata
#+BEGIN_SRC js :tangle python/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"two-fer",
    "id":"80dbb050e4f041efa796149983871746",
    "url":"https://exercism.io/my/solutions/80dbb050e4f041efa796149983871746",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

*** Python Two Fer Test
#+name:Python-Two-Fer-Test
#+begin_src python :tangle python/two-fer/two_fer_test.py :mkdirp yes
import unittest

from two_fer import two_fer


# Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0

class TwoFerTest(unittest.TestCase):
    def test_no_name_given(self):
        self.assertEqual(two_fer(), 'One for you, one for me.')

    def test_a_name_given(self):
        self.assertEqual(two_fer("Alice"), "One for Alice, one for me.")

    def test_another_name_given(self):
        self.assertEqual(two_fer("Bob"), "One for Bob, one for me.")


if __name__ == '__main__':
    unittest.main()
#+end_src

#+begin_src sh :dir python/two-fer :results output :exports both
python3 -m pytest two_fer_test.py
#+end_src

#+RESULTS:
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/two-fer
: collected 3 items
: 
: two_fer_test.py ...                                                      [100%]
: 
: =========================== 3 passed in 0.06 seconds ===========================

** High Scores
:PROPERTIES:
:level:    easy
:END:

*** Task for High Scores
Manage a game player's High Score list.

Your task is to build a high-score component of the classic Frogger game, one
of the highest selling and addictive games of all time, and a classic of the
arcade era.  Your task is to write methods that return the highest score from
the list, the last added score, the three highest scores, and a report on the
difference between the last and the highest scores.

*** Readme for High Scores

#+name:High_Scores_Python_Readme
#+begin_src txt :tangle python/high-scores/README.md :mkdirp yes
  # High Scores

  Manage a game player's High Score list.

  Your task is to build a high-score component of the classic Frogger
  game, one of the highest selling and addictive games of all time, and
  a classic of the arcade era. Your task is to write methods that return
  the highest score from the list, the last added score, the three
  highest scores, and a report on the difference between the last and
  the highest scores.

  ## Submitting Exercises

  Note that, when trying to submit an exercise, make sure the solution
  is in the `exercism/python/<exerciseName>` directory.

  For example, if you're submitting `bob.py` for the Bob exercise, the
  submit command would be something like `exercism submit
  <path_to_exercism_dir>/python/bob/bob.py`.


  For more detailed information about running tests, code style and linting,
  please see the [help page](http://exercism.io/languages/python).

  ## Source

  Tribute to the eighties' arcade game Frogger

  ## Submitting Incomplete Solutions
  It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+end_src

*** Python High Scores Code
#+name:High_Scores_Python
#+begin_src python -n :tangle python/high-scores/high_scores.py :mkdirp yes
class HighScores(object):
    def __init__(self, scores):
        self.scores = scores

    def latest(self):
        return self.scores[-1]

    def personal_best(self):
        best = 0
        for score in self.scores:
            if score > best:
                best = score

        return best

    def personal_top(self):
        pt = self.scores[:]
        pt.sort(reverse=True)
        return pt[:3]

    def report(self):
        latest = self.scores[-1]
        best = self.personal_best()
        report = f"Your latest score was {latest}. "
        if latest == best:
            report += f"That's your personal best!"
        else:
            report += f"That's {best - latest} short of your personal best!"

        return report
#+end_src

#+name:python-high-scores-metadata
#+BEGIN_SRC js :tangle python/high-scores/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"python",
    "exercise":"high-scores",
    "id":"485c09d00b054d51b421c3d06a7cec30",
    "url":"https://exercism.io/my/solutions/485c09d00b054d51b421c3d06a7cec30",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
p}
#+END_SRC

*** Python High Scores Test
#+name:High_Scores_Python_Test
#+begin_src python :tangle python/high-scores/high_scores_test.py :mkdirp yes
import unittest

from high_scores import HighScores


# Tests adapted from `problem-specifications//canonical-data.json` @ v2.0.0


class HighScoreTest(unittest.TestCase):
    def test_list_of_scores(self):
        scores = [30, 50, 20, 70]
        expected = [30, 50, 20, 70]
        self.assertEqual(HighScores(scores).scores, expected)

    def test_latest_score(self):
        scores = [100, 0, 90, 30]
        expected = 30
        self.assertEqual(HighScores(scores).latest(), expected)

    def test_personal_best(self):
        scores = [40, 100, 70]
        expected = 100
        self.assertEqual(HighScores(scores).personal_best(), expected)

    def test_personal_top(self):
        scores = [50, 30, 10]
        expected = [50, 30, 10]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_highest_to_lowest(self):
        scores = [20, 10, 30]
        expected = [30, 20, 10]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_when_there_is_a_tie(self):
        scores = [40, 20, 40, 30]
        expected = [40, 40, 30]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_when_there_are_less_than_3(self):
        scores = [30, 70]
        expected = [70, 30]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_when_there_is_only_one(self):
        scores = [40]
        expected = [40]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_personal_top_from_a_long_list(self):
        scores = [10, 30, 90, 30, 100, 20, 10, 0, 30, 40, 40, 70, 70]
        expected = [100, 90, 70]
        self.assertEqual(HighScores(scores).personal_top(), expected)

    def test_message_for_new_personal_best(self):
        scores = [20, 40, 0, 30, 70]
        expected = "Your latest score was 70. That's your personal best!"
        self.assertEqual(HighScores(scores).report(), expected)

    def test_message_when_latest_score_is_not_the_highest_score(self):
        scores = [20, 100, 0, 30, 70]
        expected = (
            "Your latest score was 70. That's 30 short of your personal best!"
        )
        self.assertEqual(HighScores(scores).report(), expected)

    def test_message_for_repeated_personal_best(self):
        scores = [20, 70, 50, 70, 30]
        expected = (
            "Your latest score was 30. That's 40 short of your personal best!"
        )
        self.assertEqual(HighScores(scores).report(), expected)


if __name__ == "__main__":
    unittest.main()
#+end_src

#+name:Test_High_Score_Python
#+begin_src sh :dir python/high-scores :results output :exports both
python3 -m pytest high_scores_test.py
#+end_src

#+RESULTS: Test_High_Score_Python
: ============================= test session starts ==============================
: platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
: rootdir: /usr/local/dev/programming/Languages/Exercism/python/high-scores
: collected 12 items
: 
: high_scores_test.py ............                                         [100%]
: 
: ========================== 12 passed in 0.08 seconds ===========================

* Perl5 Exercism Track
** Perl5 Hello World
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" (https://en.wikipedia.org/wiki/%22Hello%2c_World!%22_program)
is the traditional first program for beginning programming in a new language or
environment.

{{{heading(Objectives)}}}

The objectives are simple:
- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** Perl5 Hello World Readme
#+name:perl5-hello-world-readme
#+BEGIN_SRC txt :tangle perl5/README.md :mkdirp yes
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.
## Source

This is an exercise to introduce users to using Exercism
[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+END_SRC

*** Perl5 Hello World Solution
#+name:perl5-hello-world-code
#+BEGIN_SRC perl -n :tangle perl5/hello-world/lib/HelloWorld.pm :mkdirp yes
# Declare package 'HelloWorld'
package HelloWorld;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(hello);

sub hello {
  return "Hello, World!";
}

1;
#+END_SRC

#+name:perl5-hello-world-metadata
#+header: :exports none
#+BEGIN_SRC js :tangle perl5/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"perl5",
    "exercise":"hello-world",
    "id":"55fe9523b94f4e1b9a0b7f8a438d0e45",
    "url":"https://exercism.io/my/solutions/55fe9523b94f4e1b9a0b7f8a438d0e45",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** Perl5 Hello World Test
#+name:perl5-hello-world-test
#+BEGIN_SRC perl -n :tangle perl5/hello-world/t/hello-world.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 2; # This is how many tests we expect to run.
use lib './lib';
use HelloWorld qw(hello);

can_ok 'HelloWorld', 'import' or BAIL_OUT 'Cannot import subroutines from module';

# Run the 'is' subroutine from the 'Test::More' module, with three arguments.
is(
  hello,           # Run the 'hello' subroutine, which is imported from your module.
  'Hello, World!', # The expected result to compare with 'hello'.
  'Say Hi!'        # The test description.
);
#+END_SRC

#+name:perl5-hello-world-run-test
#+BEGIN_SRC sh :dir perl5/hello-world :results output :exports both
prove ./t
#+END_SRC

#+RESULTS: perl5-hello-world-run-test
: t/hello-world.t .. ok
: All tests successful.
: Files=1, Tests=2,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.03 cusr  0.00 csys =  0.05 CPU)
: Result: PASS
** Perl5 Two Fer
"Two-fer" or "2-fer" is short for "two for one.  One for you and one for me."

{{{heading(Objective)}}}

Given a name, return a string with the message:
: One for X, one for me.
Where 'X' is the given name.

However, if the name is missing, return the string:
: One for you, one for me.

*** Perl5 Two Fer Readme
#+name:perl5-two-fer-readme
#+BEGIN_SRC txt :tangle perl5/two-fer/README.md :mkdirp yes
# Two Fer

`Two-fer` or `2-fer` is short for two for one. One for you and one for me.

Given a name, return a string with the message:

```text
One for X, one for me.
```

Where X is the given name.

However, if the name is missing, return the string:

```text
One for you, one for me.
```

Here are some examples:

|Name    | String to return 
|:------:|:-----------------: 
|Alice   | One for Alice, one for me. 
|Bob     | One for Bob, one for me.
|        | One for you, one for me.
|Zaphod  | One for Zaphod, one for me.
## Source

[https://github.com/exercism/problem-specifications/issues/757](https://github.com/exercism/problem-specifications/issues/757)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
#+END_SRC
*** Perl5 Two Fer Solution

#+CINDEX:defined-or operator (@code{//})
#+CINDEX:@code{//}, defined-or operator
The defined-or operator, =//=, tests the definedness of its operand.  Unlike
=||=, which tests the truth of its operand, =//= evaluates to a =true= value
even if its operand evaluates to a numeric zero or the empty string.  This is
especially useful for setting default parameter values.

#+name:perl5-two-fer-solution
#+BEGIN_SRC perl -n :tangle perl5/two-fer/lib/TwoFer.pm :mkdirp yes
package TwoFer;
use strict;
use warnings;
use Exporter 'import';
our @EXPORT_OK = qw(two_fer);

sub two_fer {
  return "One for ". eval {pop // "you"}. ", one for me.";
}

1;
#+END_SRC

#+name:perl5-two-fer-metadata
#+header: :exports none
#+BEGIN_SRC js :tangle perl5/two-fer/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"perl5",
    "exercise":"two-fer",
    "id":"4acecc77f2324da5aa5c59e52c0c0a6a",
    "url":"https://exercism.io/my/solutions/4acecc77f2324da5aa5c59e52c0c0a6a",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

*** Perl5 Two Fer Test
#+perl5-two-fer-test
#+BEGIN_SRC perl -n :tangle perl5/two-fer/t/two-fer.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 4;
use JSON::PP;
use lib './lib';
use TwoFer qw(two_fer);

can_ok 'TwoFer', 'import' or BAIL_OUT 'Cannot import subroutines from module';

my $C_DATA = do { local $/; decode_json(<DATA>); };
foreach my $case (@{$C_DATA->{cases}}) {
  is two_fer($case->{input}{name}), $case->{expected}, $case->{description};
}

__DATA__
{
  "exercise": "two-fer",
  "version": "1.2.0",
  "cases": [
    {
      "description": "no name given",
      "property": "twoFer",
      "input": {
        "name": null
      },
      "expected": "One for you, one for me."
    },
    {
      "description": "a name given",
      "property": "twoFer",
      "input": {
        "name": "Alice"
      },
      "expected": "One for Alice, one for me."
    },
    {
      "description": "another name given",
      "property": "twoFer",
      "input": {
        "name": "Bob"
      },
      "expected": "One for Bob, one for me."
    }
  ]
}
#+END_SRC

#+name:perl5-two-fer-run-test
#+BEGIN_SRC sh :dir perl5/two-fer :results output :exports both
prove ./t
#+END_SRC

#+RESULTS: perl5-two-fer-run-test
: t/two-fer.t .. ok
: All tests successful.
: Files=1, Tests=4,  0 wallclock secs ( 0.01 usr  0.01 sys +  0.05 cusr  0.00 csys =  0.07 CPU)
: Result: PASS

** Perl5 Bob
*** Perl5 Bob Introduction
Bob is a lackadaisical teenager. In conversation, his responses are very
limited.

Bob answers 'Sure.' if you ask him a question.

He answers 'Whoa, chill out!' if you yell at him.

He answers 'Calm down, I know what I'm doing!' if you yell a question at him.

He says 'Fine. Be that way!' if you address him without actually saying
anything.

He answers 'Whatever.' to anything else.

Bob's conversational partner is a purist when it comes to written communication
and always follows normal rules regarding sentence punctuation in English.

*** Perl5 Bob Inspirational Source
Inspired by the 'Deaf Grandma' exercise in Chris Pine's Learn to Program
tutorial:
- http://pine.fm/LearnToProgram/?Chapter=06

*** Perl5 Bob How to Download
#+name:Perl5-Bob-Download
#+begin_src sh :dir perl5
exercism download --exercise=bob --track=perl5
#+end_src

#+RESULTS: Perl5-Bob-Download
: /usr/local/dev/programming/Languages/Exercism/perl5/bob

*** Perl5 Bob Solution
#+name:Perl5-Bob-Solution
#+begin_src perl -n :tangle perl5/bob/lib/Bob.pm :mkdirp yes
  # Declare package 'Bob'
  package Bob;
  use strict;
  use warnings;
  use Exporter 'import';
  our @EXPORT_OK = qw(hey);

  sub hey {
    my ($msg) = @_;

    if ($msg =~ /^[\p{Space}]{0,}$/) {
        return "Fine. Be that way!";
    }

    if ($msg =~ /^[\p{UPPERCASE_LETTER}]+[\p{UPPERCASE}\p{NUMBER}\s,%^*@#$(^!]*!?$/) {
        return "Whoa, chill out!";
    }

    if ($msg =~ /[\p{UPPERCASE_LETTER}\p{NUMBER}\s,%^*@#$(^!]*[\p{UPPERCASE_LETTER}]+!?$/) {
        return "Whoa, chill out!";
    }

    if ($msg =~ /^[\p{UPPERCASE_LETTER}\s]*[?]$/) {
        return "Calm down, I know what I'm doing!";
    }

    if ($msg =~ /^[\p{LETTER}\p{NUMBER},\s]*$/) {
        return "Whatever.";
    }

    if ($msg =~ /[\p{LETTER}\p{NUMBER}?]\s{0,}$/) {
        return "Sure.";
    }

    if ($msg !~ /\p{LETTER}/) {
        return "Whatever.";
    }

    return "Whatever.";
  }

  1;
#+end_src

#+name:Perl5-Bob-Metadata
#+begin_src js :tangle perl5/bob/.exercism/metadata.json :mkdirp yes :exports none
  {
      "track":"perl5",
      "exercise":"bob",
      "id":"08f0b7ecdadd47f8a9baa2910b6558fc",
      "url":"https://exercism.io/my/solutions/08f0b7ecdadd47f8a9baa2910b6558fc",
      "handle":"wlharvey4",
      "is_requester":true,
      "auto_approve":false
  }
#+end_src

*** Perl5 Bob Test
#+name:Perl5-Bob-Tests
#+begin_src perl :tangle perl5/bob/t/bob.t :mkdirp yes
#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 26; # This is how many tests we expect to run.
use JSON::PP;
use lib './lib';
use Bob qw(hey);

can_ok 'Bob', 'import' or BAIL_OUT 'Cannot import subroutines from module';

my $C_DATA = do { local $/; decode_json(<DATA>); };
is hey($_->{input}{heyBob}), $_->{expected}, $_->{description} foreach @{$C_DATA->{cases}};

__DATA__
{
  "exercise": "bob",
  "version": "1.4.0",
  "cases": [
    {
      "description": "stating something",
      "property": "response",
      "input": {
        "heyBob": "Tom-ay-to, tom-aaaah-to."
      },
      "expected": "Whatever."
    },
    {
      "description": "shouting",
      "property": "response",
      "input": {
        "heyBob": "WATCH OUT!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "shouting gibberish",
      "property": "response",
      "input": {
        "heyBob": "FCECDFCAAB"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "asking a question",
      "property": "response",
      "input": {
        "heyBob": "Does this cryogenic chamber make me look fat?"
      },
      "expected": "Sure."
    },
    {
      "description": "asking a numeric question",
      "property": "response",
      "input": {
        "heyBob": "You are, what, like 15?"
      },
      "expected": "Sure."
    },
    {
      "description": "asking gibberish",
      "property": "response",
      "input": {
        "heyBob": "fffbbcbeab?"
      },
      "expected": "Sure."
    },
    {
      "description": "talking forcefully",
      "property": "response",
      "input": {
        "heyBob": "Let's go make out behind the gym!"
      },
      "expected": "Whatever."
    },
    {
      "description": "using acronyms in regular speech",
      "property": "response",
      "input": {
        "heyBob": "It's OK if you don't want to go to the DMV."
      },
      "expected": "Whatever."
    },
    {
      "description": "forceful question",
      "property": "response",
      "input": {
        "heyBob": "WHAT THE HELL WERE YOU THINKING?"
      },
      "expected": "Calm down, I know what I'm doing!"
    },
    {
      "description": "shouting numbers",
      "property": "response",
      "input": {
        "heyBob": "1, 2, 3 GO!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "no letters",
      "property": "response",
      "input": {
        "heyBob": "1, 2, 3"
      },
      "expected": "Whatever."
    },
    {
      "description": "question with no letters",
      "property": "response",
      "input": {
        "heyBob": "4?"
      },
      "expected": "Sure."
    },
    {
      "description": "shouting with special characters",
      "property": "response",
      "input": {
        "heyBob": "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "shouting with no exclamation mark",
      "property": "response",
      "input": {
        "heyBob": "I HATE THE DMV"
      },
      "expected": "Whoa, chill out!"
    },
    {
      "description": "statement containing question mark",
      "property": "response",
      "input": {
        "heyBob": "Ending with ? means a question."
      },
      "expected": "Whatever."
    },
    {
      "description": "non-letters with question",
      "property": "response",
      "input": {
        "heyBob": ":) ?"
      },
      "expected": "Sure."
    },
    {
      "description": "prattling on",
      "property": "response",
      "input": {
        "heyBob": "Wait! Hang on. Are you going to be OK?"
      },
      "expected": "Sure."
    },
    {
      "description": "silence",
      "property": "response",
      "input": {
        "heyBob": ""
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "prolonged silence",
      "property": "response",
      "input": {
        "heyBob": "          "
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "alternate silence",
      "property": "response",
      "input": {
        "heyBob": "\t\t\t\t\t\t\t\t\t\t"
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "multiple line question",
      "property": "response",
      "input": {
        "heyBob": "\nDoes this cryogenic chamber make me look fat?\nNo."
      },
      "expected": "Whatever."
    },
    {
      "description": "starting with whitespace",
      "property": "response",
      "input": {
        "heyBob": "         hmmmmmmm..."
      },
      "expected": "Whatever."
    },
    {
      "description": "ending with whitespace",
      "property": "response",
      "input": {
        "heyBob": "Okay if like my  spacebar  quite a bit?   "
      },
      "expected": "Sure."
    },
    {
      "description": "other whitespace",
      "property": "response",
      "input": {
        "heyBob": "\n\r \t"
      },
      "expected": "Fine. Be that way!"
    },
    {
      "description": "non-question ending with whitespace",
      "property": "response",
      "input": {
        "heyBob": "This is a statement ending with whitespace      "
      },
      "expected": "Whatever."
    }
  ]
}

#+end_src

#+name:Perl5-Bob-Run-Tests
#+begin_src sh :dir perl5/bob :results output :exports both
prove ./t
#+end_src

#+RESULTS: Perl5-Bob-Run-Tests
: t/bob.t .. ok
: All tests successful.
: Files=1, Tests=26,  0 wallclock secs ( 0.01 usr  0.01 sys +  0.06 cusr  0.00 csys =  0.08 CPU)
: Result: PASS

* OCaml Exercism Track
** OCaml Getting Started
To work on the exercises, you will need =Opam= and =Base=.  Consult [[https://opam.ocaml.org/][opam]]
website for instructions on how to install =opam= for your OS.

#+name:ocaml-version-info
#+BEGIN_SRC sh :results output :exports both
opam --version
opam switch
ocaml --version
#+END_SRC

#+RESULTS: ocaml-version-info
: 2.0.4
: #  switch               compiler                    description
:    default              ocaml-base-compiler.4.07.0  default
: →  ocaml-base-compiler  ocaml-base-compiler.4.07.1  ocaml-base-compiler
: The OCaml toplevel, version 4.07.1

Once =opam= is installed open a terminal window and run the following command
to install =base= and =core_kernel=:

: opam install base core_kernel

To run the tests you will need =OUnit=.  Install it using =opam=:

: opam install ounit

*** OCaml Installation
- https://exercism.io/tracks/ocaml/installation


1. Install the OCaml compiler (ocaml) and package manager (opam).

   The excellent [[https://realworldocaml.org/][Real World OCaml]] book has [[https://github.com/realworldocaml/book/wiki/Installation-Instructions][installation instructions]] for a
   variety of operating systems.

2. If you followed the instructions from Real World OCaml, it is likely that
   your system's OCaml compiler is not the latest version.  To see a list of
   available versions and the one you have currently installed, run:

   : opam switch

   Note which version is the latest and install it by running:

   : opam switch <version-number>

   For example, if the latest version is 4.07.0, you will run:

   : opam switch 4.07.0

3. Install the =Core_kernel=, =Base= and =OUnit= packages, which are necessary in
   order to run the exercise tests:

   : opam install base core_kernel ounit

*** OCaml Running Tests
Because OCaml is a compiled language you need to compile your submission and
the test code before you can run the tests.  We use =jbuilder= to build.  Each
folder has a =jbuild= file specifying how to build and also a Makefile which
delegates to =jbuild=.

A Makefile is provided with a default target to compile your solution and run
the tests.  At the command line, type:

: make

*** OCaml Interactive Shell
=utop= is a command line program which allows you to run OCaml code
interactively.  The easiest way to install it is via =opam=:

: opam install utop

Consult utop for more detail.
*** OCaml Learning Resources

- [[http://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html][Documentation for the Standard Library]]

- [[https://ocaml.janestreet.com/][OCaml at JaneStreet]]

- [[https://ocaml.janestreet.com/ocaml-core/latest/doc/core/index.html][Documentation for the Core Library]]

- [[http://caml.inria.fr/resources/doc/guides/guidelines.en.html][Caml programming guidelines]]


OCaml's documentation is spread over multiple projects and can be hard to find
because there is what is sometimes called the "standard" library (the rather
minimal library that comes with the compiler) and a "Core" library (a separate
project by Jane Street that aims to provide a more complete and consistent
standard library).

Confusingly the standard library is sometimes referred to as the "core" library
(though rarely as the Core library).

The Core library from Jane Street is required for a few exercises, but can be
useful for all.  It's divided into three
- Base
- Core_kernel
- Core


each extending the previous.  Base is all you'll need for most exercises, but
for a few (using dates for instance, Core_kernel is needed).  To use Core, put
~open Base~ or ~open Core_kernel~ at the top of your code.

There are some subtle and not so subtle differences between the standard
library =List= module and Core's =List=.  A piece of advice: focus on the Core
library and ignore the standard library unless you really can't find what you
need in Core.

** OCaml Hello World
*** OCaml Hello World Download
#+name:ocaml-hello-world-download
#+BEGIN_SRC sh :results output :exports code
exercism download --exercise=hello-world --track=ocaml
#+END_SRC

#+RESULTS: ocaml-hello-world-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/hello-world

*** OCaml Hello World Instruction
The classical introductory exercise. Just say "Hello, World!".

"Hello, World!" is the traditional first program for beginning programming in a
new language or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".

- Run the test suite and make sure that it succeeds.

- Submit your solution and check it at the website.


If everything goes well, you will be ready to fetch your first real exercise.

*** OCaml Hello World README
#+name:ocaml-hello-world-README
#+BEGIN_SRC markdown :tangle ocaml/hello-world/README.md
# Hello World

The classical introductory exercise. Just say "Hello, World!".

["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is
the traditional first program for beginning programming in a new language
or environment.

The objectives are simple:

- Write a function that returns the string "Hello, World!".
- Run the test suite and make sure that it succeeds.
- Submit your solution and check it at the website.

If everything goes well, you will be ready to fetch your first real exercise.

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`. Consult
[opam](https://opam.ocaml.org) website for instructions on how to
install `opam` for your OS. Once `opam` is installed open a terminal
window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution
and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run OCaml code
interactively. The easiest way to install it is via opam:

```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the OCaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

This is an exercise to introduce users to using Exercism
[http://en.wikipedia.org/wiki/%22Hello,_world!%22_program](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how
others have completed the exercise.
#+END_SRC

*** OCaml Hello World Solution
#+name:ocaml-hello-world-solution
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/hello_world.ml :mkdirp yes
let hello = "Hello, World!"
#+END_SRC

#+name:ocaml-hello-world-solution-interface
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/hello_world.mli :mkdirp yes
(*
   Returns "Hello, World!"
*)
val hello: string
#+END_SRC

#+name:ocaml-hello-world-metadata
#+BEGIN_SRC js :tangle ocaml/hello-world/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"hello-world",
    "id":"87d3187606a5489eb60b63cbf0ec9af4",
    "url":"https://exercism.io/my/solutions/87d3187606a5489eb60b63cbf0ec9af4",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":true
}
#+END_SRC

*** OCaml Hello World Tests
#+name:ocaml-hello-world-tests
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/test.ml :mkdirp yes
open OUnit2
open Hello_world

let ae exp got _test_ctxt = assert_equal ~printer:(fun x -> x) exp got

let tests = [
     "Say Hi!" >:: ae "Hello, World!" hello;
]

let () =
  run_test_tt_main ("Hello World tests" >::: tests)
#+END_SRC

{{{heading(Testing OCaml Hello World)}}}

#+name:ocaml-hello-world-run-tests
#+BEGIN_SRC sh :dir ocaml/hello-world :results output :exports results
echo Running OCaml tests now...
make 2>&1
#+END_SRC

#+RESULTS: ocaml-hello-world-run-tests
: Running OCaml tests now...
: make clean...
: dune clean
: make test...
: dune runtest
:         test alias runtest
: .
: Ran: 1 tests in: 0.11 seconds.
: OK

*** OCaml Hello World Dune Project
#+name:ocaml-hello-world-dune
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+END_SRC

#+name:ocaml-hello-world-dune-project
#+BEGIN_SRC ocaml :tangle ocaml/hello-world/dune-project :mkdirp yes
(lang dune 1.1)
#+END_SRC

*** OCaml Hello World Makefile
#+name:ocaml-hello-world-makefile
#+BEGIN_SRC make :tangle ocaml/hello-world/Makefile :mkdirp yes
default: clean test

test:
	@echo make test...
	dune runtest

clean:
	@echo make clean...
	dune clean

.PHONY: clean
#+END_SRC

** OCaml Leap

*** OCaml Leap Download
#+name:ocaml-leap-download
#+BEGIN_SRC sh :results output
exercism download --exercise=leap --track=ocaml
#+END_SRC

#+RESULTS: ocaml-leap-download
: /Users/pine/Dev/Programming/Languages/Exercism/ocaml/leap

*** OCaml Leap README
#+name:ocaml-leap-readme
#+BEGIN_SRC markdown
# Leap

Given a year, report if it is a leap year.

The tricky thing here is that a leap year in the Gregorian calendar occurs:

```text
on every year that is evenly divisible by 4
  except every year that is evenly divisible by 100
    unless the year is also evenly divisible by 400
```

For example, 1997 is not a leap year, but 1996 is.  1900 is not a leap
year, but 2000 is.

If your language provides a method in the standard library that does
this look-up, pretend it doesn't exist and implement it yourself.

## Notes

Though our exercise adopts some very simple rules, there is more to
learn!

For a delightful, four minute explanation of the whole leap year
phenomenon, go watch [this youtube video][video].

[video]: http://www.youtube.com/watch?v=xX96xng7sAE

## Getting Started
For installation and learning resources, refer to the
[exercism help page](http://exercism.io/languages/ocaml).

## Installation
To work on the exercises, you will need `Opam` and `Base`.  Consult
[opam](https://opam.ocaml.org) website for instructions on how to
install `opam` for your OS.  Once `opam` is installed open a terminal
window and run the following command to install base:

```bash
opam install base
```

To run the tests you will need `OUnit`. Install it using `opam`:

```bash
opam install ounit
```

## Running Tests
A Makefile is provided with a default target to compile your solution and run the tests. At the command line, type:

```bash
make
```

## Interactive Shell
`utop` is a command line program which allows you to run Ocaml code interactively. The easiest way to install it is via opam:
```bash
opam install utop
```
Consult [utop](https://github.com/diml/utop/blob/master/README.md) for more detail.

## Feedback, Issues, Pull Requests
The [exercism/ocaml](https://github.com/exercism/ocaml) repository on
GitHub is the home for all of the Ocaml exercises.

If you have feedback about an exercise, or want to help implementing a new
one, head over there and create an issue.  We'll do our best to help you!

## Source

JavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)

## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.

#+END_SRC

*** OCaml Leap Solution
#+name:ocaml-leap-solution
#+BEGIN_SRC ocaml :tangle ocaml/leap/leap.ml :mkdirp yes
open Base

let leap_year year =
  let year = Float.of_int year in
  let even_div div_num =
    if (Float.compare (Float.Parts.fractional (Float.modf div_num)) 0.) = 0 then
      true else false in
  let div_by_4   = even_div (year /. 4.) in
  let div_by_100 = even_div (year /. 100.) in
  let div_by_400 = even_div (year /. 400.) in
  div_by_4 && ((not div_by_100) || div_by_400);;
#+END_SRC

#+name:ocaml-leap-solution-interface
#+BEGIN_SRC ocaml :tangle ocaml/leap/leap.mli :mkdirp yes
val leap_year: int -> bool
#+END_SRC

#+name:ocaml-leap-metadata
#+BEGIN_SRC js :tangle ocaml/leap/.exercism/metadata.json :mkdirp yes :exports none
{
    "track":"ocaml",
    "exercise":"leap",
    "id":"e02b0d61e88c451897a35598f9023b70",
    "url":"https://exercism.io/my/solutions/e02b0d61e88c451897a35598f9023b70",
    "handle":"wlharvey4",
    "is_requester":true,
    "auto_approve":false
}
#+END_SRC

#+name:ocaml-leap-solution-submit
#+BEGIN_SRC sh
exercism submit ocaml/leap/leap.ml
#+END_SRC

#+RESULTS: ocaml-leap-solution-submit
: https://exercism.io/my/solutions/e02b0d61e88c451897a35598f9023b70

*** OCaml Leap Tests
#+name:ocaml-leap-tests
#+BEGIN_SRC ocaml :tangle ocaml/leap/test.ml :mkdirp yes
open OUnit2
open Leap

let ae exp got _test_ctxt = assert_equal exp got ~printer:string_of_bool

let tests = [
  "year not divisible by 4: common year" >::
    ae false (leap_year 2015);
  "year divisible by 4, not divisible by 100: leap year" >::
    ae true (leap_year 1996);
  "year divisible by 100, not divisible by 400: common year" >::
    ae false (leap_year 2100);
  "year divisible by 400: leap year" >::
    ae true (leap_year 2000);
  "year divisible by 200, not divisible by 400: common year" >::
    ae false (leap_year 1800);
]

let () =
  run_test_tt_main ("leap tests" >::: tests)
#+END_SRC

#+name:ocaml-leap-makefile
#+BEGIN_SRC make :tangle ocaml/leap/Makefile :mkdirp yes
default: clean test

test:
	dune runtest

clean:
	dune clean

.PHONY: clean
#+END_SRC

#+name:ocaml-leap-make
#+BEGIN_SRC sh :dir ocaml/leap :results output :exports results
make 2>&1
#+END_SRC

*** Ocaml Leap Dune Project
#+name:ocaml-leap-dune
#+BEGIN_SRC ocaml :tangle ocaml/leap/dune :mkdirp yes
(executable
 (name test)
 (libraries base oUnit))

(alias
  (name    runtest)
  (deps    (:x test.exe))
  (action  (run %{x})))
#+END_SRC

#+name:ocaml-leap-dune-project
#+BEGIN_SRC ocaml :tangle ocaml/leap/dune-project :mkdirp yes
(lang dune 1.1)
(version 1.4.0)
#+END_SRC
* Exercism Makefile
*Note*: Make sure to export the environment variable
 @@texinfo:@env{PROGRAMMING}@@.
#+name:Exercism-Makefile
#+begin_src makefile :tangle Makefile
BASE_DIR := $(PROGRAMMING)/Languages/Exercism
LANGUAGES = python perl5 ocaml
HTML_SRC = *.html
TEXINFO_SRC = *.{texi,info,pdf}
DVI_SRC = *.{aux,log,toc}

.phony : texinfo-clean
texinfo-clean :
	cd $(BASE_DIR) && rm -vrf $(TEXINFO_SRC)

.phony : html-clean
html-clean :
	cd $(BASE_DIR) && rm -vrf $(HTML_SRC)

.phony : dist-clean
dist-clean :
	cd $(BASE_DIR) && rm -vrf $(LANGUAGES) README.md $(DVI_SRC)

.phony : world-clean
world-clean : dist-clean html-clean texinfo-clean
	rm Makefile

#+end_src

* Export Settings                                                  :noexport:
** HTML Export
#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:t tex:t
#+html_doctype: html5
#+html_container: div
#+description:Exercises from Exercism.io Python language
#+keywords:exercism.io exercises Python
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head:
#+html_head_extra:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.2.2)
#+latex_header:
** TEXINFO Export                                                 :noexport:
#+TEXINFO_FILENAME:Exercism.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:Languages
#+TEXINFO_DIR_TITLE:Exercism
#+TEXINFO_DIR_DESC:Learning new languages through exercises
#+TEXINFO_PRINTED_TITLE:Exercism Exercises
** MACROS                                                         :noexport:
#+macro: heading @@texinfo:@heading @@$1
#+macro: subheading @@texinfo:@subheading @@$1
* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+[dD]ate:Last updated %:y-%02m-%02d %02H:%02M$"
# End:
